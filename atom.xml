<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄重庆</title>
  <subtitle>Never Never Give Up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-08T12:31:15.036Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄重庆</name>
    <email>1756260160@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【翻译】使用Akka HTTP构建微服务：CDC方法</title>
    <link href="http://yoursite.com/2018/06/28/20180628%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E4%BD%BF%E7%94%A8Akka%20HTTP%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%9ACDC%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/06/28/20180628【翻译】使用Akka HTTP构建微服务：CDC方法/</id>
    <published>2018-06-28T14:50:33.000Z</published>
    <updated>2018-07-08T12:31:15.036Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原创声明，禁止转载</strong></p>
<p>构建微服务并不容易，特别是当微服务变得越来越多时，而且好多微服务可能由不同的团队提供和维护，这些微服务彼此交互并且变化很快。</p>
<p>文档、团队交互和测试是获得成功的三大法宝，但是如果用错误的方式进行，它们会产生更多的复杂性，而不是一种优势。<br><a id="more"></a><br>我们可以使用像<a href="https://swagger.io/" target="_blank" rel="external">Swagger</a>（用于文档），<a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>（用于测试环境），<a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenium</a>（用于端到端测试）等工具，但是我们最终还是会因为更改API而浪费大量时间，因为他们不是说谁适合来使用它们，或者设置合适的环境来执行集成测试，而是需要生产数据（希望是匿名的），但生产数据可能需要很长时间才能完成。</p>
<p>对所有这些问题都没有正确的答案，但我认为有一件事可以帮助很多人：首先从用户角度出发！</p>
<p>这是什么意思？一般情况下，在开发Web应用程序的时候，从模型和流程定义开始，深入到软件开发中，都是使用TDD（测试驱动开发）方法：先写测试，考虑我们真正想要的，以及我们如何使用它; 但微服务（microservices）呢？在这种情况下，它从消费者开始！消费者希望从其他服务中获得什么以及它希望如何互动？</p>
<p>这就是我说的<a href="http://martinfowler.com/articles/consumerDrivenContracts.html" target="_blank" rel="external">消费者驱动的契约（CDC）</a>测试。采用这种方法，消费者自己会定义需要的数据格式以及交互细节，并驱动生成一份契约文件。然后生产者根据契约文件来实现自己的逻辑，并在持续集成环境中持续验证。</p>
<h2 id="商业案例"><a href="#商业案例" class="headerlink" title="商业案例"></a>商业案例</h2><p>比如，我们希望在“我的图书馆”实现一项新功能，所以我们需要介绍类别（Categories），并且我们想知道其中有多少类别。这个想法是将逻辑分成两个服务，一个生产者（Producer）提供所有类别的列表，另一个消费者（Consumer）对其进行计数。<br><img src="https://upload-images.jianshu.io/upload_images/4340772-c73c80e3d6595619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>非常容易，但足以创建一个良好的基础结构和对CDC的理解。</p>
<h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>这篇文章，我选择了<a href="https://www.scala-lang.org/" target="_blank" rel="external">Scala</a>作为语言，<a href="https://doc.akka.io/docs/akka-http/current/" target="_blank" rel="external">Akka HTTP</a>作为框架。我认为这是一项非常好的技术，它可以满足构建微服务所需的所有基本要求：</p>
<ul>
<li>易于实现</li>
<li>快速</li>
<li>健壮性</li>
<li>很好的支持和文档记录</li>
</ul>
<p>在数据方面，我选择了<a href="http://slick.lightbend.com/" target="_blank" rel="external">Slick</a>作为库，将数据库交互和<a href="https://flywaydb.org/" target="_blank" rel="external">FlyWay</a>抽象为数据库迁移框架。它们既健壮又稳定，多次使用也没有问题。</p>
<p>最后，也是很重要的一点，测试支持！我喜欢<a href="http://www.scalatest.org/" target="_blank" rel="external">Scala Test</a>，因为它始终是我在Scala的项目的一部分，但我们的CDC呢？</p>
<p>对于CDC，有一个非常好的框架，可用于多平台：<a href="https://docs.pact.io/" target="_blank" rel="external">Pact</a>。</p>
<p>通过Pact，我们可以定义我们的消费者契约文件，并根据微服务接口的提供者和消费者进行验证。我建议花几分钟阅读官方Pact网站的主页，这很好地诠释了它背后的道理。</p>
<p>正如我所说的，Pact适用于很多平台，在我们的例子中，用Scala编写Consumer和Producer，我们只能使用一个实现：<a href="https://github.com/ITV/scala-pact" target="_blank" rel="external">Scala-Pact</a>。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>为了简单起见，我已经创建了一个包含消费者和生产者的<a href="https://www.scala-sbt.org/" target="_blank" rel="external">SBT</a>项目，但它们可以很容易被分割并用作模板。你可以在<a href="https://github.com/mariniss/mylibrary-contracts" target="_blank" rel="external">https://github.com/mariniss/mylibrary-contracts</a>找到源代码。</p>
<p>让我们以CDC风格开始我们的微服务实现！首先，我们必须定义我们的项目。我们可以轻松地使用SBT创建一个新的Scala项目并定义build.sbt，如下所示：<br><strong><em>build.sbt</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">name := &quot;myLibrary-contracts&quot;</div><div class="line">version := &quot;0.1&quot;</div><div class="line">scalaVersion := &quot;2.12.4&quot;</div><div class="line">enablePlugins(ScalaPactPlugin)</div><div class="line">libraryDependencies ++= Seq(</div><div class="line"> //Common dependencies</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-stream&quot;             % &quot;2.4.20&quot;,</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-http&quot;               % &quot;10.0.11&quot;, // Akka HTTP项目的标准依赖关系</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-http-spray-json&quot;    % &quot;10.0.11&quot;, // 用于JSON序列化和反序列化</div><div class="line"> &quot;org.slf4j&quot;           % &quot;slf4j-simple&quot;            % &quot;1.7.25&quot;,  // 用于日志记录</div><div class="line"> &quot;org.scalatest&quot;      %% &quot;scalatest&quot;               % &quot;3.0.1&quot;   % &quot;test&quot;,  // 测试框架</div><div class="line"> &quot;org.scalamock&quot;      %% &quot;scalamock&quot;               % &quot;4.0.0&quot;   % &quot;test&quot;,  // 模拟框架</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-stream-testkit&quot;     % &quot;2.4.20&quot;  % &quot;test&quot;,</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-testkit&quot;            % &quot;2.4.20&quot;  % &quot;test&quot;,</div><div class="line"> &quot;com.typesafe.akka&quot;  %% &quot;akka-http-testkit&quot;       % &quot;10.0.11&quot; % &quot;test&quot;,</div><div class="line"> &quot;com.itv&quot;            %% &quot;scalapact-argonaut-6-2&quot;  % &quot;2.2.0&quot;   % &quot;test&quot;,</div><div class="line"> &quot;com.itv&quot;            %% &quot;scalapact-scalatest&quot;     % &quot;2.2.0&quot;   % &quot;test&quot;,</div><div class="line"> &quot;com.itv&quot;            %% &quot;scalapact-http4s-0-16-2&quot; % &quot;2.2.0&quot;   % &quot;test&quot;,</div><div class="line"> //Producer dependencies</div><div class="line"> &quot;com.typesafe.slick&quot; %% &quot;slick&quot;                   % &quot;3.2.1&quot;,</div><div class="line"> &quot;com.typesafe.slick&quot; %% &quot;slick-hikaricp&quot;          % &quot;3.2.1&quot;,</div><div class="line"> &quot;com.h2database&quot;      % &quot;h2&quot;                      % &quot;1.4.196&quot;,</div><div class="line"> &quot;org.flywaydb&quot;        % &quot;flyway-core&quot;             % &quot;5.0.7&quot;</div><div class="line">)</div><div class="line">testOptions in Test += Tests.Argument(TestFrameworks.ScalaTest,</div><div class="line"> &quot;-y&quot;, &quot;org.scalatest.WordSpec&quot;,</div><div class="line"> &quot;-y&quot;, &quot;org.scalatest.FunSpec&quot;)</div><div class="line">parallelExecution in Test := false</div></pre></td></tr></table></figure>
<p>正如你所看到的，Akka HTTP项目的标准依赖关系（通用于提供者和消费者），<a href="https://github.com/spray/spray-json" target="_blank" rel="external">spry-json</a>用于JSON序列化和反序列化，<a href="https://www.slf4j.org/" target="_blank" rel="external">SL4J</a>用于日志记录，scalatest和<a href="http://scalamock.org/" target="_blank" rel="external">scalamock</a>作为测试和<a href="http://scalamock.org/" target="_blank" rel="external">模拟</a>框架，以及Scala协议为CDC测试。</p>
<p>生产者特定的依赖关系仅用于数据库支持，如您所见，我使用<a href="http://www.h2database.com/html/main.html" target="_blank" rel="external">H2（在内存数据库中）</a>，但您可以轻松地将其替换为其他数据库支持。</p>
<p>测试环境也有特定的配置; 只是因为我们在同一个项目中同时拥有生产者和客户端，所以并行执行被禁用，所以如果并行执行（我们稍后会看到它），我们可能会在Pact文件生成和使用过程中遇到问题。另外，我已经用两种不同的格式实现了测试，WordSpec和FunSpec，第一次用于所有的单元测试，第二次用于Pact测试，你可以按你的想法随意使用。</p>
<h3 id="消费者（Consumer）操作"><a href="#消费者（Consumer）操作" class="headerlink" title="消费者（Consumer）操作"></a>消费者（<strong>Consumer</strong>）操作</h3><p>现在我们有了基本的项目结构，我们可以开始在消费者方面创建Pact测试，所以我们可以定义我们在给定特定场景/状态时对提供者（Provider）的期望。</p>
<p><strong><em>MyLibraryClientPactSpec.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer.pact</div><div class="line">import com.fm.mylibrary.consumer.MyLibraryClient</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import com.fm.mylibrary.model.JsonProtocol._</div><div class="line">import com.itv.scalapact.ScalaPactForger._</div><div class="line">import org.scalatest.&#123;FunSpec, Matchers&#125;</div><div class="line">import spray.json._</div><div class="line">class MyLibraryClientPactSpec extends FunSpec with Matchers &#123;</div><div class="line"> describe(&quot;Connecting to the MyLibrary server&quot;) &#123;</div><div class="line">   it(&quot;should be able to fetch the categories&quot;)&#123;</div><div class="line">     val categories = List(Category(&quot;Java&quot;), Category(&quot;DevOps&quot;))</div><div class="line">     forgePact</div><div class="line">       .between(&quot;ScalaConsumer&quot;)</div><div class="line">       .and(&quot;myLibraryServer&quot;)</div><div class="line">       .addInteraction(</div><div class="line">         interaction</div><div class="line">           .description(&quot;Fetching categories&quot;)</div><div class="line">           .given(&quot;Categories: [Java, DevOps]&quot;)</div><div class="line">           .uponReceiving(</div><div class="line">             method = GET,</div><div class="line">             path = &quot;/search/category&quot;,</div><div class="line">             query = None)</div><div class="line">           .willRespondWith(</div><div class="line">             status = 200,</div><div class="line">             headers = Map(&quot;Content-Type&quot; -&gt; &quot;application/json&quot;),</div><div class="line">             body = categories.toJson.toString())</div><div class="line">       )</div><div class="line">       .runConsumerTest &#123; mockConfig =&gt;</div><div class="line">         val results = new MyLibraryClient().fetchCategories()</div><div class="line">         results.isDefined shouldEqual true</div><div class="line">         results.get.size shouldEqual 2</div><div class="line">         results.get.forall(c =&gt; categories.contains(c)) shouldEqual true</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Scala-pact非常易于使用，这要归功于ScalaPactForger对象，可以通过几行代码构建契约定义和期望效果，更详细地说：</p>
<p>契约参与者的定义： .between(“ScalaConsumer”) .and(“myLibraryServer”)<br>参与者之间的相互作用的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">addInteraction(interaction </div><div class="line">.description(&quot;Fetching categories&quot;) </div><div class="line">.given(&quot;Categories: [Java, DevOps]&quot;)</div><div class="line">.uponReceiving(method = GET,path = &quot;/search/category&quot;,query = None)</div><div class="line">.willRespondWith( status = 200, headers = Map(&quot;Content-Type&quot; -&gt; &quot;application/json&quot;),body = categories.toJson.toString()))givenuponReceivingwillRespondWith</div></pre></td></tr></table></figure></p>
<p> 真正重要的是描述系统状态，其中交互必须如所描述的那样工作，由消费者uponReceiving执行的请求和预期的响应。同时考虑到所有HTTP元素必须匹配（方法，url，标题，正文和查询）</p>
<p>用于验证消费者契约的实际测试的定义： 此代码将针对以前的方案运行，虚拟服务器将响应 交互部分中定义的唯一HTTP请求（如果响应为deined），它将验证消费者（Consumer）是否将按照协议中的规定进行要求。也可以在消费者（Consumer）处理的结果值上添加更多的检查（声明）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.runConsumerTest &#123; mockConfig =&gt; </div><div class="line"></div><div class="line">val results = new MyLibraryClient().fetchCategories() </div><div class="line"></div><div class="line">results.isDefined shouldEqual true</div><div class="line"></div><div class="line">results.get.size shouldEqual 2 </div><div class="line"></div><div class="line">results.get.forall(c =&gt; categories.contains(c)) shouldEqual true&#125;</div></pre></td></tr></table></figure></p>
<p>当然，我们可以添加更多场景和交互。我们也可以为许多生产者定义更多的契约。我建议通过“基本路径”和标准错误情景来确定描述正常使用情况下所需的基本情景和交互情况，但是留给单元测试所有详细的测试，以及与它们的实现相关的各种情况。</p>
<p>现在，您可以尝试编译并执行测试，但由于我们没有客户端和模型，所以我们需要添加基本逻辑来让测试通过。</p>
<p>我认为我们可以通过两种方式进行，直接构建客户端（因为我们已经进行了测试），或者改进我们客户端的定义，创建单元测试并以纯TDD方式对其进行处理。我们来看第二个选项：<br>MyLibraryClientSpec.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer</div><div class="line">import akka.http.scaladsl.model._</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import scala.concurrent.Future</div><div class="line">class MyLibraryClientSpec extends BaseTestAppClient &#123;</div><div class="line"> implicit val myLibraryServerUrl:String = &quot;//test&quot;</div><div class="line"> &quot;Fetch categories&quot; must &#123;</div><div class="line">   &quot;execute the HTTP request to get all categories and returns them&quot; in &#123;</div><div class="line">     val request = HttpRequest(HttpMethods.GET, &quot;//test/search/category&quot;)</div><div class="line">     val responseEntity = HttpEntity(bytes = &quot;&quot;&quot;[&#123;&quot;name&quot;: &quot;Java&quot;&#125;, &#123;&quot;name&quot;: &quot;DevOps&quot;&#125;]&quot;&quot;&quot;.getBytes,</div><div class="line">                                     contentType = ContentTypes.`application/json`)</div><div class="line">     val response = HttpResponse(status = StatusCodes.OK, entity = responseEntity)</div><div class="line">     requestExecutor.expects(request).returning(Future.successful(response))</div><div class="line">     val results = new MyLibraryClient().fetchCategories()</div><div class="line">     results.isDefined shouldEqual true</div><div class="line">     results.get.size shouldEqual 2</div><div class="line">     results.get.contains(Category(&quot;Java&quot;)) shouldEqual true</div><div class="line">     results.get.contains(Category(&quot;DevOps&quot;)) shouldEqual true</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>非常标准的测试; 我们希望抛出一个MyLibraryClient函数，该函数使用一个外部函数返回一个“Category”对象列表，该函数接受一个HttpRequest并返回一个HttpResponse。</p>
<p>正如你所看到的，没有明确提供这种外部依赖; 那是因为我想把它作为一个“隐含”价值。这是一种帮助创建可测试代码的方法，但我强烈建议不要使用它，因为它会使代码难以阅读，特别是对于那些新的Scala。</p>
<p>我也喜欢定义一个具有所有必要依赖项的特征来轻松构建测试用例：</p>
<p>BaseTestAppClient.scala</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.model.&#123;HttpRequest, HttpResponse&#125;</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import akka.testkit.&#123;ImplicitSender, TestKit&#125;</div><div class="line">import org.scalamock.scalatest.MockFactory</div><div class="line">import org.scalatest.&#123;BeforeAndAfterAll, Matchers, WordSpecLike&#125;</div><div class="line">import scala.concurrent.&#123;ExecutionContextExecutor, Future&#125;</div><div class="line">class BaseTestAppClient extends TestKit(ActorSystem(&quot;BaseTestAppClient&quot;))</div><div class="line">           with WordSpecLike</div><div class="line">           with ImplicitSender</div><div class="line">           with Matchers</div><div class="line">           with BeforeAndAfterAll</div><div class="line">           with MockFactory &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = system</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()(system)</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = system.dispatcher</div><div class="line"> implicit val requestExecutor = mockFunction[HttpRequest, Future[HttpResponse]]</div><div class="line"> override def afterAll &#123;</div><div class="line">   TestKit.shutdownActorSystem(system)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它定义了在我们的测试中使用的actor系统和执行HTTP请求的函数。</p>
<p>现在我们有了测试，让我们来实现一些逻辑：</p>
<p>MyClientLibrary.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.client.RequestBuilding</div><div class="line">import akka.http.scaladsl.model.&#123;HttpRequest, HttpResponse, StatusCodes&#125;</div><div class="line">import akka.http.scaladsl.unmarshalling.Unmarshal</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import com.fm.mylibrary.model.JsonProtocol._</div><div class="line">import scala.concurrent.&#123;ExecutionContextExecutor, Future&#125;</div><div class="line">class MyLibraryClient(implicit val myLibraryServerUrl: String,</div><div class="line">                      implicit val actorSystem: ActorSystem,</div><div class="line">                      implicit val materializer: ActorMaterializer,</div><div class="line">                      implicit val executionContext: ExecutionContextExecutor,</div><div class="line">                      implicit val requestExecutor: HttpRequest =&gt; Future[HttpResponse]) extends BaseHttpClient &#123;</div><div class="line"> def fetchCategories(): Option[List[Category]] = executeSyncRequest(</div><div class="line">   RequestBuilding.Get(s&quot;$myLibraryServerUrl/search/category&quot;),</div><div class="line">   response =&gt;</div><div class="line">     if(response.status == StatusCodes.OK)</div><div class="line">       Unmarshal(response.entity).to[Option[List[Category]]]</div><div class="line">     else</div><div class="line">       Future.successful(None)</div><div class="line"> )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Category.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.model</div><div class="line">case class Category (name: String)</div></pre></td></tr></table></figure></p>
<p>这个相对容易实现。并且我使用了隐式声明依赖关系，但可以显性地提高代码的可读性。</p>
<p>接下来我创建了一个特征，它为每个HTTP客户端（现在只有一个）定义了基本组件，并具有一个以同步方式执行HTTP请求的功能：<br>BaseHttpClient.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.model.&#123;HttpRequest, HttpResponse&#125;</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import scala.concurrent.duration._</div><div class="line">import scala.concurrent.&#123;Await, ExecutionContextExecutor, Future&#125;</div><div class="line">import scala.language.postfixOps</div><div class="line">trait BaseHttpClient &#123;</div><div class="line"> implicit def actorSystem: ActorSystem</div><div class="line"> implicit def materializer: ActorMaterializer</div><div class="line"> implicit def executionContext: ExecutionContextExecutor</div><div class="line"> implicit def requestExecutor: HttpRequest =&gt; Future[HttpResponse]</div><div class="line"> val awaitTime: FiniteDuration = 5000 millis</div><div class="line"> def executeSyncRequest[T](request: HttpRequest, responseHandler: HttpResponse =&gt; Future[T]): T = &#123;</div><div class="line">   val response: Future[T] = requestExecutor(request).flatMap(&#123; response =&gt;</div><div class="line">     responseHandler(response)</div><div class="line">   &#125;)</div><div class="line">   Await.result(response, awaitTime)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们很好地执行单元测试，如果我们没有犯错误，我们应该得到一个成功的执行。随意添加更多测试并重构客户端以便根据您的喜好调整结构（您可以<a href="https://github.com/mariniss/mylibrary-contracts/blob/master/src/test/scala/com/fm/mylibrary/consumer/MyLibraryClientSpec.scala" target="_blank" rel="external">在此处</a>找到更多测试）。</p>
<p>我们也可以尝试执行Pact test（MyLibraryClientPactSpec），但它会失败，因为它应该执行一个真正的HTTP调用，scala-pact框架将启动一个真实的HTTP服务器，接受和响应协议中描述的请求。</p>
<p>我们差不多完成了我们想要的实现，它基本上是定义了actor系统和执行HTTP调用的函数的元素：</p>
<p><strong><em>MyLibraryAppClient.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer.app</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.model.&#123;HttpRequest, HttpResponse&#125;</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import scala.concurrent.&#123;ExecutionContextExecutor, Future&#125;</div><div class="line">object MyLibraryAppClient &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = ActorSystem()</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = actorSystem.dispatcher</div><div class="line"> implicit val requestExecutor: HttpRequest =&gt; Future[HttpResponse] = Http().singleRequest(_)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它是一个对象，所以我们可以将它导入到任何我们必须使用我们的客户端的地方，正如您在Pact测试中看到的那样： import com.fm.mylibrary.consumer.app.MyLibraryAppClient._</p>
<p>当然，您可以使用其他方法，但请在选择时保持一致，并避免在相同或类似项目中使用不同的方法/结构。</p>
<p>我们终于可以执行协议测试了！如果你很幸运，你应该得到这样的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&gt; Adding interactions:</div><div class="line">&gt; - Interaction(None,Some(Categories: [Java, DevOps]),Fetching categories,InteractionRequest(Some(GET),Some(/search/category),None,None,None,None),InteractionResponse(Some(200),Some(Map(Content-Type -&gt; application/json)),Some([&#123;&quot;name&quot;:&quot;Java&quot;&#125;,&#123;&quot;name&quot;:&quot;DevOps&quot;&#125;]),None))</div><div class="line">[ScalaTest-run-running-MyLibraryClientPactSpec] INFO org.http4s.blaze.channel.nio1.NIO1SocketServerGroup - Service bound to address /127.0.0.1:55653</div><div class="line">&gt; ScalaPact stub running at: http://localhost:55653</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.ServerChannelGroup - Connection to /127.0.0.1:55666 accepted at Tue Feb 13 11:43:08 GMT 2018.</div><div class="line">[http4s-blaze-client-1] INFO org.http4s.client.PoolManager - Shutting down connection pool: allocated=1 idleQueue.size=1 waitQueue.size=0</div><div class="line">[DEBUG] [02/13/2018 11:43:09.376] [ScalaTest-run-running-MyLibraryClientPactSpec] [EventStream(akka://default)] logger log1-Logging$DefaultLogger started</div><div class="line">[DEBUG] [02/13/2018 11:43:09.377] [ScalaTest-run-running-MyLibraryClientPactSpec] [EventStream(akka://default)] Default Loggers started</div><div class="line">[DEBUG] [02/13/2018 11:43:09.595] [ScalaTest-run-running-MyLibraryClientPactSpec] [AkkaSSLConfig(akka://default)] Initializing AkkaSSLConfig extension...</div><div class="line">[DEBUG] [02/13/2018 11:43:09.598] [ScalaTest-run-running-MyLibraryClientPactSpec] [AkkaSSLConfig(akka://default)] buildHostnameVerifier: created hostname verifier: com.typesafe.sslconfig.ssl.DefaultHostnameVerifier@db2cd5</div><div class="line">[DEBUG] [02/13/2018 11:43:09.834] [default-akka.actor.default-dispatcher-5] [default/Pool(shared-&gt;http://localhost:55653)] (Re-)starting host connection pool to localhost:55653</div><div class="line">[DEBUG] [02/13/2018 11:43:10.123] [default-akka.actor.default-dispatcher-5] [default/Pool(shared-&gt;http://localhost:55653)] InputBuffer (max-open-requests = 32) now filled with 1 request after enqueuing GET /search/category Empty</div><div class="line">[DEBUG] [02/13/2018 11:43:10.127] [default-akka.actor.default-dispatcher-2] [default/Pool(shared-&gt;http://localhost:55653)] [0] Unconnected -&gt; Loaded(1)</div><div class="line">[DEBUG] [02/13/2018 11:43:10.137] [default-akka.actor.default-dispatcher-2] [default/Pool(shared-&gt;http://localhost:55653)] [0] &lt;unconnected&gt; Establishing connection...</div><div class="line">[DEBUG] [02/13/2018 11:43:10.167] [default-akka.actor.default-dispatcher-2] [default/Pool(shared-&gt;http://localhost:55653)] [0] &lt;unconnected&gt; pushing request to connection: GET /search/category Empty</div><div class="line">[DEBUG] [02/13/2018 11:43:10.179] [default-akka.actor.default-dispatcher-2] [akka://default/system/IO-TCP/selectors/$a/0] Resolving localhost before connecting</div><div class="line">[DEBUG] [02/13/2018 11:43:10.200] [default-akka.actor.default-dispatcher-5] [akka://default/system/IO-DNS] Resolution request for localhost from Actor[akka://default/system/IO-TCP/selectors/$a/0#871918912]</div><div class="line">[DEBUG] [02/13/2018 11:43:10.209] [default-akka.actor.default-dispatcher-5] [akka://default/system/IO-TCP/selectors/$a/0] Attempting connection to [localhost/127.0.0.1:55653]</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.ServerChannelGroup - Connection to /127.0.0.1:55669 accepted at Tue Feb 13 11:43:10 GMT 2018.</div><div class="line">[DEBUG] [02/13/2018 11:43:10.212] [default-akka.actor.default-dispatcher-5] [akka://default/system/IO-TCP/selectors/$a/0] Connection established to [localhost:55653]</div><div class="line">[DEBUG] [02/13/2018 11:43:10.291] [default-akka.actor.default-dispatcher-5] [default/Pool(shared-&gt;http://localhost:55653)] [0] &lt;/127.0.0.1:55669-&gt;localhost:55653&gt; Received response: GET /search/category Empty -&gt; 200 OK Strict(35 bytes)</div><div class="line">[DEBUG] [02/13/2018 11:43:10.296] [default-akka.actor.default-dispatcher-8] [default/Pool(shared-&gt;http://localhost:55653)] [0] &lt;/127.0.0.1:55669-&gt;localhost:55653&gt; Finished reading response entity for GET /search/category Empty -&gt; 200 OK Strict(35 bytes)</div><div class="line">[DEBUG] [02/13/2018 11:43:10.298] [default-akka.actor.default-dispatcher-5] [default/Pool(shared-&gt;http://localhost:55653)] [0] Loaded(1) -&gt; Idle</div><div class="line">[ScalaTest-run-running-MyLibraryClientPactSpec] INFO org.http4s.blaze.channel.ServerChannel - Closing NIO1 channel /127.0.0.1:55653 at Tue Feb 13 11:43:10 GMT 2018</div><div class="line">[ScalaTest-run-running-MyLibraryClientPactSpec] INFO org.http4s.blaze.channel.nio1.NIO1SocketServerGroup - Closing NIO1SocketServerGroup</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.nio1.SelectorLoop - Shutting down SelectorLoop blaze-nio-fixed-selector-pool-0</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.nio1.SelectorLoop - Shutting down SelectorLoop blaze-nio-fixed-selector-pool-1</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.nio1.SelectorLoop - Shutting down SelectorLoop blaze-nio-fixed-selector-pool-2</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.nio1.SelectorLoop - Shutting down SelectorLoop blaze-nio-fixed-selector-pool-3</div><div class="line">[blaze-nio1-acceptor] INFO org.http4s.blaze.channel.nio1.SelectorLoop - Shutting down SelectorLoop blaze-nio-fixed-selector-pool-4</div><div class="line">[DEBUG] [02/13/2018 11:43:10.355] [default-akka.actor.default-dispatcher-3] [default/Pool(shared-&gt;http://localhost:55653)] [0] &lt;/127.0.0.1:55669-&gt;localhost:55653&gt; connection was closed by peer while no requests were in flight</div><div class="line">[DEBUG] [02/13/2018 11:43:10.360] [default-akka.actor.default-dispatcher-3] [default/Pool(shared-&gt;http://localhost:55653)] [0] Idle -&gt; Unconnected</div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>我已经使用<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ IDEA CE</a>来执行测试，但是您可以直接使用这些命令来使用sbt：</p>
<ul>
<li><code>sbt test</code>：它执行扩展了<code>FunSpec和WordSpec的</code>所有测试（如在build.sbt定义）</li>
<li><code>sbt pactTest</code>：它执行所有pacts测试</li>
</ul>
<p>该测试验证了消费者协议，并<strong>生成提供者</strong>必须遵守<strong>的契约/协议</strong>。你可以找到它们，它们是遵循特定Pact结构的JSON文件。生成的应该是这样的：<code>target/pacts</code><br>ScalaConsumer_myLibraryServer.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;provider&quot; : &#123;</div><div class="line">   &quot;name&quot; : &quot;myLibraryServer&quot;</div><div class="line"> &#125;,</div><div class="line"> &quot;consumer&quot; : &#123;</div><div class="line">   &quot;name&quot; : &quot;ScalaConsumer&quot;</div><div class="line"> &#125;,</div><div class="line"> &quot;interactions&quot; : [</div><div class="line">   &#123;</div><div class="line">     &quot;request&quot; : &#123;</div><div class="line">       &quot;method&quot; : &quot;GET&quot;,</div><div class="line">       &quot;path&quot; : &quot;/search/category&quot;</div><div class="line">     &#125;,</div><div class="line">     &quot;description&quot; : &quot;Fetching categories&quot;,</div><div class="line">     &quot;response&quot; : &#123;</div><div class="line">       &quot;status&quot; : 200,</div><div class="line">       &quot;headers&quot; : &#123;</div><div class="line">         &quot;Content-Type&quot; : &quot;application/json&quot;</div><div class="line">       &#125;,</div><div class="line">       &quot;body&quot; : [</div><div class="line">         &#123;</div><div class="line">           &quot;name&quot; : &quot;Java&quot;</div><div class="line">         &#125;,</div><div class="line">         &#123;</div><div class="line">           &quot;name&quot; : &quot;DevOps&quot;</div><div class="line">         &#125;</div><div class="line">       ]</div><div class="line">     &#125;,</div><div class="line">     &quot;providerState&quot; : &quot;Categories: [Java, DevOps]&quot;</div><div class="line">   &#125;</div><div class="line"> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>正如你所看到的，这非常简单，两个参与者（提供者和消费者）的定义与可能的交互。</p>
<p>迄今为止已经很好好。但您可以添加更多的逻辑，更多的客户端，更多的契约，更多的服务等.Git仓库中的项目还包含一个小型服务，其中包含业务逻辑，计算类别的详细任务。这里是代码： CategoriesServiceSpec.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer.service</div><div class="line">import com.fm.mylibrary.consumer.MyLibraryClient</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import org.scalamock.scalatest.MockFactory</div><div class="line">import org.scalatest.&#123;Matchers, WordSpec&#125;</div><div class="line">class CategoriesServiceSpec extends WordSpec with Matchers with MockFactory &#123;</div><div class="line"> private val mockMyLibraryClient = mock[MyLibraryClient]</div><div class="line"> private val service = new CategoriesService(mockMyLibraryClient)</div><div class="line"> &quot;Count Categories&quot; must &#123;</div><div class="line">   &quot;return the number of all categories fetched form MyLibrary&quot; in &#123;</div><div class="line">     val javaCategory = Category(&quot;Java&quot;)</div><div class="line">     val devopsCategory = Category(&quot;DevOps&quot;)</div><div class="line">     (mockMyLibraryClient.fetchCategories _).expects().returning(Some(List(javaCategory, devopsCategory)))</div><div class="line">     val result = service.countCategories()</div><div class="line">     result shouldBe 2</div><div class="line">   &#125;</div><div class="line">   &quot;return 0 in case of the fetch form MyLibrary fails&quot; in &#123;</div><div class="line">     (mockMyLibraryClient.fetchCategories _).expects().returning(None)</div><div class="line">     val result = service.countCategories()</div><div class="line">     result shouldBe 0</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CategoriesService.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.consumer.service</div><div class="line">import com.fm.mylibrary.consumer.MyLibraryClient</div><div class="line">class CategoriesService(val myLibraryClient: MyLibraryClient) extends &#123;</div><div class="line"> def countCategories(): Int = myLibraryClient.fetchCategories() match &#123;</div><div class="line">   case None =&gt; 0</div><div class="line">   case Some(categories) =&gt;</div><div class="line">     categories.size</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我没有使用任何依赖注入框架，因为我相信，如果微服务需要一个DI框架，那会使它变得非常庞大而复杂，但是如果你不像我这样想，可以随意使用它。我过去使用过<a href="https://github.com/google/guice" target="_blank" rel="external">Google Guice</a>，看起来相当不错。</p>
<h3 id="生产者（Provider）实现"><a href="#生产者（Provider）实现" class="headerlink" title="生产者（Provider）实现"></a>生产者（Provider）实现</h3><p>一旦我们用契约文件定义了我们的消费者（<strong>Consumer</strong>），我们就可以转移到生产者并使用消费者产生的关联来实现它。</p>
<p>与往常一样，我们从测试开始。至于生产者，我们将有两种类型的测试，一种是验证协议，另一种是详细验证业务逻辑（单元测试）。服务器的实现通常比客户端要大得多，所以我认为最好从单元测试开始，一旦我们有了一个完整的应用程序，我们就可以创建测试来验证pact（或契约）。</p>
<p>另外，我总是建议采用增量方法（即使是小型项目），所以在这种情况下，我们可以构建一个服务器来公开一个API并返回两个类别的静态列表（如Pact文件中定义的），然后添加配置支持，数据库支持，迁移支持等。</p>
<p>在这里，我们将对我们的API进行单元测试：</p>
<p><strong><em>CategoriesRoutesSpec.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import com.fm.mylibrary.model.JsonProtocol._</div><div class="line">class CategoriesRoutesSpec extends BaseTestAppServer &#123;</div><div class="line"> &quot;The service&quot; should &#123;</div><div class="line">   &quot;return an empty JSon array if there are no categories&quot; in &#123;</div><div class="line">     Get(&quot;/search/category&quot;) ~&gt; routes ~&gt; check &#123;</div><div class="line">       responseAs[List[Category]] shouldBe List(Category(&quot;DevOps&quot;), Category(&quot;Java&quot;))</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以及具有所有测试依赖性的基本测试类BaseTestAppServer：</p>
<p><strong><em>BaseTestAppServer.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import akka.http.scaladsl.testkit.ScalatestRouteTest</div><div class="line">import org.scalamock.scalatest.MockFactory</div><div class="line">import org.scalatest.&#123;BeforeAndAfterAll, Matchers, WordSpec&#125;</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">class BaseTestAppServer extends WordSpec</div><div class="line">           with ScalatestRouteTest</div><div class="line">           with Matchers</div><div class="line">           with MockFactory</div><div class="line">           with Routes</div><div class="line">           with BeforeAndAfterAll &#123;</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = system.dispatcher</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该测试是使用Akka HTTP Route TestKit实现的，您可以在<a href="https://doc.akka.io/docs/akka-http/current/routing-dsl/testkit.html" target="_blank" rel="external">这里</a>找到官方文档，它允许在这种格式的路由上构建测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">REQUEST ~&gt; ROUTE ~&gt; check &#123;</div><div class="line">    ASSERTIONS </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BaseTestAppServer的类包含基本的依赖WordSpec，ScalatestRouteTest，Matchers，MockFactory，BeforeAndAfterAll和定义应用程序的路由的性状：Routes</p>
<p>当然它不会编译也不会传递，因为还没有实现，所以让我们定义我们的路由：</p>
<p><strong><em>Routes.scala</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import akka.http.scaladsl.server.Directives._</div><div class="line">import akka.http.scaladsl.server.Route</div><div class="line">import akka.stream.Materializer</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import scala.concurrent.ExecutionContext</div><div class="line">import spray.json._</div><div class="line">import com.fm.mylibrary.model.JsonProtocol._</div><div class="line">trait Routes &#123;</div><div class="line"> implicit val materializer: Materializer</div><div class="line"> implicit val executionContext: ExecutionContext</div><div class="line"> val searchRoutes: Route = &#123;</div><div class="line">   pathPrefix(&quot;search&quot; / &quot;category&quot;) &#123;</div><div class="line">     get &#123;</div><div class="line">       complete(</div><div class="line">         List(Category(&quot;DevOps&quot;), Category(&quot;Java&quot;)).toJson</div><div class="line">       )</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> val routes: Route = searchRoutes</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我为json编组/解组使用了<a href="https://github.com/spray/spray-json" target="_blank" rel="external">spray-json</a>，并且它需要定义用于转换的协议（或格式），您可以在代码<code>import com.fm.mylibrary.model.JsonProtocol._</code>中看到此对象的导入：; 还需要导入其中<code>import spray.json._</code>提供转换的所有功能; 在这种情况下，我正在使用<code>toJson</code>寻找它将要转换的特定对象的协议（或格式）的隐式定义。<br><strong><em>JsonProtocol.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.model</div><div class="line">import spray.json._</div><div class="line">import akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport</div><div class="line">object JsonProtocol extends SprayJsonSupport with DefaultJsonProtocol &#123;</div><div class="line"> implicit val categoryFormat = jsonFormat1(Category)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>没有必要为对象定义转换器<code>List</code>，<code>Array</code>，<code>Options</code>，等等，因为它们是由<code>DefaultJsonProtocol中</code>的，spry-json提供。</p>
<p>还有其他类似的库，如<a href="http://argonaut.io/" target="_blank" rel="external">Argonaut</a>和<a href="http://json4s.org/" target="_blank" rel="external">JSON4S</a>，可以按你想法评估所有这些库，并选择最适合您需求的库。</p>
<p>如果我们再次执行测试，我们现在应该得到一条绿线。再次，添加更多的测试，以涵盖每一个案例。在此之前，为了检查我们的服务是否符合消费者契约，我们必须完成定义Akka HTTP应用程序的基本服务：</p>
<p><strong><em>MyLibraryAppServer.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.app</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.server.directives.DebuggingDirectives</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import com.fm.mylibrary.producer.Routes</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">import scala.util.&#123;Failure, Success&#125;</div><div class="line">object MyLibraryAppServer extends App</div><div class="line">         with Routes</div><div class="line">         with DebuggingDirectives &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = ActorSystem()</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = actorSystem.dispatcher</div><div class="line"> val log = actorSystem.log</div><div class="line"> def startApplication(): Unit = &#123;</div><div class="line">   Http().bindAndHandle(handler = logRequestResult(&quot;log&quot;)(routes), interface = &quot;localhost&quot;, port = 9000).onComplete &#123;</div><div class="line">     case Success(b) =&gt; log.info(s&quot;application is up and running at $&#123;b.localAddress.getHostName&#125;:$&#123;b.localAddress.getPort&#125;&quot;)</div><div class="line">     case Failure(e) =&gt; log.error(s&quot;could not start application: &#123;&#125;&quot;, e.getMessage)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> def stopApplication(): Unit = &#123;</div><div class="line">   actorSystem.terminate()</div><div class="line"> &#125;</div><div class="line"> startApplication()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类定义了两个方法，一个是启动我们的服务器所必需的，另一个是停止服务器的方法，它还定义了将在路由处理中使用的actor系统和执行上下文。</p>
<p>它扩展了提供主要方法的特征scala.App，所以你可以执行这个类，它将启动一个提供定义路由的http服务器。</p>
<p>但首先，让我们来检查一下协议是否被满足，我们可以很容易地用这样的测试类来验证它：</p>
<p>MyLibraryServerPactSpec.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.pact</div><div class="line">import com.fm.mylibrary.producer.app.MyLibraryAppServer</div><div class="line">import org.scalatest.&#123;BeforeAndAfterAll, FunSpec, Matchers&#125;</div><div class="line">import com.itv.scalapact.ScalaPactVerify._</div><div class="line">class MyLibraryServerPactSpec extends FunSpec with Matchers with BeforeAndAfterAll &#123;</div><div class="line"> override def beforeAll() &#123;</div><div class="line">   MyLibraryAppServer.main(Array())</div><div class="line"> &#125;</div><div class="line"> override def afterAll() &#123;</div><div class="line">   MyLibraryAppServer.stopApplication()</div><div class="line"> &#125;</div><div class="line"> describe(&quot;Verifying MyLibrary server&quot;) &#123;</div><div class="line">   it(&quot;should be able to respect the contract&quot;)&#123;</div><div class="line">     verifyPact</div><div class="line">       .withPactSource(loadFromLocal(&quot;target/pacts&quot;))</div><div class="line">       .noSetupRequired</div><div class="line">       .runVerificationAgainst(&quot;localhost&quot;, 9999)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它使用可以以像类似<code>forgePact</code>方式使用的对象<code>verifyPact</code>，Pact文件的来源<code>target/pacts</code>在我们的例子中定义（但可以是共享位置或<a href="https://github.com/pact-foundation/pact_broker" target="_blank" rel="external">Pact Broker</a>），设置执行所需的数据或环境所需的最终代码所有交互，然后是服务器正在侦听请求的主机和端口。</p>
<p>因此，根据Consumer测试，我们希望scala-pact执行真正的HTTP调用，所以我们需要设置应用程序以处理此调用。我们可以通过多种方式做到这一点，我为我选择了安全和简单的解决方案，即在生产中启动服务器，调用之前执行测试<code>MyLibraryAppServer</code>的主要方法，并且之后关闭它。如果应用程序很简单，我们可以使用这种方法，如果不是这样，我们可以为这种测试实现特定的测试运行器，但我建议尽可能与生产案例类似。</p>
<p>执行测试，我们应该得到一个pass和一个这样的输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[DEBUG] [02/13/2018 16:45:09.053] [ScalaTest-run] [EventStream(akka://default)] logger log1-Logging$DefaultLogger started</div><div class="line">[DEBUG] [02/13/2018 16:45:09.054] [ScalaTest-run] [EventStream(akka://default)] Default Loggers started</div><div class="line">[DEBUG] [02/13/2018 16:45:09.110] [ScalaTest-run] [AkkaSSLConfig(akka://default)] Initializing AkkaSSLConfig extension...</div><div class="line">[DEBUG] [02/13/2018 16:45:09.112] [ScalaTest-run] [AkkaSSLConfig(akka://default)] buildHostnameVerifier: created hostname verifier: com.typesafe.sslconfig.ssl.DefaultHostnameVerifier@1bb571c</div><div class="line">[DEBUG] [02/13/2018 16:45:10.244] [default-akka.actor.default-dispatcher-3] [akka://default/system/IO-TCP/selectors/$a/0] Successfully bound to /127.0.0.1:9000</div><div class="line">[INFO] [02/13/2018 16:45:10.256] [default-akka.actor.default-dispatcher-3] [akka.actor.ActorSystemImpl(default)] application is up and running at 127.0.0.1:9000</div><div class="line">Attempting to use local pact files at: &apos;target/pacts&apos;</div><div class="line">Looking for pact files in: target/pacts</div><div class="line">Found directory: C:\Dev\git-1.0.6\home\src-rnd\myLibrary-contracts\target\pacts</div><div class="line">Loading pact file: ScalaConsumer_myLibraryServer.json</div><div class="line">Verifying against &apos;localhost&apos; on port &apos;9000&apos; with a timeout of 2 second(s).</div><div class="line">--------------------</div><div class="line">Attempting to run provider state: Categories: [Java, DevOps]</div><div class="line">Provider state ran successfully</div><div class="line">--------------------</div><div class="line">[DEBUG] [02/13/2018 16:45:10.883] [default-akka.actor.default-dispatcher-4] [akka://default/system/IO-TCP/selectors/$a/0] New connection accepted</div><div class="line">[DEBUG] [02/13/2018 16:45:11.146] [default-akka.actor.default-dispatcher-2] [akka.actor.ActorSystemImpl(default)] log: Response for</div><div class="line">  Request : HttpRequest(HttpMethod(GET),http://localhost:9000/search/category,List(Host: localhost:9000, User-Agent: scala-pact/0.16.2, Timeout-Access: &lt;function1&gt;),HttpEntity.Strict(none/none,ByteString()),HttpProtocol(HTTP/1.1))</div><div class="line">  Response: Complete(HttpResponse(200 OK,List(),HttpEntity.Strict(application/json,[&#123;&quot;name&quot;:&quot;DevOps&quot;&#125;,&#123;&quot;name&quot;:&quot;Java&quot;&#125;]),HttpProtocol(HTTP/1.1)))</div><div class="line">[http4s-blaze-client-1] INFO org.http4s.client.PoolManager - Shutting down connection pool: allocated=1 idleQueue.size=1 waitQueue.size=0</div><div class="line">[DEBUG] [02/13/2018 16:45:11.262] [default-akka.actor.default-dispatcher-2] [akka://default/system/IO-TCP/selectors/$a/1] Closing connection due to IO error java.io.IOException: An existing connection was forcibly closed by the remote host</div><div class="line">Results for pact between ScalaConsumer and myLibraryServer</div><div class="line"> - [  OK  ] Fetching categories</div><div class="line">[DEBUG] [02/13/2018 16:45:11.391] [default-akka.actor.default-dispatcher-9] [EventStream] shutting down: StandardOutLogger started</div><div class="line">[DEBUG] [02/13/2018 16:45:11.391] [default-akka.actor.default-dispatcher-7] [akka://default/system/IO-TCP/selectors/$a/0] Monitored actor [Actor[akka://default/user/StreamSupervisor-0/$a#-487633161]] terminated</div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<p>如果你不能执行，请确保在其中包含协议文件。target/pactsMyLibraryClientPactSpec</p>
<p>消费者协议似乎受到尊重，所以我们可以继续实现，添加外部配置文件，数据库支持和数据库迁移支持。</p>
<p>添加外部配置是很容易的，只需要在创建文件下，配置它所有的配置值，即：application.confsrc/main/resources</p>
<p>application.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">akka &#123;</div><div class="line"> loglevel = DEBUG</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line"> interface = &quot;0.0.0.0&quot;</div><div class="line"> port = 9000</div><div class="line">&#125;</div><div class="line">database = &#123;</div><div class="line"> url = &quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&quot;</div><div class="line"> driver = org.h2.Driver</div><div class="line"> connectionPool = disabled</div><div class="line"> keepAliveConnection = true</div><div class="line"> user = &quot;sa&quot;</div><div class="line"> password = &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，您可以创建一个处理它的特征，从而加载配置和相应的命名常量：</p>
<p>Config.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import com.typesafe.config.ConfigFactory</div><div class="line">trait Config &#123;</div><div class="line"> private val config = ConfigFactory.load()</div><div class="line"> private val httpConfig = config.getConfig(&quot;http&quot;)</div><div class="line"> private val databaseConfig = config.getConfig(&quot;database&quot;)</div><div class="line"> val httpInterface: String = httpConfig.getString(&quot;interface&quot;)</div><div class="line"> val httpPort: Int = httpConfig.getInt(&quot;port&quot;)</div><div class="line"> val databaseUrl: String = databaseConfig.getString(&quot;url&quot;)</div><div class="line"> val databaseUser: String = databaseConfig.getString(&quot;user&quot;)</div><div class="line"> val databasePassword: String = databaseConfig.getString(&quot;password&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>默认情况下，ConfigFactory.load()从src/main/resources/application.conf该位置加载配置</p>
<p>我们也可以将测试的配置版本放在：src/test/resources</p>
<p>application.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">akka &#123;</div><div class="line"> loglevel = DEBUG</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line"> interface = &quot;localhost&quot;</div><div class="line"> port = 9999</div><div class="line">&#125;</div><div class="line">database = &#123;</div><div class="line"> url = &quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&quot;</div><div class="line"> driver = org.h2.Driver</div><div class="line"> connectionPool = disabled</div><div class="line"> keepAliveConnection = true</div><div class="line"> user = &quot;sa&quot;</div><div class="line"> password = &quot;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这种情况下没有太大的不同，因为我正在使用内存数据库。</p>
<p>在主类中使用它非常容易; 只需将其添加为类特征，并将静态值替换为相应的常量即可：</p>
<p>MyLibraryAppServer.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.app</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.server.directives.DebuggingDirectives</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import com.fm.mylibrary.producer.&#123;Config, Routes&#125;</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">import scala.util.&#123;Failure, Success&#125;</div><div class="line">object MyLibraryAppServer extends App</div><div class="line">         with Routes</div><div class="line">         with Config</div><div class="line">         with DebuggingDirectives &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = ActorSystem()</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = actorSystem.dispatcher</div><div class="line"> val log = actorSystem.log</div><div class="line"> def startApplication(): Unit = &#123;</div><div class="line">   Http().bindAndHandle(handler = logRequestResult(&quot;log&quot;)(routes), interface = httpInterface, port = httpPort).onComplete &#123;</div><div class="line">     case Success(b) =&gt; log.info(s&quot;application is up and running at $&#123;b.localAddress.getHostName&#125;:$&#123;b.localAddress.getPort&#125;&quot;)</div><div class="line">     case Failure(e) =&gt; log.error(s&quot;could not start application: &#123;&#125;&quot;, e.getMessage)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> def stopApplication(): Unit = &#123;</div><div class="line">   actorSystem.terminate()</div><div class="line"> &#125;</div><div class="line"> startApplication()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您也可以在Pact测试中使用该配置，以便使用正确的服务器地址：</p>
<p>MyLibraryServerPactSpec.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.pact</div><div class="line">import com.fm.mylibrary.producer.Config</div><div class="line">import com.fm.mylibrary.producer.app.MyLibraryAppServer</div><div class="line">import org.scalatest.&#123;BeforeAndAfterAll, FunSpec, Matchers&#125;</div><div class="line">import com.itv.scalapact.ScalaPactVerify._</div><div class="line">class MyLibraryServerPactSpec extends FunSpec with Matchers with BeforeAndAfterAll with Config &#123;</div><div class="line"> override def beforeAll() &#123;</div><div class="line">   MyLibraryAppServer.main(Array())</div><div class="line"> &#125;</div><div class="line"> override def afterAll() &#123;</div><div class="line">   MyLibraryAppServer.stopApplication()</div><div class="line"> &#125;</div><div class="line"> describe(&quot;Verifying MyLibrary server&quot;) &#123;</div><div class="line">   it(&quot;should be able to respect the contract&quot;)&#123;</div><div class="line">     verifyPact</div><div class="line">       .withPactSource(loadFromLocal(&quot;target/pacts&quot;))</div><div class="line">       .noSetupRequired</div><div class="line">       .runVerificationAgainst(httpInterface, httpPort)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们终于可以通过迁移来添加数据库支持。</p>
<p>首先，我们必须定义我们的实体（或表），在我们的例子中，我们只需要一个：Category</p>
<p>CategoryEntity.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.entity</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import slick.jdbc.H2Profile.api._</div><div class="line">trait CategoryEntity &#123;</div><div class="line"> class Categories(tag: Tag) extends Table[Category](tag, &quot;CATEGORY&quot;) &#123;</div><div class="line">   def name = column[String](&quot;NAME&quot;, O.PrimaryKey)</div><div class="line">   def * = name  &lt;&gt; (Category.apply, Category.unapply)</div><div class="line"> &#125;</div><div class="line"> protected val categories = TableQuery[Categories]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是一个标准的光滑表格定义; 你可以看到这个表只有一列也是主键，它和类的类别有关<code>Table[Category]</code></p>
<p>它可以从Category类中实例化，如定义：def * = name &lt;&gt; (Category.apply, Category.unapply)，确保模型类同时实现了apply和unapply，最简单的方法是定义模型类的<a href="https://docs.scala-lang.org/tour/case-classes.html" target="_blank" rel="external">案例类</a>。</p>
<p>最后一条指令是定义TableQuery对象，该对象对于该表执行任何类型的查询都是必需的。让我们来定义我们的任何数据库交互的主要入口点，我已经实现了它可以被任何类需要数据库访问使用的特征：</p>
<p><strong><em>DatabaseSupport.scala</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.db</div><div class="line">import slick.jdbc.H2Profile</div><div class="line">import slick.jdbc.H2Profile.api._</div><div class="line">trait DatabaseSupport &#123;</div><div class="line"> val db: H2Profile.backend.Database = Database.forConfig(&quot;database&quot;)</div><div class="line"> def closeDB(): Unit = db.close</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们现在可以定义在类别表DAO上操作所必需的图层。我已经在CategoryEntity的相同的文件中创建了它，但是如果您想要使用不同的包，则可以将它移动到不同的文件中：</p>
<p>CategoryEntity.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.entity</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import com.fm.mylibrary.producer.db.DatabaseSupport</div><div class="line">import slick.jdbc.H2Profile.api._</div><div class="line">import scala.concurrent.Future</div><div class="line">trait CategoryEntity &#123;</div><div class="line"> class Categories(tag: Tag) extends Table[Category](tag, &quot;CATEGORY&quot;) &#123;</div><div class="line">   def name = column[String](&quot;NAME&quot;, O.PrimaryKey)</div><div class="line">   def * = name  &lt;&gt; (Category.apply, Category.unapply)</div><div class="line"> &#125;</div><div class="line"> protected val categories = TableQuery[Categories]</div><div class="line">&#125;</div><div class="line">class CategoryDAO extends CategoryEntity with DatabaseSupport &#123;</div><div class="line"> def insertOrUpdate(category: Category): Future[Int] =</div><div class="line">       db.run(categories.insertOrUpdate(category))</div><div class="line"> def findAll(): Future[Seq[Category]] =</div><div class="line">       db.run(categories.result)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>CategoryDAO</code>同时扩展<code>DatabaseSupport</code>和<code>CategoryEntity</code>，首先是要获得分类表查询的对象，第二个是要得到数据库实例用来执行查询。</p>
<p>我只实现了两种方法，对我们的测试来说已经足够了。正如您所看到的，我使用Slick提供的基本方法，并且由于实体<code>Categories</code>和模型<code>Category</code>相互关联，因此DAO可以直接返回模型而不显式转换。您可以在<a href="http://slick.lightbend.com/doc/3.2.1/" target="_blank" rel="external">官方文档中</a>找到更多关于如何在Slick中实现实体和DAO的示例和信息。</p>
<p>如果他们实现库提供的标准查询，我通常不会实现DAO测试，我没有看到测试外部库方法的任何一点，并且它们已经被路由测试覆盖了。但是，如果DAO实现了涉及多个表的复杂查询，我强烈建议对所有可能的案例进行单元测试。</p>
<p>为了现在开始我们的应用程序，需要一个带有分类表的数据库，并且我们可以手动完成，或者让机器为我们完成工作。所以我们可以实现一个数据库迁移，它能够在启动时应用任何必要的数据库更改来执行应用程序。</p>
<p>正如我们为数据库支持所做的那样，我们可以实现一个提供执行迁移功能的特性：</p>
<p><strong><em>DatabaseMigrationSupport.scala</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.db</div><div class="line">import com.fm.mylibrary.producer.Config</div><div class="line">import org.flywaydb.core.Flyway</div><div class="line">trait DatabaseMigrationSupport extends Config &#123;</div><div class="line"> private val flyway = new Flyway()</div><div class="line"> flyway.setDataSource(databaseUrl, databaseUser, databasePassword)</div><div class="line"> def migrateDB(): Unit = &#123;</div><div class="line">   flyway.migrate()</div><div class="line"> &#125;</div><div class="line"> def reloadSchema(): Unit = &#123;</div><div class="line">   flyway.clean()</div><div class="line">   flyway.migrate()</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这暴露了两种方法，一种是增量迁移，一种是重新执行整个迁移。它使用特征来获取数据库连接信息。Config</p>
<p>默认情况下，Flayway会在src/main/resources/db/migration中查找迁移的sql脚本文件，它需要具有特定名称格式的文件：<br><img src="https://upload-images.jianshu.io/upload_images/4340772-42f8fb3597c454a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>从<a href="https://flywaydb.org/documentation/migrations" target="_blank" rel="external">官方迁移文档</a>获取更多信息。</p>
<p>所以，我们的第一个迁移脚本是创建分类表：<br>V1__Create_Category.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE category (</div><div class="line"> name VARCHAR(255) NOT NULL PRIMARY KEY</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>我们可以在服务器启动时执行它：</p>
<p>MyLibraryAppServer.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.app</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.server.directives.DebuggingDirectives</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import com.fm.mylibrary.producer.db.DatabaseMigrationSupport</div><div class="line">import com.fm.mylibrary.producer.&#123;Config, Routes&#125;</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">import scala.util.&#123;Failure, Success&#125;</div><div class="line">object MyLibraryAppServer extends App</div><div class="line">         with Routes</div><div class="line">         with Config</div><div class="line">         with DatabaseMigrationSupport</div><div class="line">         with DebuggingDirectives &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = ActorSystem()</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = actorSystem.dispatcher</div><div class="line"> val log = actorSystem.log</div><div class="line"> def startApplication(): Unit = &#123;</div><div class="line">   migrateDB()</div><div class="line">   Http().bindAndHandle(handler = logRequestResult(&quot;log&quot;)(routes), interface = httpInterface, port = httpPort).onComplete &#123;</div><div class="line">     case Success(b) =&gt; log.info(s&quot;application is up and running at $&#123;b.localAddress.getHostName&#125;:$&#123;b.localAddress.getPort&#125;&quot;)</div><div class="line">     case Failure(e) =&gt; log.error(s&quot;could not start application: &#123;&#125;&quot;, e.getMessage)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> def stopApplication(): Unit = &#123;</div><div class="line">   actorSystem.terminate()</div><div class="line"> &#125;</div><div class="line"> startApplication()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们在HTTP绑定之前添加了DatabaseMigrationSupport和migrateDB()的调用。</p>
<p>最后一件事是将我们的新数据源与业务逻辑关联起来，改变路线以便从DB中检索类别：</p>
<p>Routes.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import akka.http.scaladsl.server.Directives._</div><div class="line">import akka.http.scaladsl.server.Route</div><div class="line">import akka.stream.Materializer</div><div class="line">import com.fm.mylibrary.producer.entity.CategoryDAO</div><div class="line">import scala.concurrent.ExecutionContext</div><div class="line">import spray.json._</div><div class="line">import com.fm.mylibrary.model.JsonProtocol._</div><div class="line">trait Routes &#123;</div><div class="line"> implicit val materializer: Materializer</div><div class="line"> implicit val executionContext: ExecutionContext</div><div class="line"> private val categoryEntityDAO = new CategoryDAO()</div><div class="line"> val searchRoutes: Route = &#123;</div><div class="line">   pathPrefix(&quot;search&quot; / &quot;category&quot;) &#123;</div><div class="line">     get &#123;</div><div class="line">       complete(</div><div class="line">         categoryEntityDAO.findAll()</div><div class="line">             .map(_.toJson)</div><div class="line">       )</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> val routes: Route = searchRoutes</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们刚刚调用dao中的findAll方法替换了静态列表。</p>
<p>你可以看到dao在trait中被实例化，如果逻辑变得更复杂，我建议将它作为必需的参数（隐式或类属性）移动，以便从外部注入它们。在我们现在的情况下，没有必要，因为逻辑非常简单，在测试方面，我们使用的是内存数据库，所以没有必要对它进行模拟。</p>
<p>回到测试路径上，它会失败，因为没有数据，所以我们要添加它们。我们可以很容易地用一种方法的特征来实现，这个特征实现了一个方法，添加了几个类别:<br>MockData.data<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.db</div><div class="line">import com.fm.mylibrary.model.Category</div><div class="line">import com.fm.mylibrary.producer.entity.CategoryDAO</div><div class="line">import scala.concurrent.&#123;Await, ExecutionContext&#125;</div><div class="line">import scala.concurrent.duration.Duration</div><div class="line">trait MockData &#123;</div><div class="line"> implicit val executionContext: ExecutionContext</div><div class="line"> def addMockCategories(): Unit = &#123;</div><div class="line">   val categoryEntityDAO = new CategoryDAO()</div><div class="line">   val setupFuture = for &#123;</div><div class="line">     c1 &lt;- categoryEntityDAO.insertOrUpdate(Category(&quot;Java&quot;))</div><div class="line">     c2 &lt;- categoryEntityDAO.insertOrUpdate(Category(&quot;DevOps&quot;))</div><div class="line">   &#125; yield c1 + c2</div><div class="line">   Await.result(setupFuture, Duration.Inf)</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将它添加进来，以便我们可以使用路由测试和Pact测试轻松验证应用程序：BaseAppServerTestAppMyLibraryAppServer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer.app</div><div class="line">import akka.actor.ActorSystem</div><div class="line">import akka.http.scaladsl.Http</div><div class="line">import akka.http.scaladsl.server.directives.DebuggingDirectives</div><div class="line">import akka.stream.ActorMaterializer</div><div class="line">import com.fm.mylibrary.producer.db.&#123;DatabaseMigrationSupport, MockData&#125;</div><div class="line">import com.fm.mylibrary.producer.&#123;Config, Routes&#125;</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">import scala.util.&#123;Failure, Success&#125;</div><div class="line">object MyLibraryAppServer extends App</div><div class="line">         with Routes</div><div class="line">         with Config</div><div class="line">         with DatabaseMigrationSupport</div><div class="line">         with MockData</div><div class="line">         with DebuggingDirectives &#123;</div><div class="line"> implicit val actorSystem: ActorSystem = ActorSystem()</div><div class="line"> implicit val materializer: ActorMaterializer = ActorMaterializer()</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = actorSystem.dispatcher</div><div class="line"> val log = actorSystem.log</div><div class="line"> def startApplication(): Unit = &#123;</div><div class="line">   migrateDB()</div><div class="line">   addMockCategories()</div><div class="line">   Http().bindAndHandle(handler = logRequestResult(&quot;log&quot;)(routes), interface = httpInterface, port = httpPort).onComplete &#123;</div><div class="line">     case Success(b) =&gt; log.info(s&quot;application is up and running at $&#123;b.localAddress.getHostName&#125;:$&#123;b.localAddress.getPort&#125;&quot;)</div><div class="line">     case Failure(e) =&gt; log.error(s&quot;could not start application: &#123;&#125;&quot;, e.getMessage)</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"> def stopApplication(): Unit = &#123;</div><div class="line">   actorSystem.terminate()</div><div class="line"> &#125;</div><div class="line"> startApplication()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>BaseTestAppServer.scala<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.fm.mylibrary.producer</div><div class="line">import akka.http.scaladsl.testkit.ScalatestRouteTest</div><div class="line">import com.fm.mylibrary.producer.db.&#123;DatabaseMigrationSupport, MockData&#125;</div><div class="line">import org.scalamock.scalatest.MockFactory</div><div class="line">import org.scalatest.&#123;BeforeAndAfterAll, Matchers, WordSpec&#125;</div><div class="line">import scala.concurrent.ExecutionContextExecutor</div><div class="line">class BaseTestAppServer extends WordSpec</div><div class="line">           with ScalatestRouteTest</div><div class="line">           with Matchers</div><div class="line">           with MockFactory</div><div class="line">           with DatabaseMigrationSupport</div><div class="line">           with MockData</div><div class="line">           with Routes</div><div class="line">           with BeforeAndAfterAll &#123;</div><div class="line"> implicit val executionContext: ExecutionContextExecutor = system.dispatcher</div><div class="line"> override def beforeAll(): Unit = &#123;</div><div class="line">   migrateDB()</div><div class="line">   addMockCategories()</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果我们执行所有测试，我们应该没有问题; 你可以用sbt test命令来做到这一点 </p>
<p>如果我们启动服务器，用sbt run命令，并执行GET /search/category，我们应该得到我们的两个类别：<br><img src="https://upload-images.jianshu.io/upload_images/4340772-86aa59ffb1ab4d60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>消费者驱动的契约测试是一项非常棒的技术，可以节省很多时间和与集成测试相关的问题。</p>
<p>所有的实现都是<em>“以</em>契约<em>为中心”的，</em>所以它意味着我们强制首先考虑如何让消费者获得特定的服务，并且我们必须提供特定的服务，然后我们不需要设置基础设施来执行集成测试服务。</p>
<p>另一方面，Scala协议没有很好的文档记录，因此设置复杂测试会很有挑战性，而我发现的唯一方法是浏览它的<a href="https://github.com/ITV/scala-pact/blob/master/scalapact-docs/src/main/paradox/examples/index.md" target="_blank" rel="external">示例</a>和源代码。</p>
<p>我们已经看到了一个非常简单的例子，很少在真实环境中使用，但是希望您可以将它用作下一个微服务的起点。</p>
<h3 id="更多关于CDC和Pact"><a href="#更多关于CDC和Pact" class="headerlink" title="更多关于CDC和Pact"></a>更多关于CDC和Pact</h3><p>我已经向你展示了Pact的最基本用法，对于一个真正的环境来说这可能是不够的，因为有许多团队，每个团队都与许多生产者和消费者进行<em>“并发”</em>工作，其中通信非常重要，以及自动化和用于解决它的工具。</p>
<p>在CDC和Pact的情况下，您必须自动执行契约处理（发布/验证），并将其与CI / CD（持续集成/持续交付）流程相链接，以便在没有相关生产商的情况下客户无法投入生产尊重他们的契约，如果违反了某些契约，任何生产者都不能生产。</p>
<p>所以，我强烈建议您将<a href="https://github.com/pact-foundation/pact_broker" target="_blank" rel="external">Pact</a>的官方文档和介绍人<a href="https://github.com/pact-foundation/pact_broker" target="_blank" rel="external">Pact Broker</a>带入您的CI / CD流程，它是一个提供以下功能的应用程序（来自官方<a href="https://github.com/pact-foundation/pact_broker" target="_blank" rel="external">文档</a>）：</p>
<ul>
<li>通过<a href="http://techblog.realestate.com.au/enter-the-pact-matrix-or-how-to-decouple-the-release-cycles-of-your-microservices/" target="_blank" rel="external">独立部署您的服务</a>并避免集成测试的瓶颈，您可以快速，放心地利用客户价值</li>
<li>解决了如何在消费者和提供者项目之间共享契约验证结果的问题</li>
<li>告诉您可以将应用程序的哪个版本安全地部署在一起，自动地将您的合同版本部署在一起</li>
<li>允许您确保多个消费者版本和提供者版本之间的向后兼容性（例如，在移动或多租户环境中）</li>
<li>提供保证为最新的应用程序的API文档</li>
<li>向您展示您的服务如何互动的真实例子</li>
<li>允许您可视化服务之间的关系</li>
</ul>
<p>您可以随时提出任何问题，如果您需要建议，我将非常乐意提供帮助。</p>
<hr>
<p>原文作者：Marini Fabio<br>原文地址：<a href="https://dzone.com/articles/building-microservices-with-akka-http-a-cdc-approa" target="_blank" rel="external">https://dzone.com/articles/building-microservices-with-akka-http-a-cdc-approa</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;原创声明，禁止转载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建微服务并不容易，特别是当微服务变得越来越多时，而且好多微服务可能由不同的团队提供和维护，这些微服务彼此交互并且变化很快。&lt;/p&gt;
&lt;p&gt;文档、团队交互和测试是获得成功的三大法宝，但是如果用错误的方式进行，它们会产生更多的复杂性，而不是一种优势。&lt;br&gt;
    
    </summary>
    
    
      <category term="原创" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="云计算" scheme="http://yoursite.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="CDC" scheme="http://yoursite.com/tags/CDC/"/>
    
      <category term="Akka" scheme="http://yoursite.com/tags/Akka/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>【面经】2018-阿里6面，终拿offer!</title>
    <link href="http://yoursite.com/2018/05/23/%E3%80%90%E9%9D%A2%E7%BB%8F%E3%80%91%E9%98%BF%E9%87%8C6%E9%9D%A2%EF%BC%8C%E7%BB%88%E6%8B%BFoffer!/"/>
    <id>http://yoursite.com/2018/05/23/【面经】阿里6面，终拿offer!/</id>
    <published>2018-05-23T14:50:33.000Z</published>
    <updated>2018-06-05T15:06:41.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>从3月开始准备，一直到5月22号，终于拿到阿里的实习offer，这一路，真的是一把辛酸泪！下面细说之！<br>在这一路上，坎坎坷坷，跌跌宕宕，期间，面了阿里，腾讯，百度，今日头条，小米，笔试网易，美团，携程，爱奇艺….</p>
</blockquote>
<p>不得不说，阿里是持续周期最长的，从3.28直到5.10，但所幸，也是第一个录取我的公司，也是我最想要的一个结果，在此，先说一句：感谢阿里！</p>
<p>其他的比如百度，腾讯等的面经，等我以后有机会整理，这里我先只说下阿里的6面面经，特分享给大家，以期对诸位有所帮助！<br><a id="more"></a></p>
<p>本文章已授权移至：<a href="https://xiaozhuanlan.com/front-end-interview?rel=ChungKing" target="_blank" rel="external">https://xiaozhuanlan.com/front-end-interview?rel=ChungKing</a><br>欢迎订阅！</p>
<h3 id="阿里一面"><a href="#阿里一面" class="headerlink" title="阿里一面"></a>阿里一面</h3><h3 id="阿里二面"><a href="#阿里二面" class="headerlink" title="阿里二面"></a>阿里二面</h3><h3 id="阿里三面"><a href="#阿里三面" class="headerlink" title="阿里三面"></a>阿里三面</h3><h3 id="阿里四面"><a href="#阿里四面" class="headerlink" title="阿里四面"></a>阿里四面</h3><h3 id="阿里五面"><a href="#阿里五面" class="headerlink" title="阿里五面"></a>阿里五面</h3><h3 id="阿里六面"><a href="#阿里六面" class="headerlink" title="阿里六面"></a>阿里六面</h3><p>越努力，越幸运！大家一起加油！顺便说下我最喜欢的一首诗：“力学如力耕，勤惰尔自如。但使书种多，会有岁稔时。”共勉！！！</p>
<p>好了，以上就是我的面经，欢迎大家讨论，有什么不懂得可以问我，但我不保证我会哈（害羞）！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从3月开始准备，一直到5月22号，终于拿到阿里的实习offer，这一路，真的是一把辛酸泪！下面细说之！&lt;br&gt;在这一路上，坎坎坷坷，跌跌宕宕，期间，面了阿里，腾讯，百度，今日头条，小米，笔试网易，美团，携程，爱奇艺….&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不得不说，阿里是持续周期最长的，从3.28直到5.10，但所幸，也是第一个录取我的公司，也是我最想要的一个结果，在此，先说一句：感谢阿里！&lt;/p&gt;
&lt;p&gt;其他的比如百度，腾讯等的面经，等我以后有机会整理，这里我先只说下阿里的6面面经，特分享给大家，以期对诸位有所帮助！&lt;br&gt;
    
    </summary>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端安全问题</title>
    <link href="http://yoursite.com/2018/03/31/2018-03-31%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/03/31/2018-03-31前端安全问题/</id>
    <published>2018-03-31T09:50:33.000Z</published>
    <updated>2018-04-10T13:22:14.511Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>xss防范</li>
<li>csrf防范</li>
<li>sql注入防范</li>
<li>劫持与https<br>Content-Security-Policy（浏览器自动升级请求）<br>Strict-Transport-Security（配置浏览器和服务器之间安全的通信。它主要是用来防止中间人攻击，因为它强制所有的通信都走TLS）<br>Access-Control-Allow-Origin（这个header是决定哪些网站可以访问资源，通过定义一个通配符来决定是单一的网站还是所有网站可以访问我们的资源）<br>X-Frame-Options（这个header主要用来配置哪些网站可以通过frame来加载资源。它主要是用来防止UI redressing 补偿样式攻击）</li>
</ul>
<a id="more"></a>
<h3 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h3><ul>
<li><p>攻击过程：<br>主要是通过<strong>html标签注入</strong>，篡改网页，插入恶意的脚本，前端可能没有经过严格的校验直接就进到数据库，数据库又通过前端程序又回显到浏览器。<br>攻击者可通过这种方式拿到用户的一些信息，例如<strong>cookie </strong>获取敏感信息，甚至自己建网站，做一些非法的操作等；或者，拿到数据后以用户的身份进行勒索，发一下不好的信息等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">例如一个留言板：</div><div class="line">如果内容是</div><div class="line">    hello!&lt;script type=&quot;type/javascript src=&quot;恶意网址&quot;&gt;&lt;/script&gt;</div><div class="line"> 这样会通过前端代码来执行js脚本，如果这个恶意网址通过cookie获得了用户的私密信息，那么用户的信息就被盗了</div></pre></td></tr></table></figure>
</li>
<li><p>解决方法<br>先前端要对用户输入的信息进行过滤，可以用正则，通过替换标签的方式进行转码或解码<br>例如&lt;&gt; 空格 &amp; ‘’ “”等替换成html编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  htmlEncodeByRegExp:function (str)&#123;  </div><div class="line">       var s = &quot;&quot;;</div><div class="line">       if(str.length == 0) return &quot;&quot;;</div><div class="line">       s = str.replace(/&amp;/g,&quot;&amp;amp;&quot;);</div><div class="line">       s = s.replace(/&lt;/g,&quot;&amp;lt;&quot;);</div><div class="line">       s = s.replace(/&gt;/g,&quot;&amp;gt;&quot;);</div><div class="line">       s = s.replace(/ /g,&quot;&amp;nbsp;&quot;);</div><div class="line">      s = s.replace(/\&apos;/g,&quot;&amp;#39;&quot;);</div><div class="line">      s = s.replace(/\&quot;/g,&quot;&amp;quot;&quot;);</div><div class="line">      return s;  </div><div class="line"> &#125;,</div><div class="line">    </div><div class="line">其次在java后端还要进行安全防御，具体可以看一下这个http://blog.csdn.net/qq_34120041/article/details/76890092</div></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/xiaoheimiaoer/p/4676763.html" target="_blank" rel="external"><em>XSS</em>初体验-存储型XSS DOM XSS 突变XSS 反射型XSS</a></p>
</li>
</ul>
<h3 id="CSRF攻击-cross-site-request-forgery-跨站请求伪造"><a href="#CSRF攻击-cross-site-request-forgery-跨站请求伪造" class="headerlink" title="CSRF攻击(cross site request forgery,跨站请求伪造)"></a>CSRF攻击(cross site request forgery,跨站请求伪造)</h3><p>CSRF,即(Cross-site request forgery), 中文名为跨站请求伪造。是一种挟持用户在当前已登录的Web应用程序上执行非本意的操作的一种攻击方式。<strong>CSRF攻击的本质在于利用用户的身份，执行非本意的操作</strong>。根据CSRF的全名，可以得出的结论是：CSRF的请求是<strong>跨域且伪造</strong>的。</p>
<p>csrf攻击形式：攻击者<strong>盗用用户的身份信息，并以用户的名义进行发送恶意的请求</strong>等，例如发邮件，盗取账号等非法手段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">例如：你登录网站，并在本地种下了cookie</div><div class="line">     如果在没退出该网站的时候 不小心访问了恶意网站，而且这个网站需要你发一些请求等</div><div class="line">     此时，你是携带cookie进行访问的，那么你的存在cookie里的信息就会被恶意网站捕捉到，那么你的信息就被盗用</div></pre></td></tr></table></figure></p>
<h4 id="攻击防御："><a href="#攻击防御：" class="headerlink" title="攻击防御："></a>攻击防御：</h4><p>1、验证HTTP Referer字段</p>
<blockquote>
<p>在HTTP头中有Referer字段，他记录该HTTP请求的来源地址，如果跳转的网站与来源地址相符，那就是合法的，如果不符则可能是csrf攻击，拒绝该请求</p>
</blockquote>
<p>2、在请求地址中添加token并验证</p>
<blockquote>
<p>这种的话在请求的时候加一个token，值可以是随机产生的一段数字，<br>token是存入数据库之后，后台返给客户端的，如果客户端再次登录的时候，<br>后台发现token没有，或者通过查询数据库不正确，那么就拒绝该请求</p>
</blockquote>
<p>如果想防止一个账号避免在不同的机器上登录，那么我们就可以通过token来判断，<br>如果a机器登录后，我们就将用户的token从数据库清除，从新生成，<br>那么另外一台b机器在执行操作的时候，token就失效了，只能重新登录，这样就可以防止两台机器登同一账号<br>具体方案如下：</p>
<blockquote>
<ol>
<li>服务端在收到客户端请求时，生成一个随机数，在渲染页面时将随机数埋入页面(一般埋入form表单中)，<input type="hidden" name="_csrf_token" value="xxxx">）`的形式。每次刷新页面后这个随机数都会改变，并在服务器中存储。</li>
<li>服务端设置Set-Cookie, 把该随机数作为cookie种入用户浏览器。</li>
<li>当用户发送GET或POST请求时带上_csrf_token参数（对于form表单直接提交即可）</li>
<li>后台在接受到请求后解析请求头中的cookie字段，获取_csrf_token的值，然后和用户请求提交的_csrf_token值做比较。如果相等则表示请求来源是合法的。</li>
</ol>
</blockquote>
<p>3、在HTTP头中自定义属性并验证</p>
<blockquote>
<p>如果说通过每次请求的时候都得加token那么各个接口都得加很麻烦，<br>那么我们通过http的请求头来设置token<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    url: &apos;/v1/api&apos;,</div><div class="line">    dataType: &apos;json&apos;,</div><div class="line">    data: param,</div><div class="line">    type:&apos;post&apos;,</div><div class="line">    headers: &#123;&apos;Accept&apos;:&apos;application/json&apos;,&apos;Authorization&apos;:tokenValue&#125;</div><div class="line">    success:function(res)&#123;</div><div class="line">        console.log(res)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
</blockquote>
<p>总结：因为CSRF攻击利用的是冲着浏览器分不清发起请求是不是真正的用户本人，所以防范的关键在于在请求中放入黑客所不能伪造的信息。从而防止黑客伪造一个完整的请求欺骗服务器。</p>
<p><a href="http://www.cnblogs.com/unclekeith/p/7788057.html" target="_blank" rel="external">unclekeith: 前端安全之CSRF攻击-get csrf,post csrf</a></p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令<br>有一个Login画面，在这个Login画面上有两个文本框分别用来输入用户名和密码，当用户点了登录按钮的时候，会对输入的用户名和密码进行验证。验证的SQL语句如下：<br>select * from student where username=’输入的用户名’ and password=’输入的密码’<br>如果能够检索到数据，说明验证通过，否则验证不通过。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">如果用户在用户名文本框中输入** ‘ or ‘1’ = ‘1’ or ‘1’ = ‘1，**则验证的SQL语句变成：</div><div class="line"></div><div class="line">select * from student **where username=” or ‘1’ = ‘1’ or ‘1’ = ‘1’ and password=”**</div><div class="line"></div><div class="line">如果用户在密码文本框中输入 1′ or ‘1’ = ‘1，则验证的SQL语句变成：</div><div class="line"></div><div class="line">select * from student where username=” and password=’1’ or ‘1’=’1′</div><div class="line"></div><div class="line">以上两个**SQL语句的where条件永远是成立的，所以验证永远是有效的。**</div></pre></td></tr></table></figure></p>
<h4 id="攻击防御：-1"><a href="#攻击防御：-1" class="headerlink" title="攻击防御："></a>攻击防御：</h4><p>1.URL地址防注入：//过滤URL非法SQL字符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//过滤URL非法SQL字符</div><div class="line">var sUrl=location.search.toLowerCase();</div><div class="line">var sQuery=sUrl.substring(sUrl.indexOf(&quot;=&quot;)+1);</div><div class="line">re=/select|update|delete|truncate|join|union|exec|insert|drop|count|&apos;|&quot;|;|&gt;|&lt;|%/i;</div><div class="line">if(re.test(sQuery))</div><div class="line">&#123;</div><div class="line">alert(&quot;请勿输入非法字符&quot;);</div><div class="line">location.href=sUrl.replace(sQuery,&quot;&quot;);</div></pre></td></tr></table></figure>
<p>2.输入文本框防注入：<br>/防止SQL注入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">function AntiSqlValid(oField )</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">re= /``select``|``update``|``delete``|``exec``|``count``|&apos;|``&quot;|=|;|&gt;|&lt;|%/i;</div><div class="line"></div><div class="line">if ( re.test(oField.value) )</div><div class="line"></div><div class="line">&#123;</div><div class="line">//alert(&quot;``请您不要在参数中输入特殊字符和SQL关键字！``&quot;); //注意中文乱码</div><div class="line"></div><div class="line">oField.value = &quot;``;</div><div class="line"></div><div class="line">oField.className=``&quot;errInfo&quot;``;</div><div class="line"></div><div class="line">oField.focus();</div><div class="line"></div><div class="line">return` `false``;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　在需要防注入的输入文本框添加如下方法</p>
<h2 id="txtName-Attributes-Add-quot-onblur-quot-quot-AntiSqlValid-this-quot-防止Sql脚本注入"><a href="#txtName-Attributes-Add-quot-onblur-quot-quot-AntiSqlValid-this-quot-防止Sql脚本注入" class="headerlink" title="txtName.Attributes.``Add``(``&quot;onblur&quot;``, &quot;AntiSqlValid(this)&quot;``);//防止Sql脚本注入"></a><code>txtName.Attributes.``Add``(``&quot;onblur&quot;``,</code> <code>&quot;AntiSqlValid(this)&quot;``);//防止Sql脚本注入</code></h2><h3 id="请求劫持与HTTPS"><a href="#请求劫持与HTTPS" class="headerlink" title="请求劫持与HTTPS"></a>请求劫持与HTTPS</h3><p>请求劫持现在主要分为两种，DNS劫持与HTTP劫持：</p>
<ul>
<li>DNS劫持：<blockquote>
<p>DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。   <br>DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。 再说简单点，当你输入google.com这个网址的时候，你看到的网站却是百度的首页。</p>
</blockquote>
</li>
<li>http劫持：<blockquote>
<p>在用户的客户端与其要访问的服务器经过网络协议协调后，二者之间建立了一条专用的数据通道，用户端程序在系统中开放指定网络端口用于接收数据报文，服务器端将全部数据按指定网络协议规则进行分解打包，形成连续数据报文。   <br>用户端接收到全部报文后，按照协议标准来解包组合获得完整的网络数据。其中传输过程中的每一个数据包都有特定的标签，表示其来源、携带的数据属性以及要到何处，所有的数据包经过网络路径中ISP的路由器传输接力后，最终到达目的地，也就是客户端。   <br><strong>HTTP劫持是在使用者与其目的网络服务所建立的专用数据通道中，监视特定数据信息，提示当满足设定的条件时，就会在正常的数据流中插入精心设计的网络数据报文，目的是让用户端程序解释“错误”的数据，</strong>并以弹出新窗口的形式在使用者界面展示宣传性广告或者直接显示某网站的内容。列入本地的fiddler为一种劫持</p>
</blockquote>
</li>
</ul>
<p><strong>请求劫持唯一可行的预防方法就是尽量使用HTTPS协议访问。</strong><br>HTTPS协议：<a href="https://juejin.im/entry/58d7635e5c497d0057fae036" target="_blank" rel="external">https://juejin.im/entry/58d7635e5c497d0057fae036</a></p>
<h4 id="公钥和私钥"><a href="#公钥和私钥" class="headerlink" title="公钥和私钥"></a>公钥和私钥</h4><p>什么是https，这里不再解释了，简单理解就是通过SSL（Secure Sockets Layer）层来加密http数据来进行安全传输。 那使用HTTPS是怎样进行加解密和安全数据传输的？</p>
<p><strong>先看个有意思的问题：</strong></p>
<p>  A、B两个人分别在两个岛上，并且分别有一个箱子，一把锁，和打开这把锁的钥匙（A的钥匙打不开B手上的锁，B的钥匙也打不开A的锁）。此时A要跟B互通情报，此时需要借助C的船运输，C是一个不可靠的人，如果A直接把情报送给B或把情报放在箱子里给B，都可能会被C偷走；如果A把情报锁在箱子里，B没有打开A锁的钥匙无法获得情报内容。请问有什么办法可以尽可能快的让A和B互通情报。</p>
<p>  这就是公钥和私钥的问题了，答案比较简单，也对应了公钥和私钥在https中的应用过程。</p>
<p>  公钥（Public Key）与私钥（Private Key）是通过一种算法得到的一个密钥对（即一个公钥和一个私钥），公钥是密钥对中公开的部分，私钥则是非公开的部分。公钥通常用于加密会话密钥、验证数字签名，或加密可以用相应的私钥解密的数据。通过这种算法得到的密钥对能保证在世界范围内是唯一的。使用这个密钥对的时候，如果用其中一个密钥加密一段数据，必须用另一个密钥解密。比如用公钥加密数据就必须用私钥解密，如果用私钥加密也必须用公钥解密，否则解密将不会成功。—<a href="http://baike.baidu.com/link?url=RlMLbClmwYxXJsNwQTL4w6RhQG7tcdTbqw6tJRKGAKf1oNkHwPVGq18LDFppQFO9yI-HJJhTvcagSt6PmB8sS_" target="_blank" rel="external">百度百科</a></p>
<h4 id="Https的通信过程"><a href="#Https的通信过程" class="headerlink" title="Https的通信过程"></a>Https的通信过程</h4><p>整个通信过程如下图，以公钥加密方式为例：<br><img src="https://upload-images.jianshu.io/upload_images/4340772-c57accd0ca3225ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>1、客户端发送https请求，告诉服务器发将建立https连接<br>2、服务器将服务端生成的公钥返回给客户端，如果是第一次请求将告诉客户端需要验证链接<br>3、客户端接收到请求后’client finished’报文串通过获取到的服务器公钥加密发送给服务器，并将客户端生成的公钥也发送给服务器<br>4、服务器获取到加密的报文和客户端公钥，先使用服务器私钥解密报文，然后将报文通过客户端的公钥加密返回给客户端。<br>5、客户端通过私钥解密报文，判断是否为自己开始发送的报文串；如果正确，说明安全连接验证成功，将数据通过服务器公钥加密不断发送给服务器，服务器也不断解密获取报文，并通过客户端公钥加密返回给客户端验证。这样就建立了不断通信的连接。</p>
<h4 id="Https协议头解析"><a href="#Https协议头解析" class="headerlink" title="Https协议头解析"></a>Https协议头解析</h4><p>以打开 <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 的过程为例，请求通用头部如下</p>
<p><code>Request URL:https://github.com/ouvens\n Request Method:GET Status Code:200 OK (from cache) Remote Address:192.30.252.131:443 Response Headers</code><br>先看下请求头的字段</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-3aa9566211db7e88?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>再截取部分返回头的字段</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4340772-8c5d58cd021976ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>需要注意的upgrade-insecure-requests</strong></p>
<p>https正常升级后chrome浏览器会出现下面的警告</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-9ccfee5884e7c34c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>考虑到这个问题，w3c在2015年4月份出了一个 Upgrade Insecure Requests 的草案，他的作用就是让浏览器自动升级请求。在服务器的响应头中加入：</p>
<p>header(“Content-Security-Policy: upgrade-insecure-requests”);</p>
<p>###浏览器中web安全控制<br>http层面上浏览器设置的安全性控制较多，这里列几个典型的来看看：<br><img src="https://upload-images.jianshu.io/upload_images/4340772-734047169dec74e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li><ol>
<li>X-XSS-Protection<br>这个header主要是用来防止浏览器中的反射性xss。现在，只有IE，chrome和safari（webkit）支持这个header。<br>正确的设置:<br><code>X-XSS-Protection:1; mode=block 0 – 关闭对浏览器的xss防护 1 – 开启xss防护 1; mode=block – 开启xss防护并通知浏览器阻止而不是过滤用户注入的脚本。 1; report=http://site.com/report – 这个只有chrome和webkit内核的浏览器支持，这种模式告诉浏览器当发现疑似xss攻击的时候就将这部分数据post到指定地址。 通常不正确的设置</code></li>
</ol>
</li>
<li><p>2.X-Content-Type-Options<br>&ems; 这个header主要用来防止在IE9、chrome和safari中的MIME类型混淆攻击。firefox目前对此还存在争议。通常浏览器可以通过嗅探内容本身的方法来决定它是什么类型，而不是看响应中的content-type值。通过设置 X-Content-Type-Options：如果content-type和期望的类型匹配，则不需要嗅探，只能从外部加载确定类型的资源。举个例子，如果加载了一个样式表，那么资源的MIME类型只能是text/css，对于IE中的脚本资源，以下的内容类型是有效的：<br><code>application/ecmascript application/javascript application/x-javascript text/ecmascript text/javascript text/jscript text/x-javascript text/vbs text/vbscript</code><br>对于chrome，则支持下面的MIME 类型：<br><code>text/javascript text/ecmascript application/javascript application/ecmascript application/x-javascript text/javascript1.1 text/javascript1.2 text/javascript1.3 text/jscript text/live script</code><br>nosniff – 这个是唯一正确的设置，必须这样。</p>
</li>
<li><ol>
<li>Strict-Transport-Security<br>Strict Transport Security (STS) 是用来配置浏览器和服务器之间安全的通信。它主要是用来防止中间人攻击，因为它强制所有的通信都走TLS。目前IE还不支持 STS头。需要注意的是，在普通的http请求中配置STS是没有作用的，因为攻击者很容易就能更改这些值。为了防止这样的现象发生，很多浏览器内置了一个配置了STS的站点list。<br>正确的设置 : 注意下面的值必须在https中才有效，如果是在http中配置会没有效果。<br><code>max-age=31536000 – 告诉浏览器将域名缓存到STS list里面，时间是一年。 max-age=31536000; includeSubDomains – 告诉浏览器将域名缓存到STS list里面并且包含所有的子域名，时间是一年。 max-age=0 – 告诉浏览器移除在STS缓存里的域名，或者不保存此域名。 通常不正确的设置</code><br>判断一个主机是否在你的STS缓存中，chrome可以通过访问chrome://net-internals/#hsts，首先，通过域名请求选项来确认此域名是否在你的STS缓存中。然后，通过https访问这个网站，尝试再次请求返回的STS头，来决定是否添加正确。</li>
</ol>
</li>
<li><p>4.Content-Security-Policy<br>CSP是一种由开发者定义的安全性政策性申明，通过CSP所约束的的规责指定可信的内容来源（这里的内容可以指脚本、图片、iframe、fton、style等等可能的远程的资源）。通过CSP协定，让WEB能够加载指定安全域名下的资源文件，保证运行时处于一个安全的运行环境中。<br>正确配置：<br><code>Content-Security-Policy:default-src *; base-uri &#39;self&#39;; block-all-mixed-content; child-src &#39;self&#39; render.githubusercontent.com; connect-src &#39;self&#39; uploads.github.com status.github.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action &#39;self&#39; github.com gist.github.com; frame-src &#39;self&#39; render.githubusercontent.com; img-src &#39;self&#39; data: assets-cdn.github.com identicons.github.com www.google-analytics.com collector.githubapp.com *.gravatar.com *.wp.com *.githubusercontent.com; media-src &#39;none&#39;; object-src assets-cdn.github.com; plugin-types application/x-shockwave-flash; script-src assets-cdn.github.com; style-src &#39;self&#39; &#39;unsafe-inline&#39; assets-cdn.github.com</code></p>
</li>
<li><p>5.X-Frame-Options<br>这个header主要用来配置哪些网站可以通过frame来加载资源。它主要是用来防止UI redressing 补偿样式攻击。IE8和firefox 18以后的版本都开始支持ALLOW-FROM。chrome和safari都不支持ALLOW-FROM，但是WebKit已经在研究这个了。<br>正确的设置<br><code>X-Frame-Options: deny deny – 禁止所有的资源（本地或远程）试图通过frame来加载其他也支持X-Frame-Options 的资源。 sameorigion – 只允许遵守同源策略的资源（和站点同源）通过frame加载那些受保护的资源。 allow-from http://www.example.com – 允许指定的资源（必须带上协议http或者https）通过frame来加载受保护的资源。这个配置只在IE和firefox下面有效。其他浏览器则默认允许任何源的资源（在X-Frame-Options没设置的情况下）。</code></p>
</li>
<li>6.Access-Control-Allow-Origin<br>Access-Control-Allow-Origin是从Cross Origin Resource Sharing (CORS)中分离出来的。这个header是决定哪些网站可以访问资源，通过定义一个通配符来决定是单一的网站还是所有网站可以访问我们的资源。需要注意的是，如果定义了通配符，那么 Access-Control-Allow-Credentials选项就无效了，而且user-agent的cookies不会在请求里发送。<br>正确的设置<br><code>Access-Control-Allow-Origin : * *– 通配符允许任何远程资源来访问含有Access-Control-Allow-Origin 的内容。 http://www.example.com – 只允许特定站点才能访问(http://[host], 或者 https://[host])</code></li>
<li>7.Public-Key-Pins</li>
</ul>
<p>  公钥固定（Public Key Pinning）是指一个证书链中必须包含一个白名单中的公钥，也就是说只有被列入白名单的证书签发机构（CA）才能为某个域名*.example.com签发证书，而不是你的浏览器中所存储的任何 CA 都可以为之签发。可以理解为https的证书域名白名单。   Public-Key-Pins (PKP)的目的主要是允许网站经营者提供一个哈希过的公共密钥存储在用户的浏览器缓存里。跟Strict-Transport-Security功能相似的是，它能保护用户免遭中间人攻击。这个header可能包含多层的哈希运算，比如pin-sha256=base64(sha256(SPKI))，具体是先将 X.509 证书下的Subject Public Key Info (SPKI) 做sha256哈希运算，然后再做base64编码。然而，这些规定有可能更改，例如有人指出，在引号中封装哈希是无效的，而且在33版本的chrome中也不会保存pkp的哈希到缓存中。</p>
<p>  这个header和 STS的作用很像，因为它规定了最大子域名的数量。此外，pkp还提供了一个Public-Key-Pins-Report-Only 头用来报告异常，但是不会强制阻塞证书信息。当然，这些chrome都是不支持的。</p>
<p><strong>请求头说明参考：</strong></p>
<p><a href="https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/" target="_blank" rel="external">https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结下web的安全策略，主要介绍了<br>xss防范<br>csrf防范<br>sql注入防范<br>劫持与https<br>Content-Security-Policy（浏览器自动升级请求）<br>Strict-Transport-Security（配置浏览器和服务器之间安全的通信。它主要是用来防止中间人攻击，因为它强制所有的通信都走TLS）<br>Access-Control-Allow-Origin（这个header是决定哪些网站可以访问资源，通过定义一个通配符来决定是单一的网站还是所有网站可以访问我们的资源）<br>X-Frame-Options（这个header主要用来配置哪些网站可以通过frame来加载资源。它主要是用来防止UI redressing 补偿样式攻击）</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;xss防范&lt;/li&gt;
&lt;li&gt;csrf防范&lt;/li&gt;
&lt;li&gt;sql注入防范&lt;/li&gt;
&lt;li&gt;劫持与https&lt;br&gt;Content-Security-Policy（浏览器自动升级请求）&lt;br&gt;Strict-Transport-Security（配置浏览器和服务器之间安全的通信。它主要是用来防止中间人攻击，因为它强制所有的通信都走TLS）&lt;br&gt;Access-Control-Allow-Origin（这个header是决定哪些网站可以访问资源，通过定义一个通配符来决定是单一的网站还是所有网站可以访问我们的资源）&lt;br&gt;X-Frame-Options（这个header主要用来配置哪些网站可以通过frame来加载资源。它主要是用来防止UI redressing 补偿样式攻击）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="安全" scheme="http://yoursite.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于eslint使用规则，和各种报错对应规则</title>
    <link href="http://yoursite.com/2018/01/22/%E5%85%B3%E4%BA%8Eeslint%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99%EF%BC%8C%E5%92%8C%E5%90%84%E7%A7%8D%E6%8A%A5%E9%94%99%E5%AF%B9%E5%BA%94%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2018/01/22/关于eslint使用规则，和各种报错对应规则/</id>
    <published>2018-01-22T09:50:33.000Z</published>
    <updated>2018-03-18T14:52:59.711Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-bea77f051e95f2be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Eslint"></p>
<blockquote>
<p>在用vue2.0写项目时，由于vue-cli脚 架自动带了带了代码规范监测，稍微不小心就会出现一些Warning,这时就需要，根据自己习惯的代码规范，用一下代码进行对Eslint规范的一些忽略。下面详细介绍一下：<br><a id="more"></a><br>ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。<br><strong>ESLint 主要有以下特点：</strong></p>
<ul>
<li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li>
<li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li>
<li>包含代码风格检测的规则（可以丢掉 JSCS 了）；</li>
<li>支持插件扩展、自定义规则。</li>
</ul>
</blockquote>
<p>下面说一下如何配置：<br><strong>比如，我写vue过程中，出现了下面的warning:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WARNING Compiled with 1 warnings11:26:30http://eslint.org/docs/rules/quotes </div><div class="line">Strings must use singlequote</div></pre></td></tr></table></figure></p>
<p>警告的意思就是<strong>字符串必须用单引号</strong><br>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-eb128a705f102481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这时候，你就可以在<strong>.eslintrc.js</strong>配置你的规则rule<br><code>&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &#39;&#39;</code></p>
<p>Use /<em> eslint-disable </em>/ to ignore all warnings in a file.<br>还有一种万能方法，就是在报错的JS文件中第一行写上<br><code>/* eslint-disable */</code></p>
<p>如下图<br><img src="http://upload-images.jianshu.io/upload_images/4340772-355bb877b7ed0ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">这样就可以和Eslint携手并进了</p>
<p><strong>配置（我主要用第三种方法,为了方便查看，特记录如下：）</strong><br>可以通过以下三种方式配置 ESLint:</p>
<ul>
<li><ol>
<li>使用 .eslintrc 文件（支持 JSON 和 YAML 两种语法）；</li>
</ol>
</li>
<li><ol>
<li>在 package.json 中添加 eslintConfig 配置块；直接在代码文件中定义。</li>
</ol>
</li>
<li><ol>
<li>以下是<strong>.eslintrc</strong> 文件示例和解释：<strong>为了方便查看，特记录如下,需要用的规则，到时候直接搜索就可以了，简直开心极了：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">  &quot;env&quot;: &#123;  </div><div class="line">    &quot;browser&quot;: true,  </div><div class="line">    &quot;node&quot;: true,  </div><div class="line">    &quot;commonjs&quot;: true  </div><div class="line">  &#125;,  </div><div class="line">  &quot;ecmaFeatures&quot;: &#123;  </div><div class="line">    // lambda表达式  </div><div class="line">    &quot;arrowFunctions&quot;: true,  </div><div class="line">    // 解构赋值  </div><div class="line">    &quot;destructuring&quot;: true,  </div><div class="line">    // class  </div><div class="line">    &quot;classes&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/function#函数参数的默认值  </div><div class="line">    &quot;defaultParams&quot;: true,  </div><div class="line">    // 块级作用域，允许使用let const  </div><div class="line">    &quot;blockBindings&quot;: true,  </div><div class="line">    // 允许使用模块，模块内默认严格模式  </div><div class="line">    &quot;modules&quot;: true,  </div><div class="line">    // 允许字面量定义对象时，用表达式做属性名  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/object#属性名表达式  </div><div class="line">    &quot;objectLiteralComputedProperties&quot;: true,  </div><div class="line">    // 允许对象字面量方法名简写  </div><div class="line">    /*var o = &#123; </div><div class="line">        method() &#123; </div><div class="line">          return &quot;Hello!&quot;; </div><div class="line">        &#125; </div><div class="line">     &#125;; </div><div class="line"> </div><div class="line">     等同于 </div><div class="line"> </div><div class="line">     var o = &#123; </div><div class="line">       method: function() &#123; </div><div class="line">         return &quot;Hello!&quot;; </div><div class="line">       &#125; </div><div class="line">     &#125;; </div><div class="line">    */  </div><div class="line">    &quot;objectLiteralShorthandMethods&quot;: true,  </div><div class="line">    /* </div><div class="line">      对象字面量属性名简写 </div><div class="line">      var foo = &apos;bar&apos;; </div><div class="line">      var baz = &#123;foo&#125;; </div><div class="line">      baz // &#123;foo: &quot;bar&quot;&#125; </div><div class="line"> </div><div class="line">      // 等同于 </div><div class="line">      var baz = &#123;foo: foo&#125;; </div><div class="line">    */  </div><div class="line">    &quot;objectLiteralShorthandProperties&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/function#rest参数  </div><div class="line">    &quot;restParams&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/function#扩展运算符  </div><div class="line">    &quot;spread&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/iterator#for---of循环  </div><div class="line">    &quot;forOf&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/generator  </div><div class="line">    &quot;generators&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/string#模板字符串  </div><div class="line">    &quot;templateStrings&quot;: true,  </div><div class="line">    &quot;superInFunctions&quot;: true,  </div><div class="line">    // http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符  </div><div class="line">    &quot;experimentalObjectRestSpread&quot;: true  </div><div class="line">  &#125;,  </div><div class="line">  </div><div class="line">  &quot;rules&quot;: &#123;  </div><div class="line">    // 定义对象的set存取器属性时，强制定义get  </div><div class="line">    &quot;accessor-pairs&quot;: 2,  </div><div class="line">    // 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格  </div><div class="line">    &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],  </div><div class="line">    // 在块级作用域外访问块内定义的变量是否报错提示  </div><div class="line">    &quot;block-scoped-var&quot;: 0,  </div><div class="line">    // if while function 后面的&#123;必须与if在同一行，java风格。  </div><div class="line">    &quot;brace-style&quot;: [2, &quot;1tbs&quot;, &#123; &quot;allowSingleLine&quot;: true &#125;],  </div><div class="line">    // 双峰驼命名格式  </div><div class="line">    &quot;camelcase&quot;: 2,  </div><div class="line">    // 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，  </div><div class="line">    // always-multiline：多行模式必须带逗号，单行模式不能带逗号  </div><div class="line">    &quot;comma-dangle&quot;: [2, &quot;never&quot;],  </div><div class="line">    // 控制逗号前后的空格  </div><div class="line">    &quot;comma-spacing&quot;: [2, &#123; &quot;before&quot;: false, &quot;after&quot;: true &#125;],  </div><div class="line">    // 控制逗号在行尾出现还是在行首出现  </div><div class="line">    // http://eslint.org/docs/rules/comma-style  </div><div class="line">    &quot;comma-style&quot;: [2, &quot;last&quot;],  </div><div class="line">    // 圈复杂度  </div><div class="line">    &quot;complexity&quot;: [2,9],  </div><div class="line">    // 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always  </div><div class="line">    &quot;computed-property-spacing&quot;: [2,&quot;never&quot;],  </div><div class="line">    // 强制方法必须返回值，TypeScript强类型，不配置  </div><div class="line">    &quot;consistent-return&quot;: 0,  </div><div class="line">    // 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了  </div><div class="line">    // e.g [0,&quot;that&quot;] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值  </div><div class="line">    &quot;consistent-this&quot;: 0,  </div><div class="line">    // 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示  </div><div class="line">    &quot;constructor-super&quot;: 0,  </div><div class="line">    // if else while for do后面的代码块是否需要&#123; &#125;包围，参数：  </div><div class="line">    //    multi  只有块中有多行语句时才需要&#123; &#125;包围  </div><div class="line">    //    multi-line  只有块中有多行语句时才需要&#123; &#125;包围, 但是块中的执行语句只有一行时，  </div><div class="line">    //                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();  </div><div class="line">    //    multi-or-nest 只有块中有多行语句时才需要&#123; &#125;包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面  </div><div class="line">    //    [2, &quot;multi&quot;, &quot;consistent&quot;] 保持前后语句的&#123; &#125;一致  </div><div class="line">    //    default: [2, &quot;all&quot;] 全都需要&#123; &#125;包围  </div><div class="line">    &quot;curly&quot;: [2, &quot;all&quot;],  </div><div class="line">    // switch语句强制default分支，也可添加 // no default 注释取消此次警告  </div><div class="line">    &quot;default-case&quot;: 2,  </div><div class="line">    // 强制object.key 中 . 的位置，参数:  </div><div class="line">    //      property，&apos;.&apos;号应与属性在同一行  </div><div class="line">    //      object, &apos;.&apos; 号应与对象名在同一行  </div><div class="line">    &quot;dot-location&quot;: [2, &quot;property&quot;],  </div><div class="line">    // 强制使用.号取属性  </div><div class="line">    //    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性  </div><div class="line">    //                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;&quot;allowKeywords&quot;: false&#125;]  </div><div class="line">    //           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;&quot;allowPattern&quot;: &quot;^[a-z]+(_[a-z]+)+$&quot;&#125;]  </div><div class="line">    &quot;dot-notation&quot;: [2, &#123;&quot;allowKeywords&quot;: true&#125;],  </div><div class="line">    // 文件末尾强制换行  </div><div class="line">    &quot;eol-last&quot;: 2,  </div><div class="line">    // 使用 === 替代 ==  </div><div class="line">    &quot;eqeqeq&quot;: [2, &quot;allow-null&quot;],  </div><div class="line">    // 方法表达式是否需要命名  </div><div class="line">    &quot;func-names&quot;: 0,  </div><div class="line">    // 方法定义风格，参数：  </div><div class="line">    //    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, &quot;declaration&quot;]  </div><div class="line">    //    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, &quot;expression&quot;]  </div><div class="line">    //    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, &quot;declaration&quot;, &#123; &quot;allowArrowFunctions&quot;: true &#125;]  </div><div class="line">    &quot;func-style&quot;: 0,  </div><div class="line">&quot;no-alert&quot;: 0,//禁止使用alert confirm prompt</div><div class="line">&quot;no-array-constructor&quot;: 2,//禁止使用数组构造器</div><div class="line">&quot;no-bitwise&quot;: 0,//禁止使用按位运算符</div><div class="line">&quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee</div><div class="line">&quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名</div><div class="line">&quot;no-class-assign&quot;: 2,//禁止给类赋值</div><div class="line">&quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句</div><div class="line">&quot;no-console&quot;: 2,//禁止使用console</div><div class="line">&quot;no-const-assign&quot;: 2,//禁止修改const声明的变量</div><div class="line">&quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1)</div><div class="line">&quot;no-continue&quot;: 0,//禁止使用continue</div><div class="line">&quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符</div><div class="line">&quot;no-debugger&quot;: 2,//禁止使用debugger</div><div class="line">&quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符</div><div class="line">&quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/</div><div class="line">&quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</div><div class="line">&quot;no-dupe-args&quot;: 2,//函数参数不能重复</div><div class="line">&quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复</div><div class="line">&quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句</div><div class="line">&quot;no-empty&quot;: 2,//块语句中的内容不能为空</div><div class="line">&quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空</div><div class="line">&quot;no-empty-label&quot;: 2,//禁止使用空label</div><div class="line">&quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符</div><div class="line">&quot;no-eval&quot;: 1,//禁止使用eval</div><div class="line">&quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值</div><div class="line">&quot;no-extend-native&quot;: 2,//禁止扩展native对象</div><div class="line">&quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定</div><div class="line">&quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换</div><div class="line">&quot;no-extra-parens&quot;: 2,//禁止非必要的括号</div><div class="line">&quot;no-extra-semi&quot;: 2,//禁止多余的冒号</div><div class="line">&quot;no-fallthrough&quot;: 1,//禁止switch穿透</div><div class="line">&quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3.</div><div class="line">&quot;no-func-assign&quot;: 2,//禁止重复的函数声明</div><div class="line">&quot;no-implicit-coercion&quot;: 1,//禁止隐式转换</div><div class="line">&quot;no-implied-eval&quot;: 2,//禁止使用隐式eval</div><div class="line">&quot;no-inline-comments&quot;: 0,//禁止行内备注</div><div class="line">&quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数）</div><div class="line">&quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式</div><div class="line">&quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量</div><div class="line">&quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格</div><div class="line">&quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性</div><div class="line">&quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同</div><div class="line">&quot;no-labels&quot;: 2,//禁止标签声明</div><div class="line">&quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块</div><div class="line">&quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句</div><div class="line">&quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</div><div class="line">&quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型</div><div class="line">&quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格</div><div class="line">&quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格</div><div class="line">&quot;no-multi-spaces&quot;: 1,//不能用多余的空格</div><div class="line">&quot;no-multi-str&quot;: 2,//字符串不能用\换行</div><div class="line">&quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],//空行最多不能超过2行</div><div class="line">&quot;no-native-reassign&quot;: 2,//不能重写native对象</div><div class="line">&quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有!</div><div class="line">&quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算</div><div class="line">&quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值</div><div class="line">&quot;no-new-func&quot;: 1,//禁止使用new Function</div><div class="line">&quot;no-new-object&quot;: 2,//禁止使用new Object()</div><div class="line">&quot;no-new-require&quot;: 2,//禁止使用new require</div><div class="line">&quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number</div><div class="line">&quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON()</div><div class="line">&quot;no-octal&quot;: 2,//禁止使用八进制数字</div><div class="line">&quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列</div><div class="line">&quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值</div><div class="line">&quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接</div><div class="line">&quot;no-plusplus&quot;: 0,//禁止使用++，--</div><div class="line">&quot;no-process-env&quot;: 0,//禁止使用process.env</div><div class="line">&quot;no-process-exit&quot;: 0,//禁止使用process.exit()</div><div class="line">&quot;no-proto&quot;: 2,//禁止使用__proto__属性</div><div class="line">&quot;no-redeclare&quot;: 2,//禁止重复声明变量</div><div class="line">&quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/</div><div class="line">&quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错</div><div class="line">&quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式</div><div class="line">&quot;no-script-url&quot;: 0,//禁止使用javascript:void(0)</div><div class="line">&quot;no-self-compare&quot;: 2,//不能比较自身</div><div class="line">&quot;no-sequences&quot;: 0,//禁止使用逗号运算符</div><div class="line">&quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</div><div class="line">&quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用</div><div class="line">&quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格</div><div class="line">&quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2]</div><div class="line">&quot;no-sync&quot;: 0,//nodejs 禁止同步方法</div><div class="line">&quot;no-ternary&quot;: 0,//禁止使用三目运算符</div><div class="line">&quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格</div><div class="line">&quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super</div><div class="line">&quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;;</div><div class="line">&quot;no-undef&quot;: 1,//不能有未定义的变量</div><div class="line">&quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined</div><div class="line">&quot;no-undefined&quot;: 2,//不能使用undefined</div><div class="line">&quot;no-unexpected-multiline&quot;: 2,//避免多行表达式</div><div class="line">&quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾</div><div class="line">&quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</div><div class="line">&quot;no-unreachable&quot;: 2,//不能有无法执行的代码</div><div class="line">&quot;no-unused-expressions&quot;: 2,//禁止无用的表达式</div><div class="line">&quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],//不能有声明后未被使用的变量或参数</div><div class="line">&quot;no-use-before-define&quot;: 2,//未定义前不能使用</div><div class="line">&quot;no-useless-call&quot;: 2,//禁止不必要的call和apply</div><div class="line">&quot;no-void&quot;: 2,//禁用void操作符</div><div class="line">&quot;no-var&quot;: 0,//禁用var，用let和const代替</div><div class="line">&quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],//不能有警告备注</div><div class="line">&quot;no-with&quot;: 2,//禁用with</div><div class="line">&quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格</div><div class="line">&quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来</div><div class="line">&quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号</div><div class="line">&quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter</div><div class="line">&quot;block-scoped-var&quot;: 0,//块语句中使用var</div><div class="line">&quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格</div><div class="line">&quot;callback-return&quot;: 1,//避免多次调用回调什么的</div><div class="line">&quot;camelcase&quot;: 2,//强制驼峰法命名</div><div class="line">&quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号</div><div class="line">&quot;comma-spacing&quot;: 0,//逗号前后的空格</div><div class="line">&quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾</div><div class="line">&quot;complexity&quot;: [0, 11],//循环复杂度</div><div class="line">&quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的</div><div class="line">&quot;consistent-return&quot;: 0,//return 后面是否允许省略</div><div class="line">&quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名</div><div class="line">&quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super</div><div class="line">&quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if()&#123;&#125; 中的&#123;&#125;</div><div class="line">&quot;default-case&quot;: 2,//switch语句最后必须有default</div><div class="line">&quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾</div><div class="line">&quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],//避免不必要的方括号</div><div class="line">&quot;eol-last&quot;: 0,//文件以单一的换行符结束</div><div class="line">&quot;eqeqeq&quot;: 2,//必须使用全等</div><div class="line">&quot;func-names&quot;: 0,//函数表达式必须有名字</div><div class="line">&quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式</div><div class="line">&quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格</div><div class="line">&quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤</div><div class="line">&quot;handle-callback-err&quot;: 0,//nodejs 处理错误</div><div class="line">&quot;id-length&quot;: 0,//变量名长度</div><div class="line">&quot;indent&quot;: [2, 4],//缩进风格</div><div class="line">&quot;init-declarations&quot;: 0,//声明时必须赋初值</div><div class="line">&quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格</div><div class="line">&quot;lines-around-comment&quot;: 0,//行前/行后备注</div><div class="line">&quot;max-depth&quot;: [0, 4],//嵌套块深度</div><div class="line">&quot;max-len&quot;: [0, 80, 4],//字符串最大长度</div><div class="line">&quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度</div><div class="line">&quot;max-params&quot;: [0, 3],//函数最多只能有3个参数</div><div class="line">&quot;max-statements&quot;: [0, 10],//函数内最多有几个声明</div><div class="line">&quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</div><div class="line">&quot;new-parens&quot;: 2,//new时必须加小括号</div><div class="line">&quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行</div><div class="line">&quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格</div><div class="line">&quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法</div><div class="line">&quot;one-var&quot;: 1,//连续声明</div><div class="line">&quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的</div><div class="line">&quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首</div><div class="line">&quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行</div><div class="line">&quot;prefer-const&quot;: 0,//首选const</div><div class="line">&quot;prefer-spread&quot;: 0,//首选展开运算</div><div class="line">&quot;prefer-reflect&quot;: 0,//首选Reflect的方法</div><div class="line">&quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos;</div><div class="line">&quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号</div><div class="line">&quot;radix&quot;: 2,//parseInt必须指定第二个参数</div><div class="line">&quot;id-match&quot;: 0,//命名检测</div><div class="line">&quot;require-yield&quot;: 0,//生成器函数必须有yield</div><div class="line">&quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾</div><div class="line">&quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],//分号前后空格</div><div class="line">&quot;sort-vars&quot;: 0,//变量声明时排序</div><div class="line">&quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格</div><div class="line">&quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格</div><div class="line">&quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格</div><div class="line">&quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格</div><div class="line">&quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格</div><div class="line">&quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格</div><div class="line">&quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],//一元运算符的前/后要不要加空格</div><div class="line">&quot;spaced-comment&quot;: 0,//注释风格不要有空格什么的</div><div class="line">&quot;strict&quot;: 2,//使用严格模式</div><div class="line">&quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN()</div><div class="line">&quot;valid-jsdoc&quot;: 0,//jsdoc规则</div><div class="line">&quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值</div><div class="line">&quot;vars-on-top&quot;: 2,//var必须放在作用域顶部</div><div class="line">&quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格</div><div class="line">&quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来</div><div class="line">&quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件</div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>参考文章：<br><a href="http://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000004468428" target="_blank" rel="external">ESLint配置参数介绍</a><br><a href="http://link.zhihu.com/?target=http%3A//www.cnblogs.com/nklong/p/7233631.html" target="_blank" rel="external">关于eslint使用规则，和各种报错应对书写规则。*</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-bea77f051e95f2be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Eslint&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在用vue2.0写项目时，由于vue-cli脚 架自动带了带了代码规范监测，稍微不小心就会出现一些Warning,这时就需要，根据自己习惯的代码规范，用一下代码进行对Eslint规范的一些忽略。下面详细介绍一下：&lt;br&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
      <category term="eslint" scheme="http://yoursite.com/tags/eslint/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Git 多分支管理亲手操作一波</title>
    <link href="http://yoursite.com/2018/01/21/Git-%E5%A4%9A%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E4%BA%B2%E6%89%8B%E6%93%8D%E4%BD%9C%E4%B8%80%E6%B3%A2/"/>
    <id>http://yoursite.com/2018/01/21/Git-多分支管理亲手操作一波/</id>
    <published>2018-01-21T09:50:33.000Z</published>
    <updated>2018-03-11T19:02:13.468Z</updated>
    
    <content type="html"><![CDATA[<p>文 | 阿小庆  2018-01-21❤<br><img src="http://upload-images.jianshu.io/upload_images/4340772-9fd73f39e9bd784a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2018-01-21"></p>
<p>快过年了，是时候对以前的知识总结一波了！</p>
<p>先问大家一个问题：<br>问：如果一个人想<strong>针对项目不同阶段都有个备份</strong>，在一台电脑上多分支管理一个项目，应该怎么搞呢？<br>答：我给你用电脑操作一下吧，哈哈，下面带大家实际操作一波。<br><a id="more"></a></p>
<ol>
<li>首先我建立一个仓库，clone到本地，建立了<code>README.md  主分支master.txt</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-57ab0ee0856fe943.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4340772-09d55e06ba07e340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ol>
<ul>
<li>新建branch1分支，并切换到branch1分支（<code>git branch</code> 可以查看所有分支）<br><code>git branch 分支名</code><br><code>git checkout 想要切换的分支名</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-3764314fa110f952.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<ol>
<li><p>新建次分支branch1.txt并提交<br>在此分支下提交可能会报错，报错后再执行下一句就可以<br><code>git push -u origin dev</code><br>表示本地分支将<strong>建立对远程仓库目标分支的检测</strong>，如果远程仓库<strong>目标分支</strong>不存在，将新建分支再push；如果存在，将进行push更新。<br>具体解决方法见下link:<br><a href="http://blog.csdn.net/qqb123456/article/details/25319659" target="_blank" rel="external"> git：fatal the current branch master has no upstream branch</a></p>
</li>
<li><p>提交成功后 ，在github上查看，就能看到新建的branch1分支提交了<code>次分支branch1.txt</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-775ac31c872fe32e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-c8b59f1808524d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>而主分支master内容没变<br><img src="http://upload-images.jianshu.io/upload_images/4340772-18bb371d745e1335.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<p>好，这样就大功告成了，如果自己一个人开发，为了不容易乱，<strong>我是把不同的分支放在不同的文件夹下</strong>，如下图，当然，你也可以用你自己的方法<br><img src="http://upload-images.jianshu.io/upload_images/4340772-56e3e2ff37437364.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>我把代码放在Github上了，供大家参考<br><a href="https://github.com/HuangCongQing/branch" target="_blank" rel="external">https://github.com/HuangCongQing/branch</a></p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文 | 阿小庆  2018-01-21❤&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-9fd73f39e9bd784a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;2018-01-21&quot;&gt;&lt;/p&gt;
&lt;p&gt;快过年了，是时候对以前的知识总结一波了！&lt;/p&gt;
&lt;p&gt;先问大家一个问题：&lt;br&gt;问：如果一个人想&lt;strong&gt;针对项目不同阶段都有个备份&lt;/strong&gt;，在一台电脑上多分支管理一个项目，应该怎么搞呢？&lt;br&gt;答：我给你用电脑操作一下吧，哈哈，下面带大家实际操作一波。&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络考试 复习时你应该要看的几道题！</title>
    <link href="http://yoursite.com/2018/01/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95-%E5%A4%8D%E4%B9%A0%E6%97%B6%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%A6%81%E7%9C%8B%E7%9A%84%E5%87%A0%E9%81%93%E9%A2%98%EF%BC%81/"/>
    <id>http://yoursite.com/2018/01/13/计算机网络考试-复习时你应该要看的几道题！/</id>
    <published>2018-01-13T09:50:33.000Z</published>
    <updated>2018-03-11T17:57:52.759Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-52d53828985a9863.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="计算机网络"><br><a id="more"></a><br>计算机网络考试 复习时你应该要看的几道题！<br>文 |  <a href="https://www.jianshu.com/u/781142899214" target="_blank" rel="external">阿小庆</a> |  2018-01-03</p>
<p>在学校马上就要考《计算机网络》这门课了，复习的过程中，发现有些题目很经典，特地整理总结了一下，我只挑了有用的以期回顾，若有观者阅，悦，那自己更是欣喜！☺</p>
<p>下面即是计算机网络一些题目的解析：</p>
<hr>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>1、假定站点A和B在同一个10Mb/s以太网网段上。这两个站点之间的传播时延为225比特时间。现假定A开始发送一帧，并且在A发送结束之前B也发送一帧。如果A发送的是以太网所容许的最短的帧，那么A在检测到和B发生碰撞之前能否把自己的数据发送完毕？换言之，如果A在发送完毕之前并没有检测到碰撞，那么能否肯定A所发送的帧不会和B发送的帧发生碰撞？（提示：在计算时应当考虑到每一个以太网帧在发送到信道上时，在MAC帧前面还要增加若干字节的前同步码和帧定界符）<br>2、在上题中的站点A和B在t=0时同时发送了数据帧。当t=255比特时间，A和B同时检测到发生了碰撞，并且在t=255+48=273比特时间完成了干扰信号的传输。A和B在CSMA/CD算法中选择不同的r值退避。假定A和B选择的随机数分别是rA=0和rB=1。试问A和B各在什么时间开始重传其数据帧？A重传的数据帧在什么时间到达B？A重传的数据会不会和B重传的数据再次发生碰撞？B会不会在预定的重传时间停止发送数据？<br>这道题，开始我是懵的，在网上搜了下资料，发现下面这篇文章很好，就不再赘述，直接附链接：<br><a href="http://blog.csdn.net/angelniu1024/article/details/23793373" target="_blank" rel="external">http://blog.csdn.net/angelniu1024/article/details/23793373</a><br>下面是课本参考答案：</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://upload-images.jianshu.io/upload_images/4340772-05dcfa5d979964f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="课后答案"></h2><p>19.主机A发送IP数据报给主机B，途中经过了5个路由器。试问在IP数据报的发送过程中总共使用了几次ARP？ </p>
<h2 id="6次，主机用一次，每个路由器各使用一次。"><a href="#6次，主机用一次，每个路由器各使用一次。" class="headerlink" title="   6次，主机用一次，每个路由器各使用一次。"></a>   6次，主机用一次，每个路由器各使用一次。</h2><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>5—21        假定使用连续ARQ协议中，发送窗口大小事3，而序列范围[0,15],而传输媒体保证在接收方能够按序收到分组。在某时刻，接收方，下一个期望收到序号是5.<br>试问：<br>（1）      在发送方的发送窗口中可能有出现的序号组合有哪几种？<br>（2）      接收方已经发送出去的、但在网络中（即还未到达发送方）的确认分组可能有哪些？说明这些确认分组是用来确认哪些序号的分组。</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://upload-images.jianshu.io/upload_images/4340772-536ae19d497670e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="课后答案"></h2><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><p>假定TCP在开始建立连接时，发送方设定超时重传时间是RTO=6s。<br>（1）当发送方接到对方的连接确认报文段时，测量出RTT样本值为1.5s。试计算现在的RTO值。<br>（2）当发送方发送数据报文段并接收到确认时，测量出RTT样本值为2.5s。试计算现在的RTO值。<br>课后答案是下面这样的<br><img src="http://upload-images.jianshu.io/upload_images/4340772-ffca1008037492d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>不过，我看和公式不符啊，网上搜罗了下，发现有位已经有了先见之明，下面这张图应该是对的！<br><img src="http://upload-images.jianshu.io/upload_images/4340772-0740d7b33c10edde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="上图来源文章：TCP-IP详解-RTT和RTO的计算方法-CSDN博客"><a href="#上图来源文章：TCP-IP详解-RTT和RTO的计算方法-CSDN博客" class="headerlink" title=" 上图来源文章：TCP-IP详解: RTT和RTO的计算方法 - CSDN博客"></a> <a href="http://blog.csdn.net/wdscq1234/article/details/52505191" target="_blank" rel="external">上图来源文章：<em>TCP</em>-IP详解: RTT和<em>RTO的</em>计算方法 - CSDN博客</a></h2><p>5—13        一个UDP用户数据的数据字段为8192季节。在数据链路层要使用以太网来传送。试问应当划分为几个IP数据报片？说明每一个IP数据报字段长度和片偏移字段的值。</p>
<p>答：6个<br>       数据字段的长度：前5个是1480字节，最后一个是800字节。<br>       片偏移字段的值分别是：0，1480，2960，4440，5920和7400.<br><strong>因为UDP用户数据报的数据字段为8192字节，所以数据报文的长度是8192+upd首部8字节=8200。</strong><br>所以第6个数据报片使8200-1480*5=800</p>
<p><strong>注意</strong>：链路层具有最大传输单元<a href="https://www.baidu.com/s?wd=MTU&amp;tn=44039180_cpr&amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1dbPhN9ujT3uhczuhn1Py7W0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPj6knW0dn1bz" target="_blank" rel="external">MTU</a>这个特性，它限制了数据帧的最大长度<br><strong>以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷（payload）部分预留是1500-20-8=1472字节。如果数据部分大于1472字节，就会出现分片现象。</strong></p>
<hr>
<p>5—23        主机A向主机B连续发送了两个TCP报文段，其序号分别为70和100。试问：<br>（1）      第一个报文段携带了多少个字节的数据？<br>（2）      主机B收到第一个报文段后发回的确认中的确认号应当是多少？<br>（3）      如果主机B收到第二个报文段后发回的确认中的确认号是180，试问A发送的第二个报文段中的数据有多少字节？<br>（4）      如果A发送的第一个报文段丢失了，但第二个报文段到达了B。B在第二个报文段到达后向A发送确认。试问这个确认号应为多少？</p>
<p><strong>解</strong>：（1）第一个报文段的数据序号是70到99，共30字节的数据。<br>（2）确认号应为100.<br>（3）80字节。</p>
<h2 id="（4）70"><a href="#（4）70" class="headerlink" title="（4）70"></a>（4）70</h2><p>5—39        TCP的拥塞窗口cwnd大小与传输轮次n的关系如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-d77a09fe70d12d11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p> （1）试画出如图5-25所示的拥塞窗口与传输轮次的关系曲线。<br>（2）指明TCP工作在慢开始阶段的时间间隔。<br>（3）指明TCP工作在拥塞避免阶段的时间间隔。<br>（4）在第16轮次和第22轮次之后发送方是通过收到三个重复的确认还是通过超市检测到丢失了报文段？<br>（5）在第1轮次，第18轮次和第24轮次发送时，门限ssthresh分别被设置为多大？<br>（6）在第几轮次发送出第70个报文段？<br>（7）假定在第26轮次之后收到了三个重复的确认，因而检测出了报文段的丢失，那么拥塞窗口cwnd和门限ssthresh应设置为多大？</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-b185b55f5cdae75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="http://upload-images.jianshu.io/upload_images/4340772-7e4f29a5f0b2348c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></h2><p>好了，总结基本到这里了，其实还有很多内容，我只是挑了一些重要的点出来，大家接着复习吧，哈哈！</p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-52d53828985a9863.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;计算机网络&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL——修改root密码的4种方法(以windows为例)</title>
    <link href="http://yoursite.com/2017/11/22/MySQL%E2%80%94%E2%80%94%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95(%E4%BB%A5windows%E4%B8%BA%E4%BE%8B)/"/>
    <id>http://yoursite.com/2017/11/22/MySQL——修改root密码的4种方法(以windows为例)/</id>
    <published>2017-11-22T09:50:33.000Z</published>
    <updated>2018-03-11T17:53:43.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-c71ef5e52855736d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改密码"></p>
<a id="more"></a>
<h3 id="方法1：-用SET-PASSWORD命令"><a href="#方法1：-用SET-PASSWORD命令" class="headerlink" title="方法1： 用SET PASSWORD命令"></a>方法1： 用SET PASSWORD命令</h3><p>首先登录MySQL。<br>格式：<code>mysql&gt; set password for 用户名@localhost = password(&#39;新密码&#39;);</code><br>例子：<code>mysql&gt; set password for root@localhost = password(&#39;123&#39;);</code></p>
<h3 id="方法2：用mysqladmin"><a href="#方法2：用mysqladmin" class="headerlink" title="方法2：用mysqladmin"></a>方法2：用mysqladmin</h3><p>格式：<code>mysqladmin -u用户名 -p旧密码 password 新密码</code><br>例子：<code>mysqladmin -uroot -p123456 password 123</code></p>
<h3 id="方法3：用UPDATE直接编辑user表"><a href="#方法3：用UPDATE直接编辑user表" class="headerlink" title="方法3：用UPDATE直接编辑user表"></a>方法3：用UPDATE直接编辑user表</h3><p>首先登录MySQL。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; use mysql; </div><div class="line">mysql&gt; update user set password=password(&apos;123&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;; </div><div class="line">mysql&gt; flush privileges;</div></pre></td></tr></table></figure></p>
<h3 id="方法4：在忘记root密码的时候，可以这样"><a href="#方法4：在忘记root密码的时候，可以这样" class="headerlink" title="方法4：在忘记root密码的时候，可以这样"></a>方法4：在忘记root密码的时候，可以这样</h3><p>以windows为例： </p>
<ol>
<li>关闭正在运行的MySQL服务。 </li>
<li>打开DOS窗口，转到mysql\bin目录。 </li>
<li>输入mysqld –skip-grant-tables 回车。–skip-grant-tables 的意思是启动MySQL服务的时候跳过权限表认证。 </li>
<li>再开一个DOS窗口（因为刚才那个DOS窗口已经不能动了），转到mysql\bin目录。 </li>
<li>输入mysql回车，如果成功，将出现MySQL提示符 &gt;。 </li>
<li>连接权限数据库： use mysql; 。 </li>
<li>改密码：update user set password=password(“123”) where user=”root”;（别忘了最后加分号） 。 </li>
<li>刷新权限（必须步骤）：flush privileges;　。 </li>
<li>退出 quit。 </li>
<li>注销系统，再进入，使用用户名root和刚才设置的新密码123登录。</li>
</ol>
<p>参考转载：</p>
<h2 id="http-www-jb51-net-article-39454-htm"><a href="#http-www-jb51-net-article-39454-htm" class="headerlink" title="http://www.jb51.net/article/39454.htm"></a><a href="http://www.jb51.net/article/39454.htm" target="_blank" rel="external">http://www.jb51.net/article/39454.htm</a></h2><p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-c71ef5e52855736d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;修改密码&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>如何用css和js禁止网页选择文字(兼容) 保护版权呢？（附代码）</title>
    <link href="http://yoursite.com/2017/11/14/%E5%A6%82%E4%BD%95%E7%94%A8css%E5%92%8Cjs%E7%A6%81%E6%AD%A2%E7%BD%91%E9%A1%B5%E9%80%89%E6%8B%A9%E6%96%87%E5%AD%97(%E5%85%BC%E5%AE%B9)-%E4%BF%9D%E6%8A%A4%E7%89%88%E6%9D%83%E5%91%A2%EF%BC%9F%EF%BC%88%E9%99%84%E4%BB%A3%E7%A0%81%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/14/如何用css和js禁止网页选择文字(兼容)-保护版权呢？（附代码）/</id>
    <published>2017-11-14T09:50:33.000Z</published>
    <updated>2018-03-11T19:02:30.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>现在有好多人为了省事直接复制他人的文章，从而损害到别人的利益，那么如何从技术上保护呢？</p>
</blockquote>
<p>问： 前端开发css禁止选中文本如何禁止选中文字？？？</p>
<p>禁止选中的方法很简单，有两种方法：JS和CSS两种<br><a id="more"></a></p>
<h3 id="js方法（onselectstart-”return-false-）"><a href="#js方法（onselectstart-”return-false-）" class="headerlink" title="js方法（onselectstart=”return false;）"></a>js方法（onselectstart=”return false;）</h3><p>直接干货<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if(document.all)&#123;</div><div class="line">    document.onselectstart= function()&#123;return false;&#125;; //for ie</div><div class="line">&#125;else&#123;</div><div class="line">    document.onmousedown= function()&#123;return false;&#125;;</div><div class="line">    document.onmouseup= function()&#123;return true;&#125;;</div><div class="line">&#125;</div><div class="line">document.onselectstart = new Function(&apos;event.returnValue=false;&apos;);</div><div class="line"> </div><div class="line">//劫持开始选择事件和（或）鼠标按下、抬起事件。</div></pre></td></tr></table></figure></p>
<p>简单方法，可以直接在标签里添加<br><code>onselectstart=&quot;return false;</code><br>例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div onselectstart=&quot;return false&quot;&gt;  </div><div class="line">    adasdasdasdasdasdasdad  </div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="css方法（user-select）"><a href="#css方法（user-select）" class="headerlink" title="css方法（user-select）"></a>css方法（user-select）</h3><p><strong>user-select</strong>有两个值：</p>
<ul>
<li>none：用户不能选择文本</li>
<li>text：用户可以选择文本<blockquote>
<p>需要注意的是：user-select并不是一个W3C的CSS标准属性，浏览器支持的不完整，需要对每种浏览器进行调整</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">body&#123;</div><div class="line">-moz-user-select: none; /*火狐*/</div><div class="line">-webkit-user-select: none; /*webkit浏览器*/</div><div class="line">-ms-user-select: none; /*IE10*/</div><div class="line">-khtml-user-select: none; /*早期浏览器*/</div><div class="line">user-select: none;</div><div class="line">&#125;</div><div class="line">IE6-9还没发现相关的CSS属性</div><div class="line">//IE6-9</div><div class="line">document.body.onselectstart = document.body.ondrag = function()&#123;</div><div class="line">return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p><a href="https://github.com/HuangCongQing/useful-Demo/blob/master/%E7%A6%81%E6%AD%A2%E7%BD%91%E9%A1%B5%E9%80%89%E6%8B%A9%E6%96%87%E5%AD%97.html" target="_blank" rel="external">附GitHub代码</a></p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;现在有好多人为了省事直接复制他人的文章，从而损害到别人的利益，那么如何从技术上保护呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问： 前端开发css禁止选中文本如何禁止选中文字？？？&lt;/p&gt;
&lt;p&gt;禁止选中的方法很简单，有两种方法：JS和CSS两种&lt;br&gt;
    
    </summary>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Github contribution settings 提交颜色说明（绿的程度）</title>
    <link href="http://yoursite.com/2017/11/12/Github-contribution-settings-%E6%8F%90%E4%BA%A4%E9%A2%9C%E8%89%B2%E8%AF%B4%E6%98%8E%EF%BC%88%E7%BB%BF%E7%9A%84%E7%A8%8B%E5%BA%A6%EF%BC%89/"/>
    <id>http://yoursite.com/2017/11/12/Github-contribution-settings-提交颜色说明（绿的程度）/</id>
    <published>2017-11-12T09:50:33.000Z</published>
    <updated>2018-03-11T17:54:30.702Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-74f05d2fe3968760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="颜色深度"></p>
<a id="more"></a>
<p>经常玩github的朋友都知道github有个Your Contributions，每天的contributions 会点亮相应的表格。<br>很多刚玩github对于contribution settings 颜色存有疑问，比如什么时候是深绿色，什么时候是浅绿色。 </p>
<ul>
<li>其实这个跟你<strong>提交的次数</strong>有关的，提交一次的时候就是浅绿，<strong>随着提交次数的增多，颜色也会加深。</strong><br>比如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-299265d9db67127b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<p>更多知识：<br> <a href="https://segmentfault.com/q/1010000000431610" target="_blank" rel="external">github 的 Your Contributions 是根据什么判断 Myday？</a></p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-74f05d2fe3968760.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;颜色深度&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>xgboost python包的完美安装（附包链接）</title>
    <link href="http://yoursite.com/2017/10/27/xgboost-python%E5%8C%85%E7%9A%84%E5%AE%8C%E7%BE%8E%E5%AE%89%E8%A3%85%EF%BC%88%E9%99%84%E5%8C%85%E9%93%BE%E6%8E%A5%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/27/xgboost-python包的完美安装（附包链接）/</id>
    <published>2017-10-27T09:50:33.000Z</published>
    <updated>2018-03-11T17:52:35.315Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>在<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#xgboost网站上找到xgboost现成的whl文件" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/#xgboost网站上找到xgboost现成的whl文件</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-6f8312b56bff72ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a></p>
<ul>
<li>进入’C:\Users\hasee\AppData\Local\Programs\Python\Python35\Scripts’目录下执行</li>
</ul>
<p><code>pip install &quot;C:\Users\hasee\AppData\Local\Programs\Python\Python35\Scripts&quot;</code></p>
<p><strong>注意：安装包要用英文状态下的双引号括住</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-f5e168e1b09127f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>好了，这样就成功了！</p>
<hr>
<p>运行<code>import xgboost</code>出现警告，不知怎么回事，望见过此错误的能回答一下呀？：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.</div><div class="line"> &quot;This module will be removed in 0.20.&quot;, DeprecationWarning)</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-adc7cb06467f957f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<hr>
<p>扩展阅读：<br><a href="http://blog.csdn.net/sb19931201/article/details/52557382" target="_blank" rel="external">xgboost入门与实战（原理篇）</a><br><a href="https://bulvbuting.github.io/2017/02/23/xgboost.html" target="_blank" rel="external">python xgboost 运行异常</a><br><a href="http://blog.csdn.net/u010035907/article/details/70195429?locationNum=15&amp;fps=1" target="_blank" rel="external">在windows 10环境下安装xgboost</a><br><a href="https://bulvbuting.github.io/2017/02/23/xgboost.html" target="_blank" rel="external">python <em>xgboost</em> 运行异常 | ZL</a></p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;在&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#xgboost网站上找到xgboost现成的whl文件&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/#xgboost网站上找到xgboost现成的whl文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-6f8312b56bff72ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>最新版-windows安装TensorFlow（踩了多少坑）（附下载链接）</title>
    <link href="http://yoursite.com/2017/10/26/%E6%9C%80%E6%96%B0%E7%89%88-windows%E5%AE%89%E8%A3%85TensorFlow%EF%BC%88%E8%B8%A9%E4%BA%86%E5%A4%9A%E5%B0%91%E5%9D%91%EF%BC%89%EF%BC%88%E9%99%84%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/26/最新版-windows安装TensorFlow（踩了多少坑）（附下载链接）/</id>
    <published>2017-10-26T09:50:33.000Z</published>
    <updated>2018-03-11T17:52:55.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>摘要: 利用Anaconda安装python环境，并安装TensorFlow</p>
</blockquote>
<p>网上有很多之类的文章，但是还是会很难安装成功,根据网上的及自己的经验，其间跳坑无数，摔得遍体鳞伤，曾一度怀疑自己廉颇老矣。最终吐血总结出来这篇博文，希望对大家有帮助！<br>先说下我的电脑是<strong>win7,64位系统，支持</strong>（tensorflow在windows下只支持python 3.5以上、amd64）<br><a id="more"></a></p>
<h3 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h3><ul>
<li>先安装Anaconda（<strong>利用Anaconda创建python35的环境</strong>）</li>
<li>安装CUDA,CUDNN（GPU运行要用到）</li>
<li>安装 TensorFlow</li>
</ul>
<h3 id="什么是-Anaconda？"><a href="#什么是-Anaconda？" class="headerlink" title="什么是 Anaconda？"></a>什么是 Anaconda？</h3><blockquote>
<p>Anaconda is the leading open data science platform powered by Python.<br>Anaconda 是一个由 Python 语言编写领先的开放数据科学平台</p>
</blockquote>
<h3 id="神魔是cuDnn和CUDA"><a href="#神魔是cuDnn和CUDA" class="headerlink" title="神魔是cuDnn和CUDA"></a>神魔是cuDnn和CUDA</h3><p><a href="http://blog.csdn.net/fangjin_kl/article/details/53906874" target="_blank" rel="external">CPU、GPU、CUDA，CuDNN 简介</a></p>
<h3 id="什么是-TensorFlow？"><a href="#什么是-TensorFlow？" class="headerlink" title="什么是 TensorFlow？"></a>什么是 TensorFlow？</h3><blockquote>
<p>TensorFlow is an open source software library for numerical computation using data flow graphs.<br>TensorFlow是一个开源软件库，用于使用数据流图进行数值计算。</p>
</blockquote>
<h3 id="具体安装步骤"><a href="#具体安装步骤" class="headerlink" title="具体安装步骤"></a>具体安装步骤</h3><p>####1. 下载 Anaconda<br><strong>tensorflow在windows下只支持python 3.5以上、amd64</strong></p>
<p>Anaconda3-4.2.0-Windows-x86_64.exe<br>由于国外网站下载极慢，给下百度链接：<a href="http://pan.baidu.com/s/1jHNoIwu" target="_blank" rel="external">http://pan.baidu.com/s/1jHNoIwu</a> 密码：uvbg<br>Anaconda安装过程见下面教程（只需看到Anaconda这一步就行）<br><a href="http://blog.csdn.net/ztf312/article/details/56018891" target="_blank" rel="external">【<em>Tensorflow</em>】Windows下基于<em>Anaconda</em>的<em>Tensorflow</em>环境…_CSDN博客</a></p>
<h3 id="2-1-安装CUDA（为了GPU）"><a href="#2-1-安装CUDA（为了GPU）" class="headerlink" title="2.1 安装CUDA（为了GPU）"></a>2.1 安装CUDA（为了GPU）</h3><p>cuda_8.0.61_windows.exe<br>链接：<a href="http://pan.baidu.com/s/1c2cZPNM" target="_blank" rel="external">http://pan.baidu.com/s/1c2cZPNM</a> 密码：o9x2<br>下面是安装步骤<br><a href="http://blog.csdn.net/jiugeshao/article/details/76370137" target="_blank" rel="external">win7 CUDA8.0下tensorflow gpu版环境搭配(亲测）</a><br>重新启动计算机。至此，cuda的安装就搞定了。</p>
<h3 id="2-2-安装CUDNN（这里只有win10和win7安装包）（为了GPU）"><a href="#2-2-安装CUDNN（这里只有win10和win7安装包）（为了GPU）" class="headerlink" title="2.2 安装CUDNN（这里只有win10和win7安装包）（为了GPU）"></a>2.2 安装CUDNN（这里只有win10和win7安装包）（为了GPU）</h3><p>cudnn-8.0-windows7-x64-v6.0.zip<br>win7链接：<a href="http://pan.baidu.com/s/1o8qmH7c" target="_blank" rel="external">http://pan.baidu.com/s/1o8qmH7c</a> 密码：l9zm<br>wn10链接：<a href="http://pan.baidu.com/s/1pLmhiqR" target="_blank" rel="external">http://pan.baidu.com/s/1pLmhiqR</a> 密码：puk1<br>安装步骤：<br><a href="http://blog.csdn.net/jiugeshao/article/details/76370137" target="_blank" rel="external">http://blog.csdn.net/jiugeshao/article/details/76370137</a><br>              <a href="http://blog.csdn.net/jiugeshao/article/details/76370137" target="_blank" rel="external">win7 CUDA8.0下tensorflow gpu版环境搭配(亲测）</a></p>
<p>####3.安装 TensorFlow<br>目前Google的TensorFlow是增加了Windows版本的支持，以前是只有Linux和MacOs版本。好了，那么我们就按照官方文档来安装吧。</p>
<p>首先在安装上有2个区分，如果<strong>你电脑支持GPU（一般都支持）</strong>，那么你可以安装GPU版本，如果你的电脑不支持GPU，那么安装CPU版本。</p>
<p>先看看GPU版本需要多安装哪些。需要安装下面这2个驱动。</p>
<ul>
<li>CPU版本命令输入：(不建议)</li>
</ul>
<p><code>pip3 install --upgrade tensorflow</code></p>
<ul>
<li>GPU版本命令输入：（<strong>用此方法安装，运行代码速度快的多</strong>）</li>
</ul>
<p><code>pip3 install --upgrade tensorflow-gpu</code></p>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-4e14fe375b52efae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图：pip3 install --upgrade tensorflow-gpu "></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>安装完后shell进入,输入<code>python</code>回车<br>输入<code>import tensorflow</code>试试，没报错，就证明可以</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-cfe10cbf953edded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="耶，可以好好玩tensorflow"><a href="#耶，可以好好玩tensorflow" class="headerlink" title="耶，可以好好玩tensorflow!"></a>耶，可以好好玩tensorflow!</h2><p>可参考：<br><a href="https://zhuanlan.zhihu.com/p/25340037" target="_blank" rel="external">如何安装<em>支持GPU</em>运算的<em>TensorFlow</em> 1.0? - 知乎专栏</a><br><a href="http://blog.csdn.net/roach_zfq/article/details/78121743" target="_blank" rel="external">ubuntu16.04+cuda8.0+cudnn6+tensorflow安装</a><br><a href="http://blog.csdn.net/u010417185/article/details/51899364" target="_blank" rel="external">Tensorflow常见错误</a><br><a href="http://www.cnblogs.com/shihuc/p/6593041.html" target="_blank" rel="external">安装tensorflow，那叫一个坑啊</a><br><a href="http://blog.csdn.net/jasonzzj/article/details/53490674" target="_blank" rel="external">在Windows下直接安装Tensorflow的Windows版本</a><br><a href="http://blog.csdn.net/ztf312/article/details/56018891" target="_blank" rel="external">【<em>Tensorflow</em>】Windows下基于<em>Anaconda</em>的<em>Tensorflow</em>环境…_CSDN博客</a><br><a href="http://blog.csdn.net/u010858605/article/details/64128466" target="_blank" rel="external">Win10下用<em>Anaconda安装TensorFlow</em>- CSDN博客</a></p>
<hr>
<p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要: 利用Anaconda安装python环境，并安装TensorFlow&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上有很多之类的文章，但是还是会很难安装成功,根据网上的及自己的经验，其间跳坑无数，摔得遍体鳞伤，曾一度怀疑自己廉颇老矣。最终吐血总结出来这篇博文，希望对大家有帮助！&lt;br&gt;先说下我的电脑是&lt;strong&gt;win7,64位系统，支持&lt;/strong&gt;（tensorflow在windows下只支持python 3.5以上、amd64）&lt;br&gt;
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow版本更新后运行代码所遇到的error（持续更新）</title>
    <link href="http://yoursite.com/2017/10/25/TensorFlow%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%E5%90%8E%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%89%80%E9%81%87%E5%88%B0%E7%9A%84error%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/25/TensorFlow版本更新后运行代码所遇到的error（持续更新）/</id>
    <published>2017-10-25T09:50:33.000Z</published>
    <updated>2018-03-11T17:49:16.971Z</updated>
    
    <content type="html"><![CDATA[<p>本博客会<strong>持续更新</strong>，如果遇到新的问题，欢迎大家提问，大家一起进步！</p>
<h2 id="AttributeError-module-‘tensorflow’-has-no-attribute-‘mul’"><a href="#AttributeError-module-‘tensorflow’-has-no-attribute-‘mul’" class="headerlink" title="AttributeError: module ‘tensorflow’ has no attribute ‘mul’"></a>AttributeError: module ‘tensorflow’ has no attribute ‘mul’</h2><p><img src="http://upload-images.jianshu.io/upload_images/4340772-1c99e17cc1b70071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><a id="more"></a></p>
<ul>
<li>原因：TensorFlow 发布的新版本的 API 修改了<br><strong>tf.mul, tf.sub and tf.neg are deprecated in favor of tf.multiply, tf.subtract and tf.negative.</strong></li>
<li>解决方法：使用时将 tf.mul 改成 tf.multiply 即可<br>其余的 tf.sub 和 tf.neg 也要相应修改为 tf.subtract 和 tf.negative。</li>
</ul>
<hr>
<p>相關學習：<br><a href="http://www.infoq.com/cn/news/2017/08/changes-tensorflow-1-3" target="_blank" rel="external">Tensorflow 1.3版本更新概览</a></p>
<h2 id="windows-tensorflow-版本与升级"><a href="#windows-tensorflow-版本与升级" class="headerlink" title="windows tensorflow 版本与升级"></a><a href="http://blog.csdn.net/lanchunhui/article/details/72892258" target="_blank" rel="external">windows tensorflow 版本与升级</a></h2><p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客会&lt;strong&gt;持续更新&lt;/strong&gt;，如果遇到新的问题，欢迎大家提问，大家一起进步！&lt;/p&gt;
&lt;h2 id=&quot;AttributeError-module-‘tensorflow’-has-no-attribute-‘mul’&quot;&gt;&lt;a href=&quot;#AttributeError-module-‘tensorflow’-has-no-attribute-‘mul’&quot; class=&quot;headerlink&quot; title=&quot;AttributeError: module ‘tensorflow’ has no attribute ‘mul’&quot;&gt;&lt;/a&gt;AttributeError: module ‘tensorflow’ has no attribute ‘mul’&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-1c99e17cc1b70071.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow版本-如何更新？（踩坑版）</title>
    <link href="http://yoursite.com/2017/10/25/TensorFlow%E7%89%88%E6%9C%AC-%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0%EF%BC%9F%EF%BC%88%E8%B8%A9%E5%9D%91%E7%89%88%EF%BC%89/"/>
    <id>http://yoursite.com/2017/10/25/TensorFlow版本-如何更新？（踩坑版）/</id>
    <published>2017-10-25T09:50:33.000Z</published>
    <updated>2018-03-11T17:51:31.977Z</updated>
    
    <content type="html"><![CDATA[<p>2017/10/26,我的tensorflow是从0.12版本升级到最新版本（1.3）的，基于python3.5的</p>
<h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><p>升级很简单（在这里感谢一下为简化 TensorFlow 安装过程的工程师们），就是一行语句，这也是安装命令：<br>对于 GPU 版本：<br><code>pip3 install --upgrade tensorflow-gpu</code></p>
<p>对于 CPU 版本：<br><code>pip3 install --upgrade tensorflow</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-85596acfd641e49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本更新前"><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4340772-ca31f64b6f27bf22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本更新后"></p>
<h3 id="可能踩得坑！！"><a href="#可能踩得坑！！" class="headerlink" title="可能踩得坑！！"></a>可能踩得坑！！</h3><p>说到命令行，大家可能习惯性的就敲个cmd进去了。但是如果就这么简单的输入命令开始安装，会发现整个下载过程非常顺利，但是到了安装步骤的时候就出现异常了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4c55433be4520df4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>最关键的错误在最后两行：PermissionError: [WinError 5] 拒绝访问。 涉及到权限问题了。 </strong></p>
<p>暗红色的报错信息洋洋洒洒一整屏，最后还有一个换色的提示，说pip已经有9了建议升级，看到这个可能会被带到另外一个沟里，以为是pip版本太低导致的。实际上最关键的错误在最后两行：PermissionError: [WinError 5] 拒绝访问。 涉及到权限问题了。<br>我们知道win7开始有严格的用户账户控制，大部分安装程序在安装的时候都会跳出对话框让你授权。这给系统安全带来了好处，但是也会带来一些莫名其妙的问题（之前写过一篇关于win7下装oracle10g，其中一个坑也是用户账户控制带来的）。出现这种情况一般两种情况：1、降低用户账户控制级别 2、用更高的权限来运行程序。我个人反对前者，<strong>建议从开始菜单中找到Windows PowerShell，然后从右击菜单中选择以管理员身份运行</strong>。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-6105b576a50120a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开power shell"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-237e5b58eb81d3cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>好了，终于可以啦！！如果遇到其他问题，欢迎大家提问！</p>
<hr>
<p>参考：<br><a href="http://blog.csdn.net/u010099080/article/details/55260055" target="_blank" rel="external">【TensorFlow | 升级】TensorFlow 1.0 发布</a><br><a href="http://blog.csdn.net/u010682375/article/details/72587962" target="_blank" rel="external">Tensorflow升级1.0版本</a></p>
<h2 id="win10安装TensorFlow填坑笔记"><a href="#win10安装TensorFlow填坑笔记" class="headerlink" title="win10安装TensorFlow填坑笔记"></a><a href="http://blog.csdn.net/chewinggum/article/details/70373098" target="_blank" rel="external">win10安装TensorFlow填坑笔记</a></h2><p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017/10/26,我的tensorflow是从0.12版本升级到最新版本（1.3）的，基于python3.5的&lt;/p&gt;
&lt;h3 id=&quot;升级&quot;&gt;&lt;a href=&quot;#升级&quot; class=&quot;headerlink&quot; title=&quot;升级&quot;&gt;&lt;/a&gt;升级&lt;/h3&gt;&lt;p&gt;升级很简单（在这里感谢一下为简化 TensorFlow 安装过程的工程师们），就是一行语句，这也是安装命令：&lt;br&gt;对于 GPU 版本：&lt;br&gt;&lt;code&gt;pip3 install --upgrade tensorflow-gpu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于 CPU 版本：&lt;br&gt;&lt;code&gt;pip3 install --upgrade tensorflow&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-85596acfd641e49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;版本更新前&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="TensorFlow" scheme="http://yoursite.com/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>25分钟学会使用MySQL基本操作</title>
    <link href="http://yoursite.com/2017/09/17/25%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/09/17/25分钟学会使用MySQL基本操作/</id>
    <published>2017-09-17T09:50:33.000Z</published>
    <updated>2018-03-11T17:29:11.185Z</updated>
    
    <content type="html"><![CDATA[<p>###1 MySQL登录与退出</p>
<ul>
<li><p>MySQL登陆<br><code>MySQL 参数</code>(在cmd命令框中输入)</p>
</li>
<li><p>登陆MySql<br><code>mysql -uroot -p -P3306 -h127.0.0.1</code></p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-7c1ec9cb6fcb9921.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql -uroot -p -P3306 -h127.0.0.1"><br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/4340772-6b56090b52efc767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql 参数"></p>
<ul>
<li>MySql退出<br><img src="http://upload-images.jianshu.io/upload_images/4340772-5a2dd466d42f95ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="退出"></li>
<li>MySQL修改root密码</li>
</ul>
<p><a href="http://www.jb51.net/article/39454.htm" target="_blank" rel="external">MySQL修改root密码链接
</a></p>
<h3 id="2-修改MySQL提示符及语法规范"><a href="#2-修改MySQL提示符及语法规范" class="headerlink" title="2  修改MySQL提示符及语法规范"></a>2  修改MySQL提示符及语法规范</h3><p>先说一个小技巧，cmd命令框清屏用<code>cls</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-ea34478e4f1030e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cls清屏"></p>
<p>首先说一下神魔是MySql提示符？看下面图就懂了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-fa496e99df25a6a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL提示符"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-13cf08b40ca40733.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改MySql提示符"></p>
<ul>
<li>连接客户端即登录时通过参数指定<br><code>mysql -uroot -proot --prompt 提示符</code></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-86199cda8dac41ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql -uroot -p -P3306 -h127.0.0.1 --prompt 提示符"></p>
<ul>
<li>连接上客户端后，通过prompt命令修改<br><code>prompt  提示符</code></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-577a3f68f16f5150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="prompt"></p>
<p>下面是MySql具体可更更改的操作</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-64b55a857963e5c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="\D\d\h\u"><br><code>PROMPT \u@\h \d</code>  修改为用户名@主机名 数据库名称</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-798f09b8a1438de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="3-MySQL常用命令"><a href="#3-MySQL常用命令" class="headerlink" title="3 MySQL常用命令"></a>3 MySQL常用命令</h3><p><img src="http://upload-images.jianshu.io/upload_images/4340772-936a9fabf9a0af5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常用命令"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-bc08f795b85880b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例"></p>
<h3 id="4-MySQL语句规范"><a href="#4-MySQL语句规范" class="headerlink" title="4 MySQL语句规范"></a>4 MySQL语句规范</h3><p><img src="http://upload-images.jianshu.io/upload_images/4340772-c25a2befce1ae7dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="语句规范"><br>特别注意分号，因为不加分号，这段语句不执行，如下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-e9ab52531a4419b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=";"></p>
<h3 id="5-数据库操作"><a href="#5-数据库操作" class="headerlink" title="5 数据库操作"></a>5 数据库操作</h3><p>{}必选项，[]可选项</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-59cae233ede058c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-e1ca842ee156e56f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CREATE DATABASE 数据库名"></p>
<p>数据库怎么看呢？<br>当前服务器下到底有多少数据库(正确安装之后，默认有四个数据库)<br><code>show DATABASES</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-56c467cc0a19e478.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Database lists"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4d2fda01dbf809ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="show DATABASES"></p>
<ul>
<li>创建数据库编码方式是什么？不加，默认是配置文件设置的编码方式</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-c8a8ebaca6a6c4d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="utf8"></p>
<ul>
<li>如果想创建一个GBK的编码方式的数据库怎么来？<br><code>CREATE DATABASE IF NOT EXISTS Hello2 CHARACTER SET gbk</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-01ba35bd92c4e8df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<ul>
<li>修改数据库<ul>
<li>修改编码方式<br><code>ALTER DATABASE Hello2 CHARACTER  SET utf8</code></li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-8c9da553a5117bca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-7933a1ab59c861d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>删除数据库<br>DROP DATABASE 数据库名</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-987b749ee414e464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="drop DATABASE"></p>
<p>基本操作就这样了！<br>回顾下重点：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-71ef9c3830a0f69f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重点"></p>
<h2 id="对了，还要说下，写SQL每句语句的后面，一定要加分号-哦！！"><a href="#对了，还要说下，写SQL每句语句的后面，一定要加分号-哦！！" class="headerlink" title="对了，还要说下，写SQL每句语句的后面，一定要加分号 ;哦！！"></a>对了，还要说下，写SQL每句语句的后面，一定要加<strong>分号 ;</strong>哦！！</h2><ul>
<li>可参考的常用命令链接：</li>
</ul>
<p><a href="http://www.cnblogs.com/hateislove214/archive/2010/11/05/1869889.html" target="_blank" rel="external">MYSQL常用命令</a><br><a href="https://www.baidu.com/link?url=OasvgcmO7JPV5_IhO4prskNhbV7VpGAggdekFmJdt95uBgezFkZcocFE3x5tK4xdL8-WjXhp9qBvsWoivigkLGPF_hgwGkBB5B4U1fIhVcW&amp;wd=&amp;eqid=a07b6514000420a70000000559bdc633" target="_blank" rel="external"><em>Mysql命令</em>大全 - 宁静.致远 - 博客园</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###1 MySQL登录与退出&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL登陆&lt;br&gt;&lt;code&gt;MySQL 参数&lt;/code&gt;(在cmd命令框中输入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登陆MySql&lt;br&gt;&lt;code&gt;mysql -uroot -p -P3306 -h127.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-7c1ec9cb6fcb9921.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mysql -uroot -p -P3306 -h127.0.0.1&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>coursera视频无法播放（翻墙也无效）？看这里就全懂了</title>
    <link href="http://yoursite.com/2017/09/17/coursera%E8%A7%86%E9%A2%91%E6%97%A0%E6%B3%95%E6%92%AD%E6%94%BE%EF%BC%88%E7%BF%BB%E5%A2%99%E4%B9%9F%E6%97%A0%E6%95%88%EF%BC%89%EF%BC%9F%E7%9C%8B%E8%BF%99%E9%87%8C%E5%B0%B1%E5%85%A8%E6%87%82%E4%BA%86/"/>
    <id>http://yoursite.com/2017/09/17/coursera视频无法播放（翻墙也无效）？看这里就全懂了/</id>
    <published>2017-09-17T09:50:33.000Z</published>
    <updated>2018-03-11T17:30:43.659Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-b5cbc22de794143d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Coursera"></p>
<blockquote>
<p>Coursera是国外的一款非常有名的公开课网站，值得大家一起学习,但有时候要在coursera上看个课程，发现看不了，爬墙各种方法都试了，特意在网上搜集了解决方案，亲测有效，现在特意记录下来，希望能帮到你。好好学习，天天向上。</p>
</blockquote>
<p>该方法针对Windows用户(<strong>win7，win8，win10</strong>)，亲测有效。<strong>Mac电脑</strong>的可参考我最后发的链接<br><a id="more"></a></p>
<ol>
<li>用管理员权限记事本打开host文件，地址如下: <code>C:\Windows\System32\drivers\etc</code>，（以文本格式打开hosts就好）</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-35d38c5130f91d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hosts"></p>
<ol>
<li>将如下内容复制到文件末尾<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">52.84.246.90    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.252    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.144    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.72    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.106    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.135    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.114    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.90    d3c33hcgiwev3.cloudfront.net</div><div class="line">52.84.246.227    d3c33hcgiwev3.cloudfront.net</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-a389baea939beb8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决DNS污染"></p>
<ol>
<li>打开cmd命令行，输入如下命令<br><code>ipconfig/flushdns</code></li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-36fdba9a9a223084.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ipconfig/flushdns"></p>
<ol>
<li>刷新页面即可，终于可以看视频啦</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-0310da00d6088fa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看看看"></p>
<p>参考链接：<br><a href="http://www.baidu.com/link?url=f9TFhOk7zUavTew3dtbGN0XmdvRtgX6RQAcSG58fWFvWdJb0FjDbEX1pr1PQWGibzLMTrLmodUcwSRqDzAUjt_" target="_blank" rel="external"><em>coursera 视频</em>总是缓冲或者<em>无法观看</em>,有什么方法解决? - 知乎</a><br><a href="http://blog.csdn.net/sinat_15443203/article/details/71694554" target="_blank" rel="external">coursera无法观看视频解决方法</a><br><a href="https://jingyan.baidu.com/article/6f2f55a14059eeb5b93e6cab.html" target="_blank" rel="external">Coursera无法观看课程解决方案-百度经验</a></p>
<h2 id="Mac和windows国内coursera官网看不了视频怎么办"><a href="#Mac和windows国内coursera官网看不了视频怎么办" class="headerlink" title="Mac和windows国内coursera官网看不了视频怎么办**"></a><a href="http://jingyan.baidu.com/article/e6c8503c5ea596e54f1a18a8.html" target="_blank" rel="external">Mac和windows国内coursera官网看不了视频怎么办</a>**</h2><p>好看的人儿，点个喜欢❤ 你会更好看哦~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-b5cbc22de794143d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Coursera&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Coursera是国外的一款非常有名的公开课网站，值得大家一起学习,但有时候要在coursera上看个课程，发现看不了，爬墙各种方法都试了，特意在网上搜集了解决方案，亲测有效，现在特意记录下来，希望能帮到你。好好学习，天天向上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该方法针对Windows用户(&lt;strong&gt;win7，win8，win10&lt;/strong&gt;)，亲测有效。&lt;strong&gt;Mac电脑&lt;/strong&gt;的可参考我最后发的链接&lt;br&gt;
    
    </summary>
    
    
      <category term="技术杂谈" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/"/>
    
      <category term="coursera" scheme="http://yoursite.com/tags/coursera/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达-神经网络和深度学习（ 第三周 浅层神经网络：）</title>
    <link href="http://yoursite.com/2017/09/14/%E5%90%B4%E6%81%A9%E8%BE%BE-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88-%E7%AC%AC%E4%B8%89%E5%91%A8--%E6%B5%85%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9A%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/14/吴恩达-神经网络和深度学习（-第三周--浅层神经网络：）/</id>
    <published>2017-09-14T09:50:33.000Z</published>
    <updated>2018-03-11T17:28:02.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习使用前向传播和反向传播搭建出有一个隐藏层的神经网络。</p>
</blockquote>
<ul>
<li>hidden layer Neural Network</li>
</ul>
<p>###3.1  神经网络概览</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-9d7700eb910aea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Neutral Network"></p>
<a id="more"></a>
<p>###3.2  神经网络表示</p>
<ul>
<li>双层神经网络（只有一个隐藏层，单隐层神经网络）</li>
<li>输入层-四个隐藏层单元-输出层</li>
<li>双层神经网络。不把输入层看做一个标准的层 </li>
<li>这里的隐藏层有两个相关的参数w和b,使用上标[1]表示这些参数，w是4x3矩阵,b是4x1向量（4代表有四个节点或者隐藏单元，3来自于3个输入特征）</li>
<li>输出层也有相关的参数w^[2]  (1x4,隐藏层有四个隐藏单元，输出层只有一个单元),b^[2]【1x1】</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-bebf4cc9908dab48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="神经网络表示"></p>
<p>###3.3  计算神经网络的输出</p>
<blockquote>
<p>gengrate 生成<br>compute 计算<br>matrix 矩阵</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-986017821bad5a5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-efce896fa844db88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>神经网络只不过是计算这些步骤很多次</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-fd26de856acca219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-45e07aeec5b0a344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.4  多个例子中的向量化</p>
<blockquote>
<p>训练样本横向堆叠构成矩阵X</p>
</blockquote>
<ul>
<li>m个训练样本</li>
<li>用激活函数来表示这些式子<code>a^[2](i)</code>【i是训练样本i,2指的是第二层】</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-449861dd7dee81f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>一个for循环遍历所有的m训练样本</li>
<li>向量化</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-cc5e1fa3aaa3d854.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.5  向量化实现的解释</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-cd2684cca6922347.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>这就是对不同训练样本向量化的神经网络，接下来，我们目前为止我们一直都是用sigmoid函数</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4ae6e75a8b9b04ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.6  激活函数（activation function）</p>
<blockquote>
<p>如何使用不同种类的激活函数，simoid只是其中的一个可能选择</p>
</blockquote>
<ul>
<li>为了搭建神经网络，可以选择的是选择隐层里用哪个激活函数，还有神经网络的输出单元用什么激活函数<br>有一个函数总比sigmoid函数表现好，那就是a=tanh(z)（双曲正切函数），<br>函数介于+1和-1之间，意味着激活函数的平均值更接近0</li>
</ul>
<p>但 二分分类是，输出层最好用sigmoid,因为y输出介于0-1更合理</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4f9007ef5b15cf2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>不过，sigmoid和tanh函数都有一个缺点，如果z非常大，或非常小，函数的斜率很接近0，这样会拖慢梯度下降算法</p>
<p>修正线性单元（ReLU）就派上用场了（z为正，斜率为1，为负，斜率为0）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-baf970658fb23bc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>在选择激活函数时有一些经验法则</p>
<ul>
<li>如果你的输出值是0或1，如果你在做二元分类，那么sigmoid很适合作为输出层的激活函数，然后其他所有单元都用ReUL。<br>如果你不确定隐层应该用哪个，那就用ReUL作为激活函数</li>
</ul>
<p>还有个带泄露的ReUL（z小于0是有一个缓缓的斜率，）通常比ReUL激活函数好，不过实际中使用的频率没那么高</p>
<p>在实践中使用ReUL激活函数，学习速度通常会快得多，比使用tanh或sigmoid激活函数快得多，因为ReUL没有函数斜率接近0时，减慢学习速度的学习速度的效应</p>
<p>说一下几个激活函数</p>
<ul>
<li><p>sigmoid<br>除非用在二元分类的输出层，不然绝对不要用，或者几乎从来不会用</p>
</li>
<li><p>最常用的默认激活函数ReLU，不确定用哪个，就用这个，或者带泄露的ReLU（max(0.01z, z)）</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-a12eb94021d55e07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.7  为什么需要非线性激活函数（nonlinear activation function）？</p>
<p>如果用线性激活函数（linear activation function）或者叫做恒等激活函数，那么神经网络只是把输入线性组合再输出，<br>无论你的神经网络多少层，一直在做的只是计算线性激活函数，和没有任何的标准Logistic回归是一样的，因为两个线性函数组合的本身就是线性函数，除非你引用非线性，</p>
<ul>
<li>只有一个地方可以使用线性激活函数g（z） = z，就是你要机器学习的是回归问题，所以y是一个实数，</li>
<li>线性激活函数不可能用在隐藏层（除压缩），要用，也是用在输出层，<br><img src="http://upload-images.jianshu.io/upload_images/4340772-eddcd1e14e9259c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<p>###3.8  激活函数的导数</p>
<p>接下来讨论梯度下降的基础，如何估计，如何计算单个激活函数的导数，斜率，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-14b2e0de1b445a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-6e9e705bcb8f3e77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-90a6b87258f2585e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-efaa0dcfff5f9aa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.9  神经网络的梯度下降法<br>梯度下降算法的具体实现，如何处理单隐层神经网络，<br>提供所需的方程，来实现反向传播，或者说梯度下降算法，</p>
<p>keepdims = true(确保python输出的是矩阵)</p>
<ul>
<li>正向传播 4个方程</li>
<li>反向传播 6个方程</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-a29e026c3008e8cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>###3.10  （选修）直观理解反向传播</p>
<p>###3.11  随机初始化</p>
<p>当你训练神经网络时，随机初始化权重非常重要，对于logistic回归，可以将权重初始化为零，<br>但如果将神经网络各参数数组初始化为0，再使用梯度下降算法（gredient descent），那会完全失效</p>
<p>因为我们需要两个不同的隐藏单元，去计算不同的函数，<strong>这个问题的解决方案是随机初始化所有参数，</strong></p>
<ul>
<li>可以令W^[1] = np.random,randn, 这可以产生参数为（2， 2）的高斯分布随机变量，然后你再乘以一个很小的数字【因为通常喜欢把权重矩阵初始化非常小的随机数】，所有你将权重初始化很小的随机数，</li>
<li>如果训练单隐层神经网络时，没有太多的隐藏层，设为0.01还可以，但当训练一个很深的神经网络时，可能要试试0.01以外的常数，</li>
<li>把b初始化0是可以的</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4f5e7d7d5861f341.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="随机初始化"></p>
<blockquote>
<p>所以，在这周的视频里，你知道如何设立单隐层神经网络，初始化参数，并用正向传播计算预测值，还有计算导数，然后使用梯度下降，反向传播</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习使用前向传播和反向传播搭建出有一个隐藏层的神经网络。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;hidden layer Neural Network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###3.1  神经网络概览&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-9d7700eb910aea5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Neutral Network&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>看透神经网络和深度学习的脉络，终于不迷糊了</title>
    <link href="http://yoursite.com/2017/09/09/%E7%9C%8B%E9%80%8F%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%84%89%E7%BB%9C%EF%BC%8C%E7%BB%88%E4%BA%8E%E4%B8%8D%E8%BF%B7%E7%B3%8A%E4%BA%86/"/>
    <id>http://yoursite.com/2017/09/09/看透神经网络和深度学习的脉络，终于不迷糊了/</id>
    <published>2017-09-09T09:50:33.000Z</published>
    <updated>2018-03-11T17:25:05.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>神经网络和深度学习近几年好多人在学习，但是他们具体是什么关系，又有什么联系，众说纷纭，<br>有人说：深度学习可以理解成用深度神经网络（DNN，Deep Neural Network）来进行机器学习，<br>有人说：深度学习是一种方法，神经网络是个模型。用了深度学习可以有效解决层数多的网络不好学习的问题<br>还有人说：本是同根生，相煎何太急<br>接下来，下面这张图，能帮助大家更好地学习<strong>神经网络和深度学习</strong>，掌握理清脉络</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-bb38c57504d4a1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>线性回归是最基本的<br>注释：红色是基础</p>
<ul>
<li><p>ＮＬＰ自然语言处理(nlp,natural language processing)</p>
</li>
<li><p>机器学习(machine learning)</p>
</li>
<li>ＣＮＮ卷积神经网络（convolutional neural network）</li>
<li>ＲＮＮ递归神经网络(Recurrent Neural Network)</li>
<li>LSTM Long Short Term Memory长的短时记忆长短时记忆长短时记忆模型<a id="more"></a>
</li>
</ul>
<blockquote>
<p>CNN：卷积神经网络【<strong>空间</strong>】<br>RNN: 递归神经网络【<strong>时域</strong>】<br>神经网络中，隐含层网络的输出作为下一时刻自身的输入–&gt;一级一级会衰弱–》需要记忆封存的结构（LSTM）<br>RNN-&gt;LSTM【记忆量的扩充】</p>
<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><ul>
<li>非线性的运算关系叠加起来就是一个<strong>神经网络</strong></li>
<li>神经网络到CNN，RNN（空间和时间的扩展）</li>
<li>卷积核：二维的处理算组，图像的处理</li>
<li>神经网络到CNN就是一维到二维三维的转化，在空间上进行扩展</li>
<li>神经网络到RNN（神经网络一维有个时间的延续，比如说语音）</li>
<li>记忆GATE-根据输入的信息判断哪些是需要提前记下来的，在之后处理的时候选择要不要释放</li>
</ul>
</blockquote>
<p>小象学院公开课具体讲述了这一内容，下面是视频链接：<br><a href="http://www.chinahadoop.cn/course/854/learn#lesson/16579" target="_blank" rel="external">视频连接</a></p>
<p>本文转载自微信公众号：<strong>重庆小哥稳</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-cd40a159c0f512b4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重庆.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;神经网络和深度学习近几年好多人在学习，但是他们具体是什么关系，又有什么联系，众说纷纭，&lt;br&gt;有人说：深度学习可以理解成用深度神经网络（DNN，Deep Neural Network）来进行机器学习，&lt;br&gt;有人说：深度学习是一种方法，神经网络是个模型。用了深度学习可以有效解决层数多的网络不好学习的问题&lt;br&gt;还有人说：本是同根生，相煎何太急&lt;br&gt;接下来，下面这张图，能帮助大家更好地学习&lt;strong&gt;神经网络和深度学习&lt;/strong&gt;，掌握理清脉络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-bb38c57504d4a1a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;mark&quot;&gt;&lt;br&gt;线性回归是最基本的&lt;br&gt;注释：红色是基础&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ＮＬＰ自然语言处理(nlp,natural language processing)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;机器学习(machine learning)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ＣＮＮ卷积神经网络（convolutional neural network）&lt;/li&gt;
&lt;li&gt;ＲＮＮ递归神经网络(Recurrent Neural Network)&lt;/li&gt;
&lt;li&gt;LSTM Long Short Term Memory长的短时记忆长短时记忆长短时记忆模型
    
    </summary>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达-神经网络和深度学习(第二周神经网络基础)</title>
    <link href="http://yoursite.com/2017/09/07/%E5%90%B4%E6%81%A9%E8%BE%BE-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0(%E7%AC%AC%E4%BA%8C%E5%91%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80)/"/>
    <id>http://yoursite.com/2017/09/07/吴恩达-神经网络和深度学习(第二周神经网络基础)/</id>
    <published>2017-09-07T09:50:33.000Z</published>
    <updated>2018-03-11T17:23:40.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习如何用神经网络的思维模式提出机器学习问题、如何使用向量化加速你的模型。</p>
</blockquote>
<ul>
<li>先介绍一些名词<ul>
<li>training set (训练集)</li>
<li>feature vector(特征向量)</li>
<li>classifier(分类器)</li>
<li>calculus（微积分）</li>
<li>循环（loop）</li>
<li>数据集（datasets）</li>
<li>vectorization (向量化)</li>
<li>matrix(矩阵)</li>
<li>vector(向量) <a id="more"></a></li>
</ul>
</li>
<li>本周用到的一些符号【Notation】<ul>
<li>（x,y）表示一个单独的样本</li>
<li>x是xn维的特征向量</li>
<li>标签y值为0/1</li>
<li>训练集由m个训练样本构成</li>
<li>(x^(1), y^(1))表示样本一输入和输出，</li>
<li>{x^(1), y^(1),…..x^(n), y^(n).}整个训练集</li>
<li>测试集的 样本数。训练集的样本数</li>
<li>矩阵也可表示训练集输入x,输出标签y</li>
<li>注意：<strong>训练样本作为行向量堆叠</strong></li>
<li>输出y是1xm矩阵</li>
</ul>
</li>
</ul>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-ace3010bd66a3dc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Notation"></p>
<h3 id="二分分类【Binary-Classification】"><a href="#二分分类【Binary-Classification】" class="headerlink" title="二分分类【Binary Classification】"></a>二分分类【Binary Classification】</h3><ul>
<li><p>神经网络的计算过程中，通常有一个正向过程【forward  pass】（或者正向传播步骤）,接着有一个反向过程【backward pass】(或者反向传播步骤)</p>
</li>
<li><p>logistic回归是一个用于二分分类的算法</p>
</li>
<li><p>计算机保存图片，要保存<strong>三个独立矩阵</strong>（Red红 blue绿 Green蓝）<br>如果有64X64的一张图片，则<strong>输入向量的维度n=64X64X3=12288</strong></p>
</li>
<li><p>在二分分类问题中，目标是训练出一个<strong>分类器</strong>，他以图片的特征向量x作为输入，，预测输出的结果y(<strong>只有两个值</strong>)</p>
</li>
</ul>
<h3 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h3><p>这是一个学习算法，用在监督学习中，<br>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-be2183af3f59d818.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="logistic"></p>
<h3 id="logistic回归损失函数"><a href="#logistic回归损失函数" class="headerlink" title="logistic回归损失函数"></a>logistic回归损失函数</h3><p>损失函数【error function】在单个训练样本中定义的，他衡量了在单个训练样本上的表现<br>成本函数【cost function 】在全体训练集样本下的表现–&gt;对损失函数求和<br>对以上函数要找到合适的<strong>参数w和b</strong><br>成本函数用于衡量参数w和b的效果</p>
<p>如下图：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-d24d5e999f6e5713.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br><img src="http://upload-images.jianshu.io/upload_images/4340772-0427fc753f631b58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<h3 id="梯度下降法【Gradient-Descent】"><a href="#梯度下降法【Gradient-Descent】" class="headerlink" title="梯度下降法【Gradient Descent】"></a>梯度下降法【Gradient Descent】</h3><ul>
<li>训练或学习训练集上的参数w和b<br><img src="http://upload-images.jianshu.io/upload_images/4340772-8acc29d69d9d10d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="梯度下降法"><br><img src="http://upload-images.jianshu.io/upload_images/4340772-fd93c51f67066567.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="求最小值"></li>
</ul>
<h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>等于= be equal to </p>
<ul>
<li>pluse</li>
</ul>
<ul>
<li>minus<br>X times<br>/ divide</li>
</ul>
<h3 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h3><blockquote>
<p>可以说，一个神经网络的计算都是按照前向或者反向传播过程来实现的，<br>首先计算出神经网络的输出<br>首先计算出神经网络的输出，紧接着一个反向传播操作，后者我们用来计算出对应的梯度或者导数，流程图解释了为什么这样实现<br>流程图，是用蓝色箭头画出来的的，从左到右的计算</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-e97c6467621cc516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流程图"></p>
<h3 id="计算图的导数计算"><a href="#计算图的导数计算" class="headerlink" title="计算图的导数计算"></a>计算图的导数计算</h3><p>从右到左计算导数<br><img src="http://upload-images.jianshu.io/upload_images/4340772-da5ef2c60f6ae2d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<h3 id="logistic回归中的梯度下降法（用偏导数实现）"><a href="#logistic回归中的梯度下降法（用偏导数实现）" class="headerlink" title="logistic回归中的梯度下降法（用偏导数实现）"></a>logistic回归中的梯度下降法（用偏导数实现）</h3><p>导数流程图来计算梯度用偏导数有点大材小用，但对理解比较好<br><img src="http://upload-images.jianshu.io/upload_images/4340772-8eea77bbbe6c0632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<h3 id="m个样本的梯度下降"><a href="#m个样本的梯度下降" class="headerlink" title="m个样本的梯度下降"></a>m个样本的梯度下降</h3><p>运用到整个样本集中<br><img src="http://upload-images.jianshu.io/upload_images/4340772-a457f3d3e4260106.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="for循环"></p>
<h3 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h3><p>循环很低效率，用向量化来加速运算(np.function)<br><code>z=np.dot(w, x) + b</code><br><img src="http://upload-images.jianshu.io/upload_images/4340772-e902e7f515075452.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>可能有人说：可扩展深度学习实现是在GPU(图像处理单元)上做的，而我们做的再jupyter notebook上（CPU）<br>但GPU和CPU都有并行化的指令，SIMD单指令流多数据流，这点对GPU和CPU上面是成立的，只是GPU更擅长SIMD运算</p>
<ul>
<li>for循环能不用就不用，如果可以使用内置函数或者其他方法计算循环，会比for循环更快<br><img src="http://upload-images.jianshu.io/upload_images/4340772-a95281da70ed860e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br><img src="http://upload-images.jianshu.io/upload_images/4340772-2e0b31d42927905e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></li>
</ul>
<h3 id="进一步向量化logistic回归"><a href="#进一步向量化logistic回归" class="headerlink" title="进一步向量化logistic回归"></a>进一步向量化logistic回归</h3><p><img src="http://upload-images.jianshu.io/upload_images/4340772-a3e45618ebeadbda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<h3 id="向量化logistic回归的梯度输出"><a href="#向量化logistic回归的梯度输出" class="headerlink" title="向量化logistic回归的梯度输出"></a>向量化logistic回归的梯度输出</h3><p><img src="http://upload-images.jianshu.io/upload_images/4340772-311ff1bbbbce2c8d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>这就得到高度向量化的，高效的logistic回归梯度下降法</p>
<h3 id="python中的广播（使python和Numpy部分代码更高效）"><a href="#python中的广播（使python和Numpy部分代码更高效）" class="headerlink" title="python中的广播（使python和Numpy部分代码更高效）"></a>python中的广播（使python和Numpy部分代码更高效）</h3><p>广播（broadcasting）对列向量，行向量都有效<br>例子：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-114b9bd2669c3e05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-61ed179a1a902989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<p>实现神经网络算法时主要用到的广播形式<br><img src="http://upload-images.jianshu.io/upload_images/4340772-65f31aa1feadaf7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<h3 id="关于python-numpy向量的说明"><a href="#关于python-numpy向量的说明" class="headerlink" title="关于python/numpy向量的说明"></a>关于python/numpy向量的说明</h3><p>千万不要用秩为1的数组<br>随意插入assert()声明，要仔细检查矩阵和数组的维度<br>不要害怕调用reshape,来确保你的矩阵和向量</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-2fa688c563527064.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<p>可以排除，简化甚至消灭代码中各种奇怪的bug</p>
<p>学习链接<br><a href="http://www.missshi.cn/api/view/blog/59aa08fee519f50d04000170" target="_blank" rel="external">4. Logistic代码实战</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习如何用神经网络的思维模式提出机器学习问题、如何使用向量化加速你的模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先介绍一些名词&lt;ul&gt;
&lt;li&gt;training set (训练集)&lt;/li&gt;
&lt;li&gt;feature vector(特征向量)&lt;/li&gt;
&lt;li&gt;classifier(分类器)&lt;/li&gt;
&lt;li&gt;calculus（微积分）&lt;/li&gt;
&lt;li&gt;循环（loop）&lt;/li&gt;
&lt;li&gt;数据集（datasets）&lt;/li&gt;
&lt;li&gt;vectorization (向量化)&lt;/li&gt;
&lt;li&gt;matrix(矩阵)&lt;/li&gt;
&lt;li&gt;vector(向量)
    
    </summary>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>吴恩达-神经网络和深度学习(第一周深度学习概论)</title>
    <link href="http://yoursite.com/2017/09/01/%E5%90%B4%E6%81%A9%E8%BE%BE-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%92%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0(%E7%AC%AC%E4%B8%80%E5%91%A8%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%AE%BA)/"/>
    <id>http://yoursite.com/2017/09/01/吴恩达-神经网络和深度学习(第一周深度学习概论)/</id>
    <published>2017-09-01T09:50:33.000Z</published>
    <updated>2018-03-11T17:24:10.467Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学习驱动神经网络兴起的主要技术趋势，了解现今深度学习在哪里应用、如何应用。</p>
<p>8 月 8 日，吴恩达正式发布了 Deepleanring.ai——基于 Coursera 的系列深度学习课程，但在中国无法访问这套课程（除非你连VPN），还有Coursera中是英文授课，就有点尴尬。幸好，之后，吴恩达和网易合作，将课程内容免费放到网易的教育平台上.所以，终于有机会学这门课了！特记下笔记，以备忘！</p>
</blockquote>
<ul>
<li>可以先看一下人工智能的完整学习图<br><img src="http://upload-images.jianshu.io/upload_images/4340772-21510de02952b0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原理"></li>
</ul>
<blockquote>
<p>有一起学习的同学，可以联系我，一起进步哦！！！<br><a id="more"></a><br><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="external">Coursera学习Deep Learning Specialization</a><br><a href="https://study.163.com/my#/smarts" target="_blank" rel="external">网易云学习地址</a></p>
</blockquote>
<h3 id="什么是神经网络"><a href="#什么是神经网络" class="headerlink" title="什么是神经网络"></a>什么是神经网络</h3><p>由输入到输出<br>修正线性单元（ReLU）</p>
<h3 id="用神经网络进行监督学习"><a href="#用神经网络进行监督学习" class="headerlink" title="用神经网络进行监督学习"></a>用神经网络进行监督学习</h3><p>神经网络（neutral networks）</p>
<ul>
<li>机器学习–&gt;监督学习</li>
<li><p>监督学习</p>
<ul>
<li>standard NN – 房屋价格预测，广告点金</li>
<li>卷积神经网络（CNN）—图像领域</li>
<li>循环神经网络（RNN）—一维序列，时间，音频(机器翻译，语音变文本)</li>
<li>复杂，混合神经网络（complex,hybrid,NN）—（无人驾驶）<br><img src="http://upload-images.jianshu.io/upload_images/4340772-ad9d565ad67bf421.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="supervised Learning"><br>基本图例：<br><img src="http://upload-images.jianshu.io/upload_images/4340772-3dbe43160a7574c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="神经网络图"></li>
</ul>
</li>
<li><p>结构化数据和非结构化数据</p>
<ul>
<li>结构化数据：数据的数据库</li>
<li>非结构化数据：机器不容易理解的<strong>语音,图片,文本</strong>(用于<strong>语音识别，图像识别，自然语言文字处理</strong>)</li>
</ul>
</li>
</ul>
<p>如下图理解：</p>
<blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4ba78efd91eadc78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构化数据和非结构化数据"></p>
</blockquote>
<ul>
<li><p>符号规定<br>m–训练集的规模（训练样本的数量）</p>
</li>
<li><p>深度学习进行过程<br><img src="http://upload-images.jianshu.io/upload_images/4340772-f605b811f831e0a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="process"></p>
</li>
</ul>
<p>学完第一周的课程，特意找了一张图片，宏观把控，今后一定非常有用</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-21510de02952b0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原理"><br>待续…….</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习驱动神经网络兴起的主要技术趋势，了解现今深度学习在哪里应用、如何应用。&lt;/p&gt;
&lt;p&gt;8 月 8 日，吴恩达正式发布了 Deepleanring.ai——基于 Coursera 的系列深度学习课程，但在中国无法访问这套课程（除非你连VPN），还有Coursera中是英文授课，就有点尴尬。幸好，之后，吴恩达和网易合作，将课程内容免费放到网易的教育平台上.所以，终于有机会学这门课了！特记下笔记，以备忘！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以先看一下人工智能的完整学习图&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-21510de02952b0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;原理&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有一起学习的同学，可以联系我，一起进步哦！！！&lt;br&gt;
    
    </summary>
    
    
      <category term="神经网络" scheme="http://yoursite.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>mongoexport导出数据时遇到的种种问题（好坑）</title>
    <link href="http://yoursite.com/2017/08/26/mongoexport%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E7%A7%8D%E7%A7%8D%E9%97%AE%E9%A2%98%EF%BC%88%E5%A5%BD%E5%9D%91%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/26/mongoexport导出数据时遇到的种种问题（好坑）/</id>
    <published>2017-08-26T09:50:33.000Z</published>
    <updated>2018-03-11T17:12:43.286Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>想导出mongodb数据库里的数据，结果，搞了一天，踩了无数的坑，才终于导出数据，真的，要哭了，赶紧记录下来（说实话，网上有些文章真的随着版本的更新，有些过时了，真的是助我踩坑耶）<br>我主要讲我踩得坑哈，顺便说下！</p>
</blockquote>
<p>首先要开启服务，进入命令框<br><code>NET START MongoDB</code><br>然后进入安装目录（我的安装目录）：<code>cd D:\Program Files\Work\MongoDB\Server\3.4\bin</code>，执行<br><code>mongo</code></p>
<p>执行以上两步后，就可以输入有用的命令了<br>导出数据：<br><code>mongoexport -h 127.0.0.1 -u root -p
 12345 -d taobao -c prodect --type=cvs  -o D:\data\prodect_cvs.dat</code><br>不知上述意思的可以参见： <a href="http://www.cnblogs.com/limingluzhu/p/4323146.html" target="_blank" rel="external">Mongo的导出工具mongoexport介绍</a><br>然后就报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-08-26T15:48:30.940+0800    error connecting to db server: server returned e</div><div class="line">rror on SASL authentication step: Authentication failed.</div></pre></td></tr></table></figure></p>
<p>网上搜了一下，说<strong>–authenticationDatabase admin   这是是必须的，否则会报上述错误：</strong><br>解决办法<br>再添加一串代码： <code>--authenticationDatabase admin</code><br>但是添加了之后还是报相同的错，又搜了一下,看了下面一篇博文</p>
<p><a href="http://blog.csdn.net/allen_jinjie/article/details/9235073" target="_blank" rel="external">mongoDB authentication</a></p>
<blockquote>
<p>连接到admin数据库，在admin数据库上创建一个用户，这个用户保存在admin.system.users中，它的权限比在其它数据库中设置的用户权限更大。（当admin.system.users中一个用户都没有时，即使mongod启动时添加了–auth参数，如果没有在admin数据库中添加用户，此时不进行任何认证还是可以做任何操作，直到在admin.system.users中添加了一个用户。）</p>
</blockquote>
<p>原来是我没<strong>创建一个用户</strong>，<strong>但大家要注意创建用户的命令版本不同，命令也有可能不同</strong>，我就遇到了这个问题，<br><img src="http://upload-images.jianshu.io/upload_images/4340772-89217a2bec8657c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>mongodb3.X用的方法： <a href="http://blog.csdn.net/unixpro/article/details/47302855" target="_blank" rel="external">mongoDB add user in v3.0 问题的解决（Property ‘addUser’ of object admin is not a func）</a></p>
<p>我的版本是3.X的，所有我应该执行下面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.createUser(</div><div class="line">   &#123;</div><div class="line">     user: &quot;appAdmin&quot;,</div><div class="line">     pwd: &quot;password&quot;,</div><div class="line">     roles:</div><div class="line">       [</div><div class="line">         &#123; role: &quot;readWrite&quot;, db: &quot;config&quot; &#125;,</div><div class="line">         &quot;clusterAdmin&quot;</div><div class="line">       ]</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>旧点的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.addUser(&apos;appAdmin&apos;, &apos;password&apos;)</div></pre></td></tr></table></figure></p>
<p>创建完成之后如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-a20c1dedae69628b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<p>然后又遇到一个问题<code>csv mode requires a field list</code><br>,原因是<strong>第一次没有指明要导出的列，所以只是实现一个空的文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">user@user-xubuntu:/usr/lib/mongodb/bin$ sudo ./mongoexport -d wx_connect -c template --csv -o template_csv.dat  </div><div class="line">connected to: 127.0.0.1  </div><div class="line">csv mode requires a field list　　　　　　　　　　　　　　　　　　　　　------第一次没有指明要导出的列，所以只是实现一个空的文件  </div><div class="line">user@user-xubuntu:/usr/lib/mongodb/bin$ sudo ./mongoexport -d wx_connect -c template --csv -f msgId,templateId,status,toUser -o template_csv_new.dat  </div><div class="line">connected to: 127.0.0.1  </div><div class="line">exported 28 records　　　　　　　　　　　　　　　　　　　　　　　　　　　------导出成功</div></pre></td></tr></table></figure>
<p>所以在末尾再加上<code>-f 一列的名字</code><br><code>mongoexport -h 127.0.0.1 -u root -p
 12345 -d taobao -c prodect --type=cvs  -o D:\data\prodect_cvs.dat  --authenticationDatabase admin -f shop</code></p>
<p>参考博客：  <a href="http://blog.csdn.net/a25115/article/details/40862293" target="_blank" rel="external">mongoDB的基本操作以及数据的导入导出，备份和恢复</a><br>如下图<br><img src="http://upload-images.jianshu.io/upload_images/4340772-c9b2aac5e519d019.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"></p>
<blockquote>
<p>哇。终于完成了，有点小激动啊！！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想导出mongodb数据库里的数据，结果，搞了一天，踩了无数的坑，才终于导出数据，真的，要哭了，赶紧记录下来（说实话，网上有些文章真的随着版本的更新，有些过时了，真的是助我踩坑耶）&lt;br&gt;我主要讲我踩得坑哈，顺便说下！&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
</feed>
