<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄重庆</title>
  <subtitle>Never Never Give Up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-11T16:25:24.870Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黄重庆</name>
    <email>1756260160@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github自身踩到的坑</title>
    <link href="http://yoursite.com/2017/07/28/Github%E8%87%AA%E8%BA%AB%E8%B8%A9%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2017/07/28/Github自身踩到的坑/</id>
    <published>2017-07-28T15:36:05.000Z</published>
    <updated>2018-03-11T16:25:24.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4340772-4134778cdc246b6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<blockquote>
<p>用Github有一两年了，是时候总结一下以前踩得坑了，这些坑开始时还真把自己摔得不轻！！！！！<br>小插曲：自己以前用hexo搭建的博客，每次写博客都要新建.md文件等初始化步骤,然后提交，有些繁琐，再加上自己又换了台电脑，又要部署hexo（虽然不需要重新部署），但还是有些步骤，索性用简书写，方便快捷些！<br><a id="more"></a></p>
<h3 id="git-pull时ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known-fatal-Could-not-read-from-remote-repository"><a href="#git-pull时ssh-Could-not-resolve-hostname-github-com-Name-or-service-not-known-fatal-Could-not-read-from-remote-repository" class="headerlink" title="git pull时ssh: Could not resolve hostname github.com: Name or service not known, fatal: Could not read from remote repository."></a>git pull时<code>ssh: Could not resolve hostname github.com: Name or service not known, fatal: Could not read from remote repository.</code></h3></blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git pull</div><div class="line">ssh: Could not resolve hostname github.com: Name or service not known</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p><strong>这个错误好醉，是因为没网了，就很皮</strong></p>
<h3 id="git本地仓库首次push到远程仓库出现错误-rejected-master-gt-master-fetch-first"><a href="#git本地仓库首次push到远程仓库出现错误-rejected-master-gt-master-fetch-first" class="headerlink" title="git本地仓库首次push到远程仓库出现错误 ! [rejected] master -&gt; master (fetch first)"></a>git本地仓库首次push到远程仓库出现错误 ! [rejected] master -&gt; master (fetch first)</h3><p>新建好本地的仓库和远程仓库之后，</p>
<p>经过<br><code>git add .</code><br>然后<br><code>git commit -m &quot;......&quot;</code><br>最后想推送到远程仓库的时候</p>
<p><code>git push -u origin master</code><br>出现下图错误</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-92f06947d40a738d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>解决很简单，使用强制推送<br>使用下面的命令<br><code>git push -f origin master</code></p>
<p><em>附上git push 的说明</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">NAME</div><div class="line"></div><div class="line">git-push - Update remote refs along with associated objects</div><div class="line"></div><div class="line">SYNOPSIS</div><div class="line"></div><div class="line">git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</div><div class="line">       [--repo=&lt;repository&gt;] [-f | --force] [--prune] [-v | --verbose]</div><div class="line">       [-u | --set-upstream]</div><div class="line">       [--[no-]signed|--sign=(true|false|if-asked)]</div><div class="line">       [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</div><div class="line">       [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;…​]]</div><div class="line"></div><div class="line">-f  --force</div><div class="line">Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when --force-with-lease option is used, the command refuses to update a remote ref whose current value does not match what is expected.</div><div class="line"></div><div class="line">This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</div><div class="line"></div><div class="line">Note that --force applies to all the refs that are pushed, hence using it with push.default set to matching or with multiple push destinations configured with remote.*.push may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a + in front of the refspec to push (e.g git push origin +master to force a push to the master branch). See the&lt;refspec&gt;... section above for details.</div></pre></td></tr></table></figure></p>
<h3 id="github上传时出现error-src-refspec-master-does-not-match-any"><a href="#github上传时出现error-src-refspec-master-does-not-match-any" class="headerlink" title="github上传时出现error: src refspec master does not match any"></a>github上传时出现error: src refspec master does not match any</h3><p>如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4340772-ee916947d8e430af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>引起该错误的原因是，目录中没有文件，空目录是不能提交上去的</strong></p>
<p>解决方法:<strong>先提交文件<code>git add . git commit -m &quot;&quot;</code></strong><br>例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">touch README</div><div class="line">git add README </div><div class="line">git commit -m &apos;first commit&apos;</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<h3 id="fatal：-unable-to-create-‘-git-index-lock’-File-exists"><a href="#fatal：-unable-to-create-‘-git-index-lock’-File-exists" class="headerlink" title="fatal： unable to create ‘../../.git/index.lock’:File exists"></a>fatal： unable to create ‘../../.git/index.lock’:File exists</h3><p>  <img src="http://upload-images.jianshu.io/upload_images/4340772-427e594cf0d5fe04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mark"><br>  解决方法：<strong>把文件index.lock删掉</strong></p>
<p>###Permission denied (publickey).<br>fatal: The remote end hung up unexpectedly</p>
<p>错误原因：github上没有配置公钥<br>解决方法：配置公钥，并放到github上<br>GitHub设置公钥在windows下面</p>
<ol>
<li>安装git，从程序目录打开 “Git Bash” </li>
<li>键入命令：ssh-keygen -t rsa -C “email@email.com”<br>“email@email.com”是github账号</li>
<li>提醒你输入key的名称，输入如id_rsa<br>如果执行成功。返回</li>
</ol>
<p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/home/forwhat.cn/.ssh/id_rsa):<br>在这里就是设置存储地址了.反正我是直接按的回车，一直回车</p>
<ol>
<li>在C:\Documents and Settings\Administrator\下产生两个文件：id_rsa和id_rsa.pub</li>
<li>把4中生成的密钥文件复制到C:\Documents and Settings\Administrator.ssh\ 目 录下。</li>
<li>用记事本打开id_rsa.pub文件，复制内容，<strong>在github.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字例如你的电脑名</strong></li>
</ol>
<p>需要注意步骤2中产生的密钥文件在当前用户的根目录，必须把这两个文件放到当前用户目录的“.ssh”目录下才能生效。</p>
<p>坑不会踩完的，但会一直进步着，大家加油……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4340772-4134778cdc246b6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用Github有一两年了，是时候总结一下以前踩得坑了，这些坑开始时还真把自己摔得不轻！！！！！&lt;br&gt;小插曲：自己以前用hexo搭建的博客，每次写博客都要新建.md文件等初始化步骤,然后提交，有些繁琐，再加上自己又换了台电脑，又要部署hexo（虽然不需要重新部署），但还是有些步骤，索性用简书写，方便快捷些！&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/07/28/hello-world/"/>
    <id>http://yoursite.com/2017/07/28/hello-world/</id>
    <published>2017-07-28T15:03:14.573Z</published>
    <updated>2017-07-28T15:03:14.573Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sublime侧边栏[SideBar]字体变大</title>
    <link href="http://yoursite.com/2017/01/15/Sublime%E4%BE%A7%E8%BE%B9%E6%A0%8F%E5%AD%97%E4%BD%93%E5%8F%98%E5%A4%A7/"/>
    <id>http://yoursite.com/2017/01/15/Sublime侧边栏字体变大/</id>
    <published>2017-01-15T08:05:40.000Z</published>
    <updated>2017-07-28T15:03:14.573Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MPic神器-上传照片直接生成外链</title>
    <link href="http://yoursite.com/2017/01/12/Mpic%E7%A5%9E%E5%99%A8/"/>
    <id>http://yoursite.com/2017/01/12/Mpic神器/</id>
    <published>2017-01-12T06:31:40.000Z</published>
    <updated>2017-07-28T15:03:14.573Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来写博文，上传本地照片是一个特别麻烦的事，一来webstorm收费，其次cmd Markdown上传照片只支持外联，而上传照片到七牛云不失为一个好方法，但操作过程复杂，正在我愁眉不展时，上网一搜，搜到了一神器<strong>Mpic-图床神器</strong>。可以和七牛云绑定一起发挥威力。<br><a href="http://mpic.lzhaofu.cn/" target="_blank" rel="external">下载链接</a><br>经过自己的一番折腾，最终发现MPic果然省时省事不少，目前我知道的上传方式有2种：</p>
<ul>
<li>截图上传（QQ截图个人感觉不错）</li>
<li>拖拽本地图片上传<br>下载之后的界面：<br><img src="http://ojmcn9nlw.qnssl.com/blog/20170116/230234883.png" alt="mark"><h2 id="下面介绍一下下载软件之后的操作步骤："><a href="#下面介绍一下下载软件之后的操作步骤：" class="headerlink" title="下面介绍一下下载软件之后的操作步骤："></a>下面介绍一下下载软件之后的操作步骤：</h2></li>
</ul>
<p>下载之后首先就是注册账号<br><img src="http://ojmcn9nlw.qnssl.com/blog/20170112/143020429.png" alt="mark"><br>注意几个问题：</p>
<ul>
<li>首先你用默认域名时，<strong>账户余额应不少于10元</strong>;</li>
<li>申请存储空间七牛云自己会带个域名，用这个自带的域名就可以，如下图，当然，用自己绑定的域名也可以，不过域名必须是注册过的，注册很麻烦耗时，不嫌麻烦的也可以试试。<br><img src="http://ojmcn9nlw.qnssl.com/blog/20170116/225538657.png" alt="mark"></li>
</ul>
<ul>
<li>在我的上传中，可<strong>查看和删除</strong>自己之前上传过的照片</li>
</ul>
<p><img src="http://ojmcn9nlw.qnssl.com/blog/20170116/222915013.png" alt="上传记录"></p>
<p><img src="http://ojmcn9nlw.qnssl.com/blog/20170116/230234883.png" alt="mark"></p>
<p>好，大功告成，终于可以好好地写自己的博客，顺带肆意的上传自已的照片了！！哈哈哈</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来写博文，上传本地照片是一个特别麻烦的事，一来webstorm收费，其次cmd Markdown上传照片只支持外联，而上传照片到七牛云不失为一个好方法，但操作过程复杂，正在我愁眉不展时，上网一搜，搜到了一神器&lt;strong&gt;Mpic-图床神器&lt;/strong&gt;。可以和
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-canvas之绘制圆弧和贝塞尔曲线(3)</title>
    <link href="http://yoursite.com/2017/01/01/HTML5-canvas%E4%B9%8B%E7%BB%98%E5%88%B6%E5%9C%86%E5%BC%A7%E5%92%8C%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    <id>http://yoursite.com/2017/01/01/HTML5-canvas之绘制圆弧和贝塞尔曲线/</id>
    <published>2017-01-01T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.571Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>今天我们主要是学习如何绘制圆弧和贝塞尔曲线。</p>
<h3 id="圆弧的绘制"><a href="#圆弧的绘制" class="headerlink" title="圆弧的绘制"></a>圆弧的绘制</h3><p>圆弧可以理解为一个圆上的某部分线段，在canvas中，绘制一条圆弧的语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.arc( 圆心x坐标, 圆心y坐标, 圆的半径r , 开始角度, 结束角度 );</div></pre></td></tr></table></figure></p>
<p>其中的 “开始角度” 和 “结束角度” 是相对360度的 <strong>顺时针</strong> 的极坐标而言的，可配合下图理解：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/201729364715288.gif" alt="圆弧"></p>
<p>我们来一个例子，绘制一个圆心坐标为(80,80)，半径为40，开始角度为30度，结束角度为90度，那么可以这样绘制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.arc( 80, 80, 40, 1/6*Math.PI, 1/2*Math.PI);</div><div class="line">ctx.stroke();  //描边</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>其中开始角和结束角我们分别设定为“1/6<em>Math.PI”和“1/2</em>Math.PI”，是因为canvas里的角度是以PI（π）为单位的，在js中写作Math.PI，你可以把一个PI理解为180度，那么30度便是1/6个PI。上述代码效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/201738597688778.jpg" alt="圆弧2"></p>
<hr>
<p>开始角和结束角也可以是负值，则角度从0度开始以逆时针方式获取：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.arc( 80, 80, 40, -1/6*Math.PI, -1/2*Math.PI);</div><div class="line">ctx.stroke();  //描边</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/201742493788091.jpg" alt="yuanhu3"></p>
<p>我们可以很轻松地来绘制一个完整的圆，将起始角设为0度，结束角设为360度（2*Math.PI）即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.arc( 80, 80, 40, 0, 2*Math.PI);</div><div class="line"></div><div class="line">ctx.lineWidth = 3;  //描边宽度为3px</div><div class="line">ctx.strokeStyle = &quot;yellow&quot;;</div><div class="line">ctx.stroke();  //描边</div><div class="line">ctx.fillStyle = &quot;#4DA6FF&quot;;</div><div class="line">ctx.fill(); //填充颜色</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/561179/201408/211112488934332.jpg" alt="full"></p>
<p>注意给圆填充颜色我们使用的是 .fill() 方法，和多边形的填充方式一样。</p>
<hr>
<p>接着说说 arc() 的好兄弟 arcTo() 方法，它可以在两条线段之间连接起一条弧线，其语法如下</p>
<p>ctx.arcTo( 起点切线末端x坐标, 起点切线末端y坐标, 终点x坐标, 终点y坐标, 圆的半径r );</p>
<p>可以配合下图理解：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211417258624242.gif" alt="此处输入图片的描述"></p>
<p>我们先不管什么“连接两条线段”的事情，单纯看下arcTo()绘制了怎样的一条圆弧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(20,20);           // 创建开始点</div><div class="line">ctx.arcTo(60,20,60,60,40); // 创建圆弧路径</div><div class="line">ctx.stroke();                </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211421063934449.jpg" alt="此处输入图片的描述"></p>
<hr>
<p>那么我们利用arcTo()方法来连接两条直线吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(20,20);</div><div class="line">ctx.lineTo(60,20);</div><div class="line">ctx.arcTo(100,20,100,60,40); // 创建圆弧路径</div><div class="line">ctx.lineTo(100,100);</div><div class="line">ctx.stroke();                </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/561179/201408/211430314097497.jpg" alt="此处输入图片的描述"><br>需要知道的是 arc() 不会影响画笔的位置，而 arcTo() 会把画笔移到圆弧线的终点位置。</p>
<hr>
<h3 id="曲线的绘制"><a href="#曲线的绘制" class="headerlink" title="曲线的绘制"></a>曲线的绘制</h3><p>无论是arc()抑或arcTo()，均是绘制了一个正圆上的部分圆弧线段，下面讲讲更灵活的曲线的绘制。</p>
<p>首先介绍的是canvas中贝塞尔曲线的绘制。使用过AI等专业矢量制图软件的朋友相信能很好地理解这一部分。我们先看下在制图软件中用钢笔工具绘制一条贝塞尔曲线的过程：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/201751196283442.gif" alt="此处输入图片的描述"></p>
<p>可以看到每两点可以连成一条贝塞尔路径，且每一个点都有一条方位控制线来控制曲线的弯曲程度和走向，在canvas中也是以类似形式控制贝塞尔曲线的形状。</p>
<p>我们先来看看bezierCurveTo()的实现方式，它称作“三次方贝塞尔曲线”，其语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.bezierCurveTo( CSx, CSy, CEx, CEy, Ex, Ey );</div></pre></td></tr></table></figure></p>
<p>其中CSx、CSy表示贝塞尔曲线起点方向控制线末端的x坐标和y坐标。CEx、CEy表示贝塞尔曲线终点方向控制线末端的x坐标和y坐标。Ex、Ey表示贝塞尔曲线终点坐标。</p>
<p>参考图如下，图中的贝塞尔曲线起点坐标为（20,20），终点坐标为（200,20），起点的方向控制线末端坐标为（20,100），终点的方向控制线末端坐标为（200,100）：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/201758386594269.gif" alt="此处输入图片的描述"><br>有的朋友可能会问为何bezierCurveTo()方法没有起始点的参数，答案是起始点默认为bezierCurveTo()方法执行之前画笔所在的位置<strong>，我们可以通过ctx.moveTo(x,y)来确定起始点的位置。</strong></p>
<p>如上图所示的贝塞尔曲线我们可以这样绘制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;300&quot; height=&quot;150&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(20,20);   //确定起始点</div><div class="line">ctx.bezierCurveTo( 20, 100, 200, 100, 200, 20 );</div><div class="line">ctx.stroke();  //描边</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>我们可以绘制两条或者多条连在一起的贝塞尔曲线，从而塑造我们想要的曲线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;400&quot; height=&quot;250&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(20,120);   //确定起始点</div><div class="line">ctx.bezierCurveTo( 20, 200, 200, 200, 200, 120 );   //绘制第一条贝塞尔曲线</div><div class="line">ctx.bezierCurveTo( 200, 20, 380, 20, 380, 120 );  //绘制第二条贝塞尔曲线，该曲线起点为上一条曲线终点（200，120）</div><div class="line">ctx.stroke();  //描边</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/561179/201408/211005404402751.jpg" alt="此处输入图片的描述"></p>
<hr>
<p>使用过矢量制图软件的朋友可能有个地方会困惑，那就是我们很多时候开始绘制一条曲线时（起点不做拉伸），该曲线的起点是没有任何方向控制线的，如下图：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211020209099104.gif" alt="此处输入图片的描述"><br>如果我们要绘制一条起点不做方向控制的曲线，那么bezierCurveTo()方法就不再适用了。</p>
<p>针对这种情况，可以通过 quadraticCurveTo() 方法来解决，它称作“二次方贝塞尔曲线”，语法为</p>
<p>ctx.quadraticCurveTo( CEx, CEy, Ex, Ey );</p>
<p>其中CEx、CEy表示曲线终点方向控制线末端的x坐标和y坐标。Ex、Ey表示曲线终点坐标。至于曲线起点则跟bezierCurveTo()一样，为该方法执行前画笔所在的位置。</p>
<hr>
<p>我们试着来绘制一条这样的曲线，它是我在AI中用钢笔工具绘制出来的：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211030157377261.gif" alt="此处输入图片的描述"></p>
<p>它的矢量轮廓是这样的：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211032006124068.gif" alt="此处输入图片的描述"></p>
<p>由于起点是没有方向控制线的，我们很容易知道得先绘制一条quadraticCurve，然后再紧接着绘制一条bezierCurve来完成这条曲线。</p>
<p>我们先确定下各点的坐标：</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211043359247757.gif" alt="此处输入图片的描述"></p>
<p>然后轻松写出代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;490&quot; height=&quot;270&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(52,37);   //确定起始点</div><div class="line">ctx.quadraticCurveTo( 45, 175, 172, 157 );   //绘制第一条曲线</div><div class="line">ctx.bezierCurveTo( 298, 140, 337, 201, 312, 236 );  //绘制第二条曲线</div><div class="line">ctx.stroke();  //描边</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>效果杠杠的</p>
<p><img src="http://images.cnitblog.com/i/561179/201408/211046495814886.jpg" alt="此处输入图片的描述"><br>建议有兴趣的朋友多实践，其中贝塞尔曲线部分的知识点可以通过AI等矢量设计软件来加深理解。共勉~ 啦啦啦<br>还有，大家元旦快乐啊！</p>
<p>有关链接</p>
<p><a href="http://www.cnblogs.com/vajoy/p/3925190.html" target="_blank" rel="external">http://www.cnblogs.com/vajoy/p/3925190.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;今天我们主要是学习如何绘制圆弧和贝塞尔曲线。&lt;/p&gt;
&lt;h3 id=&quot;圆弧的绘制&quot;&gt;&lt;a href=&quot;#圆弧的绘制&quot; class=&quot;headerlink&quot; title=&quot;圆弧的绘制&quot;&gt;&lt;/a&gt;圆弧的绘制&lt;/h3&gt;&lt;p&gt;圆弧可以理解为一个圆上的某部分线段，在canv
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-Canvas之矩阵和多边形的绘制（2）</title>
    <link href="http://yoursite.com/2016/12/25/HTML5-Canvas%E4%B9%8B%E7%9F%A9%E9%98%B5%E5%92%8C%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E7%BB%98%E5%88%B6/"/>
    <id>http://yoursite.com/2016/12/25/HTML5-Canvas之矩阵和多边形的绘制/</id>
    <published>2016-12-25T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.570Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>上篇文章我们了解了canvas的定义、获取和基础的绘图操作，其中的绘图功能我们讲解了线段绘制、上色、描边等方面知识点。</p>
<p>今天我们来讲讲矩形（Rectangle）和多边形的绘制。</p>
<p>矩形的绘制一共有两个口令，分别是 <strong>ctx.fillRect(x, y, width, height) 和 ctx.strokeRect(x, y, width, height)</strong> ，参数中的 x 和 y 依旧表示需绘制的矩形的起始点坐标（相对canvas原点），width 和 height表示需绘制的矩形宽高。</p>
<p>而 fillRect 表示绘制一个实心矩形，strokeRect 表示绘制一个描边矩形，我们来一个简单的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.fillRect(10,10,50,50);   //从画布上的(10,10)坐标点为起始点，绘制一个宽高均为50px的实心矩形</div><div class="line">ctx.strokeRect(70,10,50,50);   //从画布上的(70,10)坐标点为起始点，绘制一个宽高均为50px的描边矩形</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下<br><img src="http://images.cnitblog.com/i/561179/201408/151020443271689.jpg" alt="矩形**粗体文本**"></p>
<hr>
<p>你也可以使用 <code>Rect( x, y, width, height )</code> 的方法创建矩形路径，之后再通过 .stroke() 或 .fill() 方法来给矩形上色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.rect(20,20,150,100);  //创建矩形路径</div><div class="line">ctx.stroke();    //描边</div><div class="line">ctx.beginPath();    //重置画笔，避免污染</div><div class="line">ctx.rect(50,90,50,50);  //创建矩形路径</div><div class="line">ctx.fill();    //填充</div></pre></td></tr></table></figure>
<p>效果如下<br><img src="http://images.cnitblog.com/i/561179/201408/211453376748143.jpg" alt="rect"></p>
<hr>
<p>上方我们绘制了两个默认黑色的实心和描边矩形，相信你也联想到上一章我们绘制线段时，若没有定义strokeStyle，则线段也是默认为黑色的事情。那么我们要给这俩矩形上色，或许你也会联想到应当使用 *Style 来处理，而这想法也是正确的。</p>
<p>在canvas上，给实心对象上色可以用 fillStyle 来定义，给描边对象上色我们可以用 strokeStyle来定义，它们的赋值均为 color|gradient|pattern ，在上章我们已经细说过，这里不再赘述。</p>
<p>那么我们来给上方绘制了的实心矩形填充一个放射状渐变（黄-蓝-红），将描边矩形的描边设为绿色。我们可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">var grd = ctx.createRadialGradient(35,35,0,35,35,36);  //定义放射状渐变对象，设定渐变线起始点和结束点坐标，坐标格式为(起始点x,起始点y,结束点x,结束点y)</div><div class="line">grd.addColorStop(0,&quot;yellow&quot;);   //定义渐变线起点颜色</div><div class="line">grd.addColorStop(0.5,&quot;blue&quot;);   //定义渐变线中间点的颜色</div><div class="line">grd.addColorStop(1,&quot;red&quot;);  //定义渐变线结束点的颜色</div><div class="line">ctx.fillStyle = grd;   //将放射状渐变对象赋值给fillStyle</div><div class="line">ctx.fillRect(10,10,50,50);   //从画布上的(10,10)坐标点为起始点，绘制一个宽高均为50px的实心矩形</div><div class="line"></div><div class="line">ctx.beginPath();  //重置画笔，这是个好习惯</div><div class="line">ctx.strokeStyle = &quot;green&quot;;   //定义描边颜色为绿色</div><div class="line">ctx.strokeRect(70,10,50,50);   //从画布上的(70,10)坐标点为起始点，绘制一个宽高均为50px的描边矩形</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>效果如下<br><img src="http://images.cnitblog.com/i/561179/201408/151103301082183.jpg" alt="此处输入图片的描述"></p>
<p>这里要提到的是上一次没有仔细介绍过的放射状渐变方法 <code>createRadialGradient</code> ，其语法为</p>
<pre><code>ctx.createRadialGradient( Xstart, Ystart, Radiusstart, Xend, Yend, Radiusend )
</code></pre><p>其中前三个参数表示渐变起始圆形的中心坐标和半径，后三个参数表示渐变结束圆形的中点坐标和半径。</p>
<p>或许你会被这里的“半径”迷惑，回顾我们上章学习的createLinearGradient，它的参数并没有“半径”的概念，如果你是一名平面设计师，你更可能觉得放射状渐变只需要起始点和结束点坐标就可以了（毕竟PS/AI中的径向渐变只需要这两个点）。</p>
<p>但canvas在这里加入的“半径”参数还是有一定作用的，可以创造出比PS中径向渐变稍微复杂一些的效果。</p>
<p>⑴ 我们先来一个最简单最好理解的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">var grd = ctx.createRadialGradient(70,70,0,70,70,100);  //定义放射状渐变对象，设定起始圆和结束圆中点重叠，且起始圆半径为0</div><div class="line">grd.addColorStop(0,&quot;yellow&quot;);   //定义渐变线起点颜色</div><div class="line">grd.addColorStop(0.5,&quot;blue&quot;);   //定义渐变线中间点的颜色</div><div class="line">grd.addColorStop(1,&quot;rgba(255,0,0,0)&quot;);  //定义渐变线结束点的颜色，其中颜色透明度为0</div><div class="line">ctx.fillStyle = grd;   //将放射状渐变对象赋值给fillStyle</div><div class="line">ctx.fillRect(0,0,c.width,c.height);   //绘制一个跟画布大小一样的实心矩形</div></pre></td></tr></table></figure></p>
<p>我们设置起始圆和结束圆中点相同，且起始圆半径为0，那么它的渐变线就是从两圆的中点开始到结束圆的边缘结束。我们设置渐变线结束点颜色透明度为0是为了方便查看结束圆的边界。效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/151343581391102.jpg" alt="渐变线"></p>
<p>⑵ 我们在⑴的基础上将起始圆的半径设为20，代码和效果图如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">var grd = ctx.createRadialGradient(70,70,20,70,70,100);  //定义放射状渐变对象，设定起始圆和结束圆中点重叠，且起始圆半径为20</div><div class="line">grd.addColorStop(0,&quot;yellow&quot;);   </div><div class="line">grd.addColorStop(0.5,&quot;blue&quot;);  </div><div class="line">grd.addColorStop(1,&quot;rgba(255,0,0,0)&quot;);  </div><div class="line">ctx.fillStyle = grd;   </div><div class="line">ctx.fillRect(0,0,c.width,c.height);</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/151350137176009.jpg" alt="radial"></p>
<p>⑶ 我们在⑵的基础上挪动起始圆的中点，不要让它跟结束圆的中点重叠，代码和效果图如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">var grd = ctx.createRadialGradient(60,40,20,70,70,100);  //起始圆不仅有半径，而且中点跟结束圆中点不相同</div><div class="line">grd.addColorStop(0,&quot;yellow&quot;);   </div><div class="line">grd.addColorStop(0.5,&quot;blue&quot;);  </div><div class="line">grd.addColorStop(1,&quot;rgba(255,0,0,0)&quot;);  </div><div class="line">ctx.fillStyle = grd;   </div><div class="line">ctx.fillRect(0,0,c.width,c.height);</div></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/i/561179/201408/151353320459899.jpg" alt="此处输入图片的描述"></p>
<p>注意我们在定义RadialGradient时，要尽量避免起始圆的范围超出结束圆的范围（起始圆最好是结束圆内部的一个真子集），否则绘制出来的效果会出现无法预知的错误，例如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">var grd = ctx.createRadialGradient(60,60,50,70,70,50);  //起始圆的左边超出了结束圆内部区域</div><div class="line">grd.addColorStop(0,&quot;yellow&quot;);   </div><div class="line">grd.addColorStop(0.5,&quot;blue&quot;);  </div><div class="line">grd.addColorStop(1,&quot;rgba(255,0,0,0)&quot;);  </div><div class="line">ctx.fillStyle = grd;   </div><div class="line">ctx.fillRect(0,0,c.width,c.height);</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/151358364838839.jpg" alt="此处输入图片的描述"></p>
<p>不过如果你掌握了RadialGradient上色原理，倒是可以随意定位起始圆和结束圆的方位和大小。我从TimeLangoliers的博客（<a href="http://www.cnblogs.com/tim-li/archive/2012/08/06/2580252.html" target="_blank" rel="external">点击查看出处</a>）看到这张原理图：<br><img src="http://images.cnitblog.com/i/561179/201408/211100086741182.png" alt="此处输入图片的描述"><br>他还依照此原理图写了一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var canvas = document.getElementById(id);</div><div class="line">       if (canvas == null)</div><div class="line">       return false;</div><div class="line">       var context = canvas.getContext(&apos;2d&apos;);</div><div class="line">       var g1 = context.createRadialGradient(100, 150, 10, 300, 150, 50);</div><div class="line">       g1.addColorStop(0.1, &apos;rgb(255,0,0)&apos;);</div><div class="line">       g1.addColorStop(0.5, &apos;rgb(0,255,0)&apos;);</div><div class="line">       g1.addColorStop(1, &apos;rgb(0,0,255)&apos;);</div><div class="line">       context.fillStyle = g1;</div><div class="line">       context.fillRect(0, 0, 400, 300);</div></pre></td></tr></table></figure></p>
<p>至此我们学习了通过 fillRect 和 strokeRect 来绘制矩形，下面再讲一个Rect相关的功能——clearRect。</p>
<p>clearRect类似PS中的方块橡皮擦，可以擦除画布上任意一块矩形区域的内容，其语法如下：</p>
<pre><code>ctx.clearRect( x, y, width, height );
</code></pre><p>其中 x 和 y 表示起始点坐标，width 和 height 表示这块“橡皮擦”的宽高。举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">ctx.fillStyle = &quot;red&quot;;   </div><div class="line">ctx.fillRect(0,0,c.width,c.height);  </div><div class="line">ctx.beginPath();</div><div class="line">ctx.fillStyle = &quot;blue&quot;;   </div><div class="line">ctx.fillRect(10,20,60,60);  </div><div class="line">ctx.clearRect(20,20,80,50);  //擦除以（20,20）坐标为起点，宽高为80*50的区域</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/151532598736138.jpg" alt="此处输入图片的描述"></p>
<blockquote>
<p>注意clearRect不会清除掉之前定义过的样式、画笔位置等绘制信息，打个比方，有时候我们需要清空整个画布，我们可以这样做：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">ctx.fillStyle = &quot;blue&quot;;   </div><div class="line">ctx.fillRect(10,20,60,60);  </div><div class="line">//下面重置画布大小，从而清空画布</div><div class="line">c.width = c.width;  //在jQ中可以写为 c.attr(&quot;width&quot;, c.width());  </div><div class="line">c.height = c.height;  //在jQ中可以写为 c.attr(&quot;height&quot;, c.height());  </div><div class="line">//重新绘制一个矩形</div><div class="line">ctx.fillRect(10,20,60,60);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这个方法是通过重置画布大小，从而触发清空画布事件，但前面定义的 fillStyle=”blue” 也被清空掉了，从而绘制了一个黑色的矩形：<br><img src="http://images.cnitblog.com/i/561179/201408/151542360457595.jpg" alt="此处输入图片的描述"></p>
<p>如果不想清除掉之前定义的样式，我们可以通过clearRect来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">ctx.fillStyle = &quot;blue&quot;;   </div><div class="line">ctx.fillRect(10,20,60,60);  </div><div class="line">//下面通过clearRect来擦除画布</div><div class="line">ctx.clearRect(0,0,c.width,c.height);</div><div class="line">//重新绘制一个矩形</div><div class="line">ctx.fillRect(10,20,60,60);</div></pre></td></tr></table></figure></p>
<p>执行结果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/151545433421349.jpg" alt="此处输入图片的描述"></p>
<hr>
<p>最后聊一下多边形的绘制，其实现非常简单，先来个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">//定义样式</div><div class="line">ctx.fillStyle = &quot;blue&quot;;   </div><div class="line">ctx.strokeStyle = &quot;red&quot;;</div><div class="line">ctx.lineWidth = &quot;8&quot;;</div><div class="line">ctx.lineJoin = &quot;round&quot;;</div><div class="line"></div><div class="line">//绘制多边形</div><div class="line">ctx.moveTo(10,10);</div><div class="line">ctx.lineTo(100,30);</div><div class="line">ctx.lineTo(120,80);</div><div class="line">ctx.lineTo(60,60);</div><div class="line">ctx.lineTo(10,10);</div><div class="line"></div><div class="line">ctx.stroke();  //描边</div><div class="line">ctx.fill();    //填充</div></pre></td></tr></table></figure></p>
<p>可见我们这里通过lineTo绘制了多边形的每条边（注意起点跟终点是同一个坐标），然后通过 stroke() 来描边、fill() 来填充，其执行效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/151555187176162.jpg" alt="此处输入图片的描述"></p>
<p>眼尖的朋友会发现该多边形左上角的俩条描边没有接在一起，这是因为我们没有把这个多边形路径闭合起来，我们可以通过 ctx.closePath() 来解决这个问题：</p>
<p>眼尖的朋友会发现该多边形左上角的俩条描边没有接在一起，这是因为我们没有把这个多边形路径闭合起来，我们可以通过 ctx.closePath() 来解决这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line"></div><div class="line">//定义样式</div><div class="line">ctx.fillStyle = &quot;blue&quot;;   </div><div class="line">ctx.strokeStyle = &quot;red&quot;;</div><div class="line">ctx.lineWidth = &quot;8&quot;;</div><div class="line">ctx.lineJoin = &quot;round&quot;;</div><div class="line"></div><div class="line">//绘制多边形</div><div class="line">ctx.moveTo(10,10);</div><div class="line">ctx.lineTo(100,30);</div><div class="line">ctx.lineTo(120,80);</div><div class="line">ctx.lineTo(60,60);</div><div class="line">ctx.lineTo(10,10);</div><div class="line">ctx.closePath();  //闭合多边形路径</div><div class="line">ctx.stroke();  //描边</div><div class="line">ctx.fill();    //填充</div></pre></td></tr></table></figure></p>
<p><img src="http://images.cnitblog.com/i/561179/201408/151559585928099.jpg" alt="此处输入图片的描述"><br>这次就到这里，下次再见了！、</p>
<p>学习链接</p>
<p><a href="http://www.cnblogs.com/charmingyj/p/5527223.html" target="_blank" rel="external">canvas学习笔记</a><br><a href="http://www.cnblogs.com/vajoy/p/3914131.html" target="_blank" rel="external">HTML5- Canvas入门（二）</a><br><a href="http://www.cnblogs.com/tim-li/archive/2012/08/06/2580252.html" target="_blank" rel="external">玩转html5画图</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;上篇文章我们了解了canvas的定义、获取和基础的绘图操作，其中的绘图功能我们讲解了线段绘制、上色、描边等方面知识点。&lt;/p&gt;
&lt;p&gt;今天我们来讲讲矩形（Rectangle）和多边形的绘制。&lt;/p&gt;
&lt;p&gt;矩形的绘制一共有两个口令，分别是 &lt;strong&gt;ctx.
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5-Canvas初探（1）</title>
    <link href="http://yoursite.com/2016/12/18/HTML5-Canvas%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2016/12/18/HTML5-Canvas初探/</id>
    <published>2016-12-18T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.571Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>canvas其实没有那么玄乎，它不外乎是一个H5的标签，跟其它HTML标签如出一辙：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;canvas&gt;&lt;/canvas&gt;</div></pre></td></tr></table></figure></p>
<p>canvas 元素用于在网页上绘制图形。</p>
<h3 id="那么什么是-Canvas？"><a href="#那么什么是-Canvas？" class="headerlink" title="那么什么是 Canvas？"></a>那么什么是 Canvas？</h3><blockquote>
<p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。<br>画布是一个矩形区域，您可以控制其每一像素。<br>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>
</blockquote>
<ul>
<li>canvas本身没有任何的绘图能力，所有的绘图工作都是通过js来实现的。通常我们在js通过<strong>getElementById</strong>来获取要操作的canvas（这意味着咱得给canvas设个id）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot;&gt;&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;); //获取要操作的canvas</div><div class="line">//操作canvas的代码...</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意最好在一开始的时候就给canvas设置好其宽高（若不设定宽高，浏览器会默认设置canvas大小为宽300、高100像素），而且不能使用css来设置（会被拉伸），建议直接写于canvas标签内部：</p>
<pre><code>&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;
</code></pre><p>也可以在js脚本中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot;&gt;&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">c.width=200;</div><div class="line">c.height=200;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="为什么不能用css来设置呢？"><a href="#为什么不能用css来设置呢？" class="headerlink" title="为什么不能用css来设置呢？"></a>为什么不能用css来设置呢？</h3><p>这是因为 canvas 元素有元素本身大小与元素绘图表面大小两套尺寸。 设置 width 和 height 时，实际上是同时修改了该元素本身大小和元素绘图表面大小； 而设置 css，只会改变元素本身大小，并不会改变元素绘图表面大小。</p>
<blockquote>
<p>关于canvas大小需要知道的一点是，后续咱们对canvas所做的全部绘图操作，<strong>超出此大小范围的部分是不可见的</strong>。顾名思义，可以把canvas看成一块画布，其大小是咱设定好的宽高，那么无论你怎么画，画布外的地方自然是画不到的。</p>
</blockquote>
<p>对于有些浏览器是不支持canvas功能的，我们可以直接在canvas标签中写一些替换内容，在浏览器不支持canvas时显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>接着在聊如何在canvas上绘图前，咱得先说说.getContext(“2d”)这东西。<br>.getContext() 是canvas的绘图对象/方法，要让canvas执行绘图工作必须先获取canvas的.getContext()对象来执行。</p>
<p>.getContext()只接受一个参数，该参数用于获取canvas的绘图环境，例如.getContext(“2d”)表示该canvas的绘图环境为2D平面（可以绘制文本、直线、弧线、矩形、圆形等）。当前H5只支持2D环境，在不久的将来会开放3D绘图功能。（故咱可将“getContext”翻译为“获取绘图环境”）</p>
<p>接下来：主要是对canvas线段绘制功能的介绍<br>理论不多说，我们先来个小例子，从最简单的绘制直线开始：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(10,10);   //定义绘画开始的位置</div><div class="line">ctx.lineTo(150,50);  //画一条直线，结束点坐标是x=150,y=50</div><div class="line">ctx.stroke();  //描边</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/031159061807376.jpg" alt="一条直线"><br>在这里我们使用了3个getContext(“2d”)对象的绘图方法：</p>
<ul>
<li><p>.moveTo(x坐标 , y坐标)      可以理解为定位画笔在画布上的位置（注意所有绘图方法所定义的坐标是相对canvas而言的而不是浏览器窗口，对canvas来说，最左上角的点的坐标是(0,0)）</p>
</li>
<li><p>.lineTo(x坐标 , y坐标)      顾名思义，就是画一条直线到某个点，很好理解。需要知道的是此方法仅仅做路径运动，而不存在任何视觉上的绘图效果（上色、描边）</p>
</li>
<li><p>.stroke()     描边方法，有玩过AfterEffect的朋友会很清楚，不给运动路径加stroke特效的画是不存在描边效果的，canvas也一样，想要运动路径轨迹能有视觉效果，需要使用相应的上色/描边方法</p>
</li>
</ul>
<hr>
<p>自此我们很轻松地绘制了一条黑色的直线，但如果我们想要绘制一条红色的或者其它颜色的线段，该怎么做呢？</p>
<p>答案很简单，使用ctx.strokeStyle来设定描边的颜色即可。我们画三条红色的线段吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC; margin:30px;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); //获取该canvas的2D绘图环境对象</div><div class="line">ctx.moveTo(0,0);   //咱把“画笔”移到坐标(0,0)</div><div class="line">ctx.line</div></pre></td></tr></table></figure>
<p>注释都说的很清楚了，故不再赘述实现原理，其效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/031221589157297.jpg" alt="red line"></p>
<blockquote>
<p>注意在开始绘制路径的时候，一定要加上moveTo(x,y)，否则第一个lineTo()的运动轨迹将不计入绘图中（浏览器会认为没获取到该运动轨迹的起始点，故忽略此线段）。</p>
</blockquote>
<hr>
<p>另外有一个问题，如果上方我们会出来的两条线段（嗯，一条折线，一条直线），我们希望第一条折线是蓝色的，第二条直线是红色的，应当怎么做？</p>
<p>你会很自然地做如下处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">  var ctx = c.getContext(&quot;2d&quot;); </div><div class="line">  ctx.moveTo(0,0);   </div><div class="line">  ctx.lineTo(150,50);  </div><div class="line">  ctx.lineTo(20,100); </div><div class="line">  ctx.strokeStyle = &quot;blue&quot;;    //设定描边颜色为蓝色</div><div class="line">  ctx.stroke();  </div><div class="line">   </div><div class="line">  ctx.moveTo(90,90); </div><div class="line">  ctx.lineTo(80,150);  </div><div class="line">  ctx.strokeStyle = &quot;red&quot;;    //设定描边颜色为红色</div><div class="line">  ctx.stroke();  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>但运行脚本会发现，折线除了被描了一遍蓝色，也被描了一遍红色：<br><img src="http://images.cnitblog.com/i/561179/201408/031526223371748.jpg" alt="line"><br>这是因为canvas在第二次给路径上色时，是把之前的所有路径轨迹合在一起来上色的，除非咱们让canvas知道那折线和直线应该是独立开来的俩路径。</p>
<p>我们可以使用.beginPath()来解决：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">  var ctx = c.getContext(&quot;2d&quot;); </div><div class="line">  ctx.moveTo(0,0);   </div><div class="line">  ctx.lineTo(150,50);  </div><div class="line">  ctx.lineTo(20,100); </div><div class="line">  ctx.strokeStyle = &quot;blue&quot;;    //设定描边颜色为蓝色</div><div class="line">  ctx.stroke();  </div><div class="line">  </div><div class="line">  ctx.beginPath();  //告诉canvas咱们要重新绘制一条全新的路径了，之前画的东西从此再无关系</div><div class="line">  ctx.moveTo(90,90); </div><div class="line">  ctx.lineTo(80,150);  </div><div class="line">  ctx.strokeStyle = &quot;red&quot;;    //设定描边颜色为红色</div><div class="line">  ctx.stroke();  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>有的朋友一开始会搞不清楚beginPath()的用途，觉得有moveTo()就可以了，其实beginPath()可以做到上述的隔离路径绘制效果的作用，防止之前的效果被污染。</p>
</blockquote>
<hr>
<p>接着唠嗑.strokeStyle的赋值方式，咱们上方是直接用了 ctx.strokeStyle=”red” 来定义描边颜色为红色，不过ctx.strokeStyle可获值的形式有三种：</p>
<pre><code>ctx.strokeStyle=color|gradient|pattern;  //即支持 “颜色/渐变/图案笔刷” 的赋值
</code></pre><ol>
<li>先看看color赋值方式，和我们常规的css赋值是一样的，支持<a href="https://www.w3.org/TR/2003/CR-css3-color-20030514/#numerical" target="_blank" rel="external">css3颜色值标准</a>，如下例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//下面四种形式都是一样的，表示描边颜色为“橙色”</div><div class="line">ctx.strokeStyle = &quot;orange&quot;;</div><div class="line">ctx.strokeStyle = &quot;#FFA500&quot;;    //#rrggbb形式</div><div class="line">ctx.strokeStyle = &quot;rgb(255,165,0)&quot;;   //RGB形式</div><div class="line">ctx.strokeStyle = &quot;rgba(255,165,0,1)&quot;;   //比上面的rgb多了个a（Alpha），即透明度</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2 . 再看下渐变gradient，这个稍有复杂：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx = c.getContext(&quot;2d&quot;); </div><div class="line">ctx.moveTo(0,0);   </div><div class="line">ctx.lineTo(150,50); </div><div class="line">ctx.lineTo(20,100); </div><div class="line"></div><div class="line">var grd = ctx.createLinearGradient(0,0,170,0);  //定义线性渐变对象，设定渐变线起始点和结束点坐标，坐标格式为(起始点x,起始点y,结束点x,结束点y)</div><div class="line">grd.addColorStop(0,&quot;black&quot;);   //定义渐变线起点颜色</div><div class="line">grd.addColorStop(0.5,&quot;red&quot;);   //定义渐变线中间点的颜色</div><div class="line">grd.addColorStop(1,&quot;yellow&quot;);  //定义渐变线结束点的颜色</div><div class="line"></div><div class="line">ctx.strokeStyle = grd;   //将渐变对象赋值给strokeStyle</div><div class="line">ctx.stroke();  //描边</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/031244376968316.jpg" alt="line2"></p>
<p>这里我们提到了一个概念叫“渐变线”，没有玩过设计的朋友需要了解下渐变的知识点，我们可以把LinearGradient（线性渐变，另有放射状/圆形渐变RadialGradient）范围看成一个矩形（你可以通过Illustator、Photoshop等专业设计软件来辅助你理解这点）：<br><img src="http://images.cnitblog.com/i/561179/201408/031253445712410.jpg" alt="line3color"><br>我们一开始定义线性渐变对象的代码 <code>var grd = ctx.createLinearGradient(0,0,170,0)</code> 不外乎就是设定了线性渐变线起始点为(0,0)，结束点为(170,0)。</p>
<p>紧接着我们通过 addColorStop( 渐变线位置<0~1>, 颜色 ) 来设定了渐变色值，分别在渐变线0、0.5、1的位置设置了黑色、红色、黄色，其渐变效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/031305418375947.jpg" alt="color2"><br>通过 <strong><code>ctx.strokeStyle = grd</code></strong> 将渐变赋值给描边方法，最终描边得到了我们想要的渐变效果。</0~1></p>
<p>3 . 最后看看pattern描边方式，strokeStyle之所以不叫strokeColor是因为它除了支持颜色描边还支持图案描边（搞设计的朋友或许称作笔触描边会更有feel）。</p>
<p>线性渐变描边需要先createLinerGradient(xstart,ystart,xend,yend)，那么设置图案描边自然也要先新建一个canvasPattern对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createPattern(image, repetitionStyle)</div></pre></td></tr></table></figure></p>
<p>其中参数 image 代表图案对象，一般通过 document.createElement(‘img’) 或者 new Image() ，再定义其src值来创建该对象。<br>而repetitionStyle参数很好理解，即图案重复形式，其可选值有”repeat” 、”repeat-x”、”repeat-y” 和”no-repeat” （和css的background-repeat可选值一样，不赘述）。</p>
<p>我们这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;border:solid 1px #CCC; margin:30px;&quot;&gt;</div><div class="line">您的浏览器不支持canvas，建议使用最新版的Chrome</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    var c = document.getElementById(&quot;myCanvas&quot;);</div><div class="line">    var ctx = c.getContext(&quot;2d&quot;); </div><div class="line"></div><div class="line">    pic = new Image();   //创建图片对象，或者 pic = document.createElement(&apos;img&apos;)</div><div class="line">    pic.src = &quot;http://images.cnblogs.com/cnblogs_com/vajoy/558870/o_5.jpg&quot;;   //定义图片的映射地址</div><div class="line">    var redTexture = ctx.createPattern(pic, &quot;repeat&quot;);   //定义Pattern对象，设定填充图案为pic图片，填充形式为平铺</div><div class="line">    ctx.strokeStyle = redTexture;     //定义描边样式为上一行设定的Pattern描边</div><div class="line">    ctx.moveTo(80,10);</div><div class="line">    ctx.lineTo(10,90);</div><div class="line">    ctx.stroke();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://images.cnitblog.com/i/561179/201408/031517138374311.jpg" alt="images"><br>注意这里我还加了个 ctx.lineWidth = 8 来设定线段的粗度。</p>
<p>自此我们学习了strokeStyle的三个赋值方式，也学习了上述的通过 ctx.lineWidth = lineWeight 的形式来给线段设定粗度。</p>
<hr>
<p>咱们再学习两个很简单的线段属性 lineCap 和 lineJoin。</p>
<p>⑴ lineCap是设定线段端点的形状（线帽），其值可以是</p>
<blockquote>
<p>butt    默认，即线条端点为平直的边缘<br>round   线条端点为圆角线帽<br>square  为线条端点添加正方形线帽</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;250&quot; height=&quot;120&quot; style=&quot;border:1px solid #DDD;&quot;&gt;</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c=document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx=c.getContext(&quot;2d&quot;);</div><div class="line">ctx.lineWidth=10;</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineCap=&quot;butt&quot;;</div><div class="line">ctx.moveTo(20,10);</div><div class="line">ctx.lineTo(200,60);</div><div class="line">ctx.strokeStyle=&quot;red&quot;;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineCap=&quot;round&quot;;</div><div class="line">ctx.moveTo(30,90);</div><div class="line">ctx.lineTo(200,40);</div><div class="line">ctx.strokeStyle=&quot;blue&quot;;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineCap=&quot;square&quot;;</div><div class="line">ctx.moveTo(10,30);</div><div class="line">ctx.lineTo(200,80);</div><div class="line">ctx.strokeStyle=&quot;green&quot;;</div><div class="line">ctx.stroke();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p> 效果如下：<br> <img src="http://images.cnitblog.com/i/561179/201408/031600162431918.jpg" alt="3lin"><br> 光看此图可能看不太出“butt”和”square”的区别，但懂得使用AI绘制矢量的同学们应该比较了解：<br><img src="http://images.cnitblog.com/i/561179/201408/031605129308023.jpg" alt="AI"></p>
<p>⑵ lineJoin则是设定折线的交接处的外角类型，其值可为：</p>
<p>miter    默认，折线交接处为尖角<br>round   折线交接处为圆角<br>bevel   折线交接处为斜角</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;220&quot; style=&quot;border:1px solid #DDD;&quot;&gt;</div><div class="line">&lt;/canvas&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">var c=document.getElementById(&quot;myCanvas&quot;);</div><div class="line">var ctx=c.getContext(&quot;2d&quot;);</div><div class="line"></div><div class="line">ctx.lineWidth=13;</div><div class="line">ctx.lineJoin=&quot;bevel&quot;;</div><div class="line">ctx.moveTo(20,20);</div><div class="line">ctx.lineTo(100,50);</div><div class="line">ctx.lineTo(20,80);</div><div class="line">ctx.strokeStyle=&quot;red&quot;;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineJoin=&quot;round&quot;;</div><div class="line">ctx.moveTo(20,60);</div><div class="line">ctx.lineTo(100,90);</div><div class="line">ctx.lineTo(20,150);</div><div class="line">ctx.strokeStyle=&quot;green&quot;;</div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line">ctx.beginPath();</div><div class="line">ctx.lineJoin=&quot;miter&quot;;</div><div class="line">ctx.moveTo(20,90);</div><div class="line">ctx.lineTo(100,150);</div><div class="line">ctx.lineTo(20,200);</div><div class="line">ctx.strokeStyle=&quot;blue&quot;;</div><div class="line">ctx.stroke();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>效果如下<br><img src="http://images.cnitblog.com/i/561179/201408/031620285551919.jpg" alt="picture"></p>
<p>需要了解的是，miter还受到了属性miterLimit的影响（<a href="http://www.w3school.com.cn/tags/canvas_miterlimit.asp" target="_blank" rel="external">点此查看详细</a>），但个人觉得它跟bevel实现的效果是一致的，故在此不做介绍。<br>这次就到这里了，下次再见了啦！</p>
<hr>
<p>下面推荐一下其他很好的博文<br><a href="http://www.cnblogs.com/vajoy/p/3887608.html" target="_blank" rel="external">HTML5- Canvas入门（一）</a><br><a href="http://www.cnblogs.com/tim-li/archive/2012/08/06/2580252.html1" target="_blank" rel="external">玩转html5<code>&lt;canvas&gt;</code>画图</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;canvas其实没有那么玄乎，它不外乎是一个H5的标签，跟其它HTML标签如出一辙：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
    
    </summary>
    
    
      <category term="html5" scheme="http://yoursite.com/tags/html5/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>项目常用的less语法详解</title>
    <link href="http://yoursite.com/2016/12/10/%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E7%9A%84less%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/10/项目常用的less语法详解/</id>
    <published>2016-12-10T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.574Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h4 id="什么是less？"><a href="#什么是less？" class="headerlink" title="什么是less？"></a>什么是less？</h4><blockquote>
<p>less是一种动态样式语言，属于css预处理语言的一种，类似于css的语法，为css赋予了动态语言的特性，如<strong>变量、继承，运算，函数</strong>等，更方便css的编写和维护</p>
</blockquote>
<h4 id="编译工具"><a href="#编译工具" class="headerlink" title="编译工具"></a>编译工具</h4><ul>
<li>Koala编译<ul>
<li>国人开发的less/sass编译工具、</li>
<li>下载地址： <a href="http://koala-app.com/index-zh.html" target="_blank" rel="external">http://koala-app.com/index-zh.html</a><ul>
<li>常用： 输出方式compress(进行压缩)</li>
</ul>
</li>
</ul>
</li>
<li>Node.js库</li>
<li>浏览器端使用<h4 id="Koala配置及使用"><a href="#Koala配置及使用" class="headerlink" title="Koala配置及使用"></a>Koala配置及使用</h4></li>
</ul>
<ol>
<li><p>新建后缀为.less文件：index.less<br>头部写上：@charset “utf-8”; 　　//设定字符集</p>
</li>
<li><p>把文件夹拖到koala中，设置输出路径为style下的index.css<br>使用koala进行编译，然后就生成了一个index.css文件。</p>
</li>
<li><p>之后我们只要编辑index.less文件即可。</p>
</li>
</ol>
<h4 id="项目中常用的语言特性"><a href="#项目中常用的语言特性" class="headerlink" title="项目中常用的语言特性"></a>项目中常用的语言特性</h4><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul>
<li>less有两种注释<ul>
<li><code>//*会在css中编译出来/*/</code></li>
<li><code>//不会在css中编译出来</code><br>第一种的注释会在css中编译出来，第二种不会</li>
</ul>
</li>
</ul>
<h4 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h4><blockquote>
<p>变量允许我们单独定义一系列通用的样式，然后在需要的时候去调用。所以在做全局样式调整的时候我们可能只需要修改几行代码就可以了。</p>
</blockquote>
<ul>
<li>less中声明变量用@开头，例：@变量名：值；<br>less源码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@margin-left:30px;</div><div class="line">box&#123;margin: margin-left;&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>编译后的css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">box&#123;margin:30px;&#125;</div></pre></td></tr></table></figure></p>
<h4 id="混合模式（Mixins）"><a href="#混合模式（Mixins）" class="headerlink" title="混合模式（Mixins）"></a>混合模式（Mixins）</h4><blockquote>
<p>混合可以将一个定义好的class A轻松的引入到另一个class B中，从而简单实现class B继承class A中的所有属性。我们还可以<strong>带参数</strong>地调用，就像使<strong>用函数</strong>一样。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">//混合</div><div class="line">.box&#123;</div><div class="line">	width: @text_width;</div><div class="line">	height: 100px;</div><div class="line">	background: green;</div><div class="line">	.border;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.border&#123;</div><div class="line">	border:solid  1px pink;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//混合，可带参数</div><div class="line">.border_02(@border_width)&#123;</div><div class="line">	border:solid yellow @border_width;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test_mix2&#123;</div><div class="line">	.border_02(30px); //注意：参数不初始化，括号里必须要有个值，</div><div class="line">&#125;</div><div class="line">//混合默认带值</div><div class="line">.border_03(@border_width:10px)&#123;</div><div class="line">	border:solid yellow @border_width;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test_mix3&#123;</div><div class="line">	.border_03();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//混合好例子（适用多个浏览器）</div><div class="line"></div><div class="line">.border_radius(@radius:5px)&#123;</div><div class="line">	-webkit-border-radius:@radius;</div><div class="line">	-moz-border-radius:@radius;</div><div class="line">	border-radius:@radius;</div><div class="line">&#125;</div><div class="line">.radius_test&#123;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">	background: pink;</div><div class="line">	.border_radius(30px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="匹配模式："><a href="#匹配模式：" class="headerlink" title="匹配模式："></a>匹配模式：</h4><blockquote>
<p>有点像switch或者if 判断<br>满足哪个条件就用哪一个。 其他的就是混合。</p>
<blockquote>
<p>@_ ： ,这个很强大：无论匹配到什么值，均会运行，类似于成全局了（函数名一致）</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">.float(left)&#123; float:left; &#125;</div><div class="line">//调用匹配模式：那么就是：</div><div class="line"> .setFloat&#123; .float(left); &#125; </div><div class="line">//举个三角例子</div><div class="line"></div><div class="line">//匹配模式(原始)</div><div class="line"></div><div class="line">// .tri_test&#123;  </div><div class="line">	// width: 0;</div><div class="line">	// height: 0</div><div class="line">	// overflow: hidden;</div><div class="line"></div><div class="line">// 	border-width: 150px;</div><div class="line">// 	border-color: red transparent transparent transparent;</div><div class="line">// 	border-style: solid dashed dashed dashed ;//dashed 虚线</div><div class="line">// &#125;</div><div class="line"></div><div class="line">//匹配模式</div><div class="line">.triangle(top, @w: 5px, @c:#ccc)&#123;        //朝上</div><div class="line">	border-width: @w;</div><div class="line">	border-color: transparent transparent #ccc transparent;</div><div class="line">	border-style: dashed dashed solid dashed ;//dashed 虚线</div><div class="line">&#125;</div><div class="line">.triangle(bottom, @w: 5px, @c:#ccc)&#123;    //朝下</div><div class="line">	border-width: @w;</div><div class="line">	border-color: @c transparent transparent transparent;</div><div class="line">	border-style: solid dashed dashed  dashed ;//dashed 虚线</div><div class="line">&#125;</div><div class="line">.triangle(left, @w: 5px, @c:#ccc)&#123;     //朝左</div><div class="line">	border-width: @w;</div><div class="line">	border-color: transparent @c transparent transparent;</div><div class="line">	border-style: dashed solid dashed dashed ;//dashed 虚线</div><div class="line">&#125;</div><div class="line">.triangle(right, @w: 5px, @c:#ccc)&#123;    //朝右</div><div class="line">	border-width: @w;</div><div class="line">	border-color: transparent transparent transparent @c ;</div><div class="line">	border-style: dashed dashed dashed solid  ;//dashed 虚线</div><div class="line">&#125;</div><div class="line">.triangle(@_, @w: 5px, @c:#ccc)&#123;      //@_   强大：无论匹配到什么值，均会运行这个函数</div><div class="line">	width: 0;</div><div class="line">	height: 0;</div><div class="line">	overflow: hidden;</div><div class="line">&#125;</div><div class="line">.tri_test&#123;</div><div class="line">	</div><div class="line">	.triangle(top, 100px);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//好例子：：匹配：定位</div><div class="line">.pos(r)&#123;</div><div class="line">	position:relative;</div><div class="line">&#125;</div><div class="line">.pos(a)&#123;</div><div class="line">	position:absolute;</div><div class="line">&#125;</div><div class="line">.pos(f)&#123;</div><div class="line">	position:fixed;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.match&#123;</div><div class="line">	width: 100px;</div><div class="line">	height: 150px;</div><div class="line">	background-color: green;</div><div class="line">	.pos(r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><blockquote>
<p>任何数字，颜色或者变量都可以参与运算，运算应该包裹在括号里</p>
<blockquote>
<p>例如+ - *  /</p>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@val:300px;</div><div class="line">.box&#123;</div><div class="line">   width: @val + 20;/*less没有强制要求必须加单位，只要有一个有单位即可*/</div><div class="line">   height: (@val - 20) * 5;</div><div class="line">   color: #ccc - 10 ;/*less会把颜色转成 255 的数值，然后进行计算，输出颜色值对应的颜色，工作中很少用到*/</div></pre></td></tr></table></figure>
<h4 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h4><blockquote>
<p>&amp; 代表上一层选择器</p>
<ul>
<li>用处1：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a&#123;</div><div class="line">     &amp;:hover&#123;&#125;</div><div class="line">      &#125;；</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li>用处2：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.content&#123;</div><div class="line">	&amp;_item1&#123;  &#125;</div><div class="line">	&#125;        //&amp;_item1就相当于。content_item1</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//嵌套例子</div><div class="line">/*</div><div class="line">.list&#123;&#125;</div><div class="line">.list li&#123;&#125;</div><div class="line">.list a&#123;&#125;</div><div class="line">.list span&#123;&#125;</div><div class="line"></div><div class="line">*/下面所属关系，一层套一层，省去了重复的东西</div><div class="line">.list&#123;</div><div class="line">	width: 600px;</div><div class="line">	margin:30px auto;</div><div class="line">	padding: 0;</div><div class="line">	list-style: none;</div><div class="line">	li&#123;</div><div class="line">		height: 30px;</div><div class="line">		line-height: 30px;</div><div class="line">		background-color: pink;</div><div class="line">		margin-bottom: 5px;</div><div class="line">	&#125;</div><div class="line">	a&#123;</div><div class="line">		float: left;</div><div class="line">		//&amp; 代表上一层选择器</div><div class="line">		&amp;:hover&#123;</div><div class="line">			color: red;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	span&#123;</div><div class="line">		float: right;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>&amp; 代表他的上一层选择器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//&amp; 代表他的上一层选择器</div><div class="line">a&#123;</div><div class="line">	float: left;</div><div class="line">	//&amp; 代表上一层选择器</div><div class="line">	&amp;:hover&#123;</div><div class="line">		color: red;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>&amp;同样代表他的上一层选择器，起连接作用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//嵌套小例子</div><div class="line">//HTML</div><div class="line">&lt;div class=&quot;content&quot;&gt;</div><div class="line">		&lt;div class=&quot;content_item1&quot;&gt;&lt;/div&gt;</div><div class="line">		&lt;div class=&quot;content_item2&quot;&gt;&lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line"></div><div class="line">//LESS</div><div class="line">.content&#123;</div><div class="line">	width: 40px;</div><div class="line">	height: 40px;</div><div class="line">	background: #ccc;</div><div class="line">	&amp;_item1&#123;          //&amp;_item1就相当于。content_item1</div><div class="line">		width: 20px;</div><div class="line">		height: 20px;</div><div class="line">		background: pink;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>@arguments变量（用的不是很多）懒人必备</p>
<blockquote>
<p>@arguments包含了所有传递进来的参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> @border（@w：30px，@c：red，@s：solid）&#123;</div><div class="line">   border：@w @c @s</div><div class="line">&#125;</div><div class="line">//如果你不想单独处理每一个参数的话就可以像这样写：</div><div class="line">.border_arg(@w:30px,@c:red,@ww:solid)&#123;</div><div class="line">border:@arguments;//这个@arguments就相当于@w,@c,@s 包含所有参数</div><div class="line">&#125;</div><div class="line">//调用</div><div class="line">.test_arguments&#123;</div><div class="line">.border_arg(40px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote>
<ul>
<li>可以把封装的东西放到一个单独的 less里面，只需要在main.less主文件里面 @import 加文件名 xx 可以省略后缀名.</li>
<li>加载css需要  @import(less) “xxx.css”换汤不换药   其中“”前面有一个空格 还是css那一套加载方式，放到哪里就在哪里加载，样式表！<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//引入a.less和a.css例子</div><div class="line">@import &quot;a.less&quot;;         //引入其他的less样式表,其中.less可写可不写</div><div class="line">@import (less) &quot;a.css&quot;  //引入css样式表，注意（less）和“a.css”中间有个空格</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="less-也有作用域"><a href="#less-也有作用域" class="headerlink" title="less 也有作用域"></a>less 也有作用域</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.content1&#123;</div><div class="line">@w:100px;</div><div class="line">width:@w;</div><div class="line">&#125;</div><div class="line">.content2&#123;</div><div class="line">width:@w;//错误，这个@w引用不了，因为他在.content1中</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>欲知更多，请戳<a href="http://www.1024i.com/demo/less/" target="_blank" rel="external">less-中文官网</a><br>可学习视频：<a href="http://www.imooc.com/learn/102" target="_blank" rel="external">less即学即用-慕课</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h4 id=&quot;什么是less？&quot;&gt;&lt;a href=&quot;#什么是less？&quot; class=&quot;headerlink&quot; title=&quot;什么是less？&quot;&gt;&lt;/a&gt;什么是less？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;less是一种动态样式语言，属于css预处理语言的一种，
    
    </summary>
    
    
      <category term="less" scheme="http://yoursite.com/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>AngularJs指令解密</title>
    <link href="http://yoursite.com/2016/12/04/AngularJs%E6%8C%87%E4%BB%A4%E8%A7%A3%E5%AF%86/"/>
    <id>http://yoursite.com/2016/12/04/AngularJs指令解密/</id>
    <published>2016-12-04T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.569Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="指令定义"><a href="#指令定义" class="headerlink" title="指令定义"></a>指令定义</h3><p>在《AngularJs权威教程》中，指令可以简单理解成特定的DOM元素上运行的函数；我认为还可以理解成将将自定义的HTML标<strong>签解析成原始的标签</strong>，然后为其加入一些<strong>扩展的功能</strong>（函数）.<br>angularjs 提供了一个强大的扩展系统，通过指令机制，我们可以通过自定义指令来扩展自己的指令系统。</p>
<p>在AngularJS的核心里，指令可以绑定元素的属性（例如<strong>可见性，class列表，内部文本，内部HTML或者值</strong>）到scope的属性或表达式。最值得注意的是，一旦监测到scope中的变化被标记，这些绑定就会被更新。反过来也是相似的，使用$observe函数能够监测DOM属性，当监测到属性变化时会触发一个回调。</p>
<p>AngularJS应用的模块中有很多方法可以使用，其中<strong>directive()</strong>这个方法是用来定义指令的：<br>不急，首先要<strong>注意下指令的名字</strong>，先看个简单例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">  .module(&apos;myApp&apos;, [])</div><div class="line">  .directive(&apos;myDirective&apos;, myDirective);</div><div class="line"></div><div class="line">myDirective.$inject = [&apos;$timeout&apos;, &apos;UserDefinedService&apos;]</div><div class="line">function myDirective($timeout, UserDefinedService) &#123;</div><div class="line">  // 指令定义放在这里</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>尽管在上面的的代码片段中我们定义了一个命名为myDirective的指令,AngularJS约定在 HTML 标记里使用<strong>破折号的形式连接名字</strong>。如果这个指令作为一个属性实现，那么我在 HTML 中就会像这样调用：<code>&lt;span my-directive&gt;&lt;/span&gt;</code></p>
</blockquote>
<p>还有：directive()方法可以接受两个参数：</p>
<blockquote>
<ol>
<li>name(字符串)<br>指令的名字，用来在视力中引用特定的指令。</li>
<li>factory_function(函数)<br>这个函数返回一个对象，其中定义了指令的全部行为。$compile服务利用这个方法返回的对象，在DOM调用指令时来构造指令的行为。<blockquote>
<p>注意：为了避免与未来的HTML标准冲突，给自定义的指令加入前缀来代表自定义的命名空间。AngularJS本身已经使用了ng-前缀，所以可以选择除此以外的名字。在例子中我们使用my-前缀（比如my-derictive）。</p>
</blockquote>
</li>
</ol>
</blockquote>
<p>当AngularJS在DOM中遇到具名的指令时，会去匹配已经注册过的指令，并通过名字在注册过的对象中查找。此时，就开始了一个指令的生命周期，<strong>指令的生命周期开始于\$compile方法并结束于link方法</strong></p>
<p>下面，来看看定义一个指令时可以使用的<strong>全部设置</strong>选项。<br>可能的选项如下所示，每个键的值说明了可以将这个属性设置为何种类型或者什么样的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">angular</div><div class="line">  .module(&apos;myApp&apos;, [])</div><div class="line">  .directive(&apos;myDirective&apos;, myDirective);</div><div class="line"></div><div class="line">function myDirective() &#123;</div><div class="line">  return: &#123;</div><div class="line">    restrict: String,       //</div><div class="line">    priority: Number,</div><div class="line">    terminal: Boolean,</div><div class="line">    template: String or Template Function:</div><div class="line">      function(tElement, tAttrs) &#123;...&#125;,</div><div class="line">    templateUrl: String,</div><div class="line">    replace: Boolean or String,</div><div class="line">    scope: Boolean or Object,</div><div class="line">    transclude: Boolean,</div><div class="line">    controller: String or</div><div class="line">      function(scope, element, attrs, transclude, otherInjectables) &#123;...&#125;,</div><div class="line">    controllerAs: String,</div><div class="line">    require: String,</div><div class="line">    link: function(scope, iElement, iAttrs) &#123;...&#125;,</div><div class="line">    compile: // 返回一个对象或连接函数，如下所示:</div><div class="line">      function(tElement, tAttrs, transclude) &#123;</div><div class="line">        return &#123;</div><div class="line">          pre: function(scope, iElement, iAttrs， controller) &#123;...&#125;,</div><div class="line">          post: function(scope, iElement, iAttrs, controller) &#123;...&#125;</div><div class="line">        &#125;</div><div class="line">        // 或者</div><div class="line">        return function postLink(...) &#123;...&#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面我们来详细说说每种设置</p>
<h3 id="restrict-字符串string"><a href="#restrict-字符串string" class="headerlink" title="restrict(字符串string)"></a>restrict(字符串string)</h3><p>restrict是一个可选的参数。它告诉AngularJS这个指令在DOM中可以何种形式被声明。<strong>默认AngularJS认为restrict的值是A</strong>，即以属性的形式来进行声明。<br>可选值如下：<br>E(元素)：  <code>&lt;my-directive&gt;&lt;/my-directive&gt;</code></p>
<p>A(属性，默认值)：<code>&lt;div my-directive=&quot;expression&quot;&gt;&lt;/div&gt;</code></p>
<p>C(类名)：<code>&lt;div class=&quot;my-directive:expression;&quot;&gt;&lt;/div&gt;</code><br>M(注释)：<code>&lt;!-- directive:my-directive expression --&gt;</code><br>AE      : 可以结合上面的任意值来放松限制。</p>
<blockquote>
<ul>
<li>千万别用 ‘C’ 或者 ‘M’ 来限制你的指令。 用 ‘C’ 不能使之在标记中凸显出来， 用 ‘M’ 是为了向后兼容。 如果你觉得有趣， 你可以用一个例子来设置 restrict 为 ‘ACME’。<br>这些选项可以单独使用，也可以混合在一起使用。</li>
<li>属性是用来声明指令最常用的方式，因为它能在包括老版本的IE浏览器在内的所有浏览器中正常工作，并且不需要在文档头部注册新的标签。</li>
<li>包含某个组件的核心行为时使用<strong>元素型。</strong>用额外的行为、状态或者其他内容进行修饰或扩展时使用<strong>属性型</strong><h3 id="优先级-数值型Number"><a href="#优先级-数值型Number" class="headerlink" title="优先级(数值型Number)"></a>优先级(数值型Number)</h3></li>
</ul>
</blockquote>
<ul>
<li>优先级参数可以被设置为一个数值。大多数指令会忽略这个参数，使用默认值0，但也有些场景设置高优先级是非常重要甚至是必须的。例如，ngRepeat将这个参数设置为1000，这样就可以保证在同一元素上，它总是在其他指令之前被调用。</li>
<li>如果一个元素上具有两个优先级相同的指令，声明在前面的那个会被优先调用。如果其中一个的优先级更高，则不管声明的顺序如何都会被优先调用：具有更高优先级的指令总是优先运行。</li>
<li><h3 id="terminal-布尔型Boolean"><a href="#terminal-布尔型Boolean" class="headerlink" title="terminal(布尔型Boolean)"></a>terminal(布尔型Boolean)</h3></li>
</ul>
<p>terminal是一个布尔型参数，可以被设置为true或false。<br>这个参数用来告诉AngularJS停止运行当前元素上比本指令优先级低的指令。但同当前指令优先级相同的指令还是会被执行。<br>如果元素上某个指令设置了terminal参数并具有较高的优先级，就不要再用其他低优先级的指令对其进行修饰了，因为不会被调用。但是具有相同优先级的指令还是会被继续调用。</p>
<h3 id="template-字符串string或函数Function"><a href="#template-字符串string或函数Function" class="headerlink" title="template(字符串string或函数Function)"></a>template(字符串string或函数Function)</h3><p>template参数是可选的，必须被设置为以下两种形式之一：</p>
<blockquote>
<p>一段HTML文本;<br>一个可以接受两个参数的函数，参数为<code>tElement</code>和<code>tAttrs</code>，并返回一个代表模板的字符串。tElement和tAttrs中的t代表template，是相对于instance的。在讨论链接和编译设置时会详细介绍，模板元素或属性与实例元素或属性之间的区别。</p>
</blockquote>
<p>在实际生产中，更好的选择是使用templateUrl参数引用外部模板，因为多行文本阅读和维护起来都是一场噩梦。</p>
<h3 id="templateUrl（字符串String-函数Function）"><a href="#templateUrl（字符串String-函数Function）" class="headerlink" title="templateUrl（字符串String | 函数Function）"></a>templateUrl（字符串String | 函数Function）</h3><p>可选的参数，可以是以下类型：</p>
<blockquote>
<ul>
<li>一个代表外部HTML文件路径的字符串</li>
<li>一个可以接受两个参数的函数，参数为tElement和tAttrs，并返回一个外部HTML文件路径的字符串</li>
</ul>
</blockquote>
<p>模板的URL都将通过AngularJS内置的安全层， 特别是\$getTrustedResourceUrl，这样可以保护模板不会被不信任的源加载</p>
<p>调用指令时会在后台通过Ajax来请求HTML模板文件，也就是说：</p>
<pre><code>* 需要防止CORS错误
* 编译和链接要暂停，等待模板加载完成
</code></pre><p>模板加载后，AngularJS会将它默认缓存到$templateCache服务中，，可以提前将模板缓存到一个定义模板的JavaScript文件中，这样就不需要通过XHR来加载模板了</p>
<h3 id="replace-布尔型Boolean"><a href="#replace-布尔型Boolean" class="headerlink" title="replace(布尔型Boolean)"></a>replace(布尔型Boolean)</h3><p>replace是一个可选参数，如果设置了这个参数，值必须为true，因为默认值为false。默认值意味着模板会被当作子元素插入到调用此指令的元素内部：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div some-directive&gt;&lt;/div&gt;</div><div class="line">.directive(&apos;someDirective&apos;, function() &#123;</div><div class="line">  return &#123;</div><div class="line">    template: &apos;&lt;div&gt;some stuff here&lt;/div&gt;&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>调用指令之后的结果如下(这是默认replace为false时的情况)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div some-directive&gt;</div><div class="line">  &lt;div&gt;some stuff here&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>如果replace被设置为了true：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.directive(&apos;someDirective&apos;, function() &#123;</div><div class="line">  return &#123;</div><div class="line">    replace: true, // 修饰过</div><div class="line">    template: &apos;&lt;div&gt;some stuff here&lt;/div&gt;&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>指令调用后的结果将是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;some stuff here&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="scope（布尔值Boolean-对象Object）"><a href="#scope（布尔值Boolean-对象Object）" class="headerlink" title="scope（布尔值Boolean | 对象Object）"></a>scope（布尔值Boolean | 对象Object）</h3><p>scope参数是可选的，默认为false：</p>
<blockquote>
<ul>
<li>false：直接调用相同的作用域对象；</li>
<li>true：从当前作用域对象继承一个新的作用域对象；</li>
<li>对象：创建一个同当前作用域相隔离的作用域对象。</li>
</ul>
</blockquote>
<p>####独立作用域</p>
<blockquote>
<p>　scope属性值设置为true，作用是让自定义的每一个指令拥有独立的作用域，而不是共享一个作用域。</p>
</blockquote>
<h4 id="隔离作用域"><a href="#隔离作用域" class="headerlink" title="隔离作用域"></a>隔离作用域</h4><blockquote>
<p>通常情况下，当我们需要创建可复用的组建时，我们需要的就是具有隔离作用域的指令。它不依赖于上下文或者说是父级的作用域，所以可以随意迁移，不需要考虑依赖数据的问题。<br>　隔离作用域实现起来很简单，只要将自定义指令返回对象中“scope”值写成“{}”就行。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//隔离作用域</div><div class="line">app.directive(&apos;helloWorld&apos;, function() &#123;</div><div class="line">  return &#123;</div><div class="line">    scope: &#123;&#125;,//隔离作用域</div><div class="line">    restrict: &apos;AE&apos;,</div><div class="line">    replace: true,</div><div class="line">    template: &apos;&lt;p style=&quot;background-color:&#123;&#123;color&#125;&#125;&quot;&gt;Hello World&lt;/p&gt;&apos;,</div><div class="line">    link: function(scope, elem, attrs) &#123;</div><div class="line">      elem.bind(&apos;click&apos;, function() &#123;</div><div class="line">        elem.css(&apos;background-color&apos;,&apos;white&apos;);</div><div class="line">        scope.$apply(function() &#123;</div><div class="line">          scope.color = &quot;white&quot;;</div><div class="line">        &#125;);</div><div class="line">      &#125;);</div><div class="line">      elem.bind(&apos;mouseover&apos;, function() &#123;</div><div class="line">        elem.css(&apos;cursor&apos;, &apos;pointer&apos;);</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用隔离作用域时，可以将指令内部的隔离作用 域，同指令外部的作用域进行数据绑定：</p>
<pre><code>* 本地作用域属性：使用@符号将本地作用域同DOM属性的值进行绑定
* 双向绑定：通过=可以将本地作用域上的属性同父级作用域上的属性进行双向的数据绑定
* 父级作用域绑定：通过&amp;符号可以对父级作用域进行绑定，以便在其中运行函数
</code></pre><h3 id="transclude（布尔值Boolean）"><a href="#transclude（布尔值Boolean）" class="headerlink" title="transclude（布尔值Boolean）"></a>transclude（布尔值Boolean）</h3><p>可选，默认为false</p>
<p>可以将整个模板，包括其中的指令通过嵌入全部传入一个指令中。这样做可以将任意内容和作用域传递给指令。transclude参数就是用来实现这个目的的，指令的内部可以访问外部指令的作用域，并且模板也可以访问外部的作用域对象</p>
<blockquote>
<p>只有当你希望创建一个可以包含任意内容的指令时，才使用transclude: true</p>
</blockquote>
<h3 id="controller（字符串String-函数Function）"><a href="#controller（字符串String-函数Function）" class="headerlink" title="controller（字符串String | 函数Function）"></a>controller（字符串String | 函数Function）</h3><p>可选：</p>
<pre><code>* 字符串：以字符串的值为名字，查找注册在应用中的控制器的构造函数
* 函数：直接定义内联的控制器
</code></pre><p>可以向控制器中注入如下服务：</p>
<ul>
<li>\$scope: 与指令元素相关联的当前作用域</li>
<li>\$element: 当前指令对应的元素</li>
<li>\$attrs: 由当前元素的属性组成的对象</li>
<li>\$transclude: 嵌入链接函数会与对应的嵌入作用域进行预绑定。transclude链接函数是实际被执行用来克隆元素和操作DOM的函数。<h3 id="controllerAs-（字符串String）"><a href="#controllerAs-（字符串String）" class="headerlink" title="controllerAs （字符串String）"></a>controllerAs （字符串String）</h3></li>
</ul>
<p>用来设置控制器的别名，可以以此为名来发布控制器，并且作用域可以访问controllerAs。这样就可以在视图中引用控制器，甚至无需注入$scope。</p>
<h3 id="require（字符串String-数组Array）"><a href="#require（字符串String-数组Array）" class="headerlink" title="require（字符串String | 数组Array）"></a>require（字符串String | 数组Array）</h3><p>字符串或数组元素的值是会在当前指令的作用域中使用的指令名称。require会将控制器注入到其值所指定的指令中，并作为当前指令的链接函数的第四个参数。</p>
<p>默认情况下，指令只会在自身的元素上查找控制器。可以用下面的前缀进行修饰，改变查找控制器时的行为：</p>
<ul>
<li>?: 如果在当前指令中没有找到所需要的控制器，会将null作为传给link函数的第四个参数</li>
<li>^: 如果添加了^前缀，指令会在上游的指令链中查找require参数所指定的控制器</li>
<li>?^: 将前面两个选项的行为组合起来，可选择地加载需要的指令并在父指令链中进行查找</li>
<li>没有前缀: ，指令将会在自身所提供的控制器中进行查找，如果没有找到任何控制器（或具有指定名字的指令）就抛出一个错误</li>
</ul>
<h3 id="compile（对象Object-函数Function）"><a href="#compile（对象Object-函数Function）" class="headerlink" title="compile（对象Object | 函数Function）"></a>compile（对象Object | 函数Function）</h3><p>在compile函数内部，只对DOM进行操作，返回函数等效于使用link配置，返回对象的话包含两个函数：</p>
<ol>
<li>preLink会在编译阶段之后、指令连接到子元素之前运行</li>
<li>postLink会在所有子元素指令都链接之后才运行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">compile: function(tElement, tAttrs, transclude) &#123;</div><div class="line">    // 一些DOM操作</div><div class="line">    return &#123;</div><div class="line">        pre: function preLink(scope, iElement, iAttrs, controller) &#123;&#125;,</div><div class="line">        post: function postLink(scope, iElement, iAttrs, controller) &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="link（函数Function）"><a href="#link（函数Function）" class="headerlink" title="link（函数Function）"></a>link（函数Function）</h3><p>link函数会访问scope对象，其返回一个postLink函数。如果在compile中返回了post，那么link选项就会被忽略</p>
<pre><code>link: function postLink(scope, iElement, iAttrs){}
</code></pre><h3 id="compile和link"><a href="#compile和link" class="headerlink" title="compile和link"></a>compile和link</h3><p>compile和link有许多异同：</p>
<blockquote>
<p>compile函数只会被调用一次，而link函数的调用次数可能会很多。<br>compile用于对模板自身的转换，而link负责模型和视图之间进行动态关联<br>link函数能够访问scope作用域对象，而compile不会，因为在编译阶段，scope对象还不存在。<br>link和compile都会接收指令声明的DOM元素以及属性列表<br>compile可以返回preLink和postLink函数，而link只能返回postLink函数<br><img src="http://images2015.cnblogs.com/blog/836049/201512/836049-20151214203006584-600600936.png" alt="区别"></p>
<h3 id="AngularJS的生命周期"><a href="#AngularJS的生命周期" class="headerlink" title="AngularJS的生命周期"></a>AngularJS的生命周期</h3></blockquote>
<p>AngularJS应用启动后会进行编译和链接，作用域会同HTML进行绑定，应用可以对用户在HTML中进行的操作进行实时响应。</p>
<h4 id="编译三个阶段"><a href="#编译三个阶段" class="headerlink" title="编译三个阶段"></a>编译三个阶段</h4><ol>
<li>首先浏览器会用它的标准API将HTML解析成DOM。模板必须是可被解析的HTML。这是AngularJS和那些“以字符串为基础而非以DOM元素为基础的”模板系统的区别之处。</li>
<li>DOM的编译是有\$compile方法来执行的。这个方法会遍历DOM并找到匹配的指令。一旦找到一个，它就会被加入一个指令列表中，这个列表是用来记录所有和当前DOM相关的指令的。 一旦所有的指令都被确定了，会按照优先级被排序，并且他们的compile方法会被调用。指令的\$compile()函数能修改DOM结构，并且要负责生成一个link函数（后面会提到）。\$compile方法最后返回一个合并起来的链接函数，这是链接函数是每一个指令的compile函数返回的链接函数的集合。</li>
<li>通过调用一步所说的链接函数来将模板与作用域链接起来。这会轮流调用每一个指令的链接函数，让每一个指令都能对DOM注册监听事件，和建立对作用域的的监听。这样最后就形成了作用域的DOM的动态绑定。任何一个作用域的改变都会在DOM上体现出来。<br>大致过程如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var $compile = ...; // injected into your code</div><div class="line">var scope = ...;</div><div class="line"></div><div class="line">var html = &apos;&lt;div ng-bind=&apos;exp&apos;&gt;&lt;/div&gt;&apos;;</div><div class="line"></div><div class="line">// Step 1: parse HTML into DOM element</div><div class="line">var template = angular.element(html);</div><div class="line"></div><div class="line">// Step 2: compile the template</div><div class="line">var linkFn = $compile(template);</div><div class="line"></div><div class="line">// Step 3: link the compiled template with the scope.</div><div class="line">linkFn(scope);</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>模板之中可能含有指令，指令之中可能又含有模板，模板之中又含有指令，由此形成一棵模板树。只有具有最高优先级的指令中的模板会被编译。如果一个元素已经有一个含有模板的指令了，永远不要对其用另一个指令进行修饰。一个指令会将内部子指令的模板合并在一起成为一个模板函数并返回，它无法查找父指令，只能通过模板函数访问内部子指令</p>
</blockquote>
<h3 id="ngModel"><a href="#ngModel" class="headerlink" title="ngModel"></a>ngModel</h3><p>ngModel提供更底层的API来处理控制器内的数据。</p>
<p>为了设置作用域中的视图值，需要调用ngModel.<code>\$setViewValue()</code>函数，接受一个字符串参数value，表示想要赋予的实际值，然后：<br>ngModel.<code>\$setViewValue()</code>方法会更新控制器本地的\$viewValue，然后将值传递给每一个\$parser函数<br>值被解析且<code>\$parser</code>所有函数都完成后，值会赋给\$modeValue属性，并且传递给指令中ng-model属性提供的表达式<br>所有步骤都完成后，\$viewChangeListeners中所有的监听器都会被调用</p>
<blockquote>
<p>单独调用<code>\$setViewValue()</code>不会唤起一个新的digest循环，因此如果想更新指令，需要在设置\$viewValue后手动触发digest<br>ngModel的<code>\$render</code>方法可以定义视图具体的渲染方式，它在$parser完成后被调用</p>
</blockquote>
<p>ngModelController中有几个属性可用来检查甚至修改视图：</p>
<ol>
<li>\$viewValue： 保存着更新视图所需的实际字符串。</li>
<li>\$modelValue：由数据模型持有。\$modelValue和\$viewValue可能是不同的，取决于\$parser流水线是否对其进行了操作。</li>
<li>\$parsers：\$parsers的值是一个由函数组成的数组，其中的函数会以流水线的形式被逐一调用。ngModel从DOM中读取的值会被传入\$parsers中的函数，并依次被其中的解析器处理。</li>
<li>\$formatters：\$formatters的值是一个由函数组成的数组，其中的函数会以流水线的形式在数据模型的值 发生变化时被逐一调用。它和\$parser流水线互不影响，用来对值进行格式化和转换，以便在绑定了这个值的控件中显示。</li>
<li>\$viewChangeListeners：\$viewChangeListeners的值是一个由函数组成的数组，其中的函数会以流水线的形式在视图中的值发生变化时被逐一调用。通过\$viewChangeListeners，可以在无需使用\$watch的情况下实现类似的行为。由于返回值会被忽略，因此这些函数不需要返回值。</li>
</ol>
<p>友情链接<br>AngularJs权威教程<br><a href="http://www.cnblogs.com/shytong/p/5046531.html" target="_blank" rel="external">很好玩的博客–AngularJs指令详解</a><br><a href="http://jianganglu.github.io/2015/06/13/angular-directive/" target="_blank" rel="external">AngularJS - 指令详解</a><br><a href="http://read.lingyu.wang/the-complete-book-on-angularjs/directive-detail.html" target="_blank" rel="external">天镶的读书笔记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;指令定义&quot;&gt;&lt;a href=&quot;#指令定义&quot; class=&quot;headerlink&quot; title=&quot;指令定义&quot;&gt;&lt;/a&gt;指令定义&lt;/h3&gt;&lt;p&gt;在《AngularJs权威教程》中，指令可以简单理解成特定的DOM元素上运行的函数；我认为还可以理解成将将自定义的
    
    </summary>
    
    
      <category term="AngularJs" scheme="http://yoursite.com/tags/AngularJs/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS浅谈-博客</title>
    <link href="http://yoursite.com/2016/11/28/AngularJs%E6%B5%85%E8%B0%88/"/>
    <id>http://yoursite.com/2016/11/28/AngularJs浅谈/</id>
    <published>2016-11-28T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.570Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p><img src="http://ojmcn9nlw.qnssl.com/blog/20170112/160435655.jpg" alt="AngularJs图片"></p>
<h3 id="AngularJS是啥？（一脸懵逼）"><a href="#AngularJS是啥？（一脸懵逼）" class="headerlink" title="AngularJS是啥？（一脸懵逼）"></a>AngularJS是啥？（一脸懵逼）</h3><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><blockquote>
<p>AngularJS诞生于2009年，由Misko Hevery 等人创建，后为Google所收购。是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：<strong>MVC、模块化、自动化双向数据绑定、语义化标签、依赖注入</strong>等等。</p>
<h4 id="具体点说："><a href="#具体点说：" class="headerlink" title="具体点说："></a>具体点说：</h4><ol>
<li>AngularJS 是一个 JavaScript 框架<ul>
<li>AngularJS 是以一个 JavaScript 文件形式发布的，<strong>可通过 script 标签</strong>添加到网页中：<br><code>&lt;script src=&quot;../libs/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</code><ol>
<li>AngularJS 扩展了 HTML<blockquote>
<p>AngularJS 通过 ng-directives 扩展了 HTML。<br><strong>ng-app</strong> 指令定义一个 AngularJS 应用程序。<br><strong>ng-model</strong> 指令把元素值（比如输入域的值）绑定到应用程序。<br><strong>ng-bind</strong> 指令把应用程序数据绑定到 HTML 视图。<br><strong>ng-init</strong> 指令初始化 AngularJS 应用程序变量</p>
</blockquote>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="那么，重点来了，AngularJs可以干啥啊？"><a href="#那么，重点来了，AngularJs可以干啥啊？" class="headerlink" title="那么，重点来了，AngularJs可以干啥啊？"></a>那么，重点来了，AngularJs可以干啥啊？</h4><p>AngularJS 使得开发现代的<strong>单一页面应用程序</strong>（SPAs：Single Page Applications）变得更加容易。</p>
<blockquote>
<blockquote>
<p>AngularJS 把应用程序数据绑定到 HTML 元素。<br>AngularJS 可以克隆和重复 HTML 元素。<br>AngularJS 可以隐藏和显示 HTML 元素。<br>AngularJS 可以在 HTML 元素”背后”添加代码。<br>AngularJS 支持输入验证。</p>
</blockquote>
</blockquote>
<ul>
<li><p>举个荔枝（例子）吧！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;例子&lt;/title&gt;</div><div class="line">	&lt;script src=&quot;angular-1.0.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div ng-app=&quot;myApp&quot; ng-controller=&quot;myCtrl&quot;&gt;</div><div class="line">	名：&lt;input type=&quot;text&quot; ng-model=&quot;lastName&quot;&gt;&lt;br&gt;</div><div class="line">	姓：&lt;input type=&quot;text&quot; ng-model=&quot;firstName&quot;&gt;&lt;br&gt;</div><div class="line">	&lt;br&gt;</div><div class="line">	姓名：&#123;&#123;firstName+&quot; &quot;+ lastName&#125;&#125;</div><div class="line">	&lt;br&gt;</div><div class="line">	姓名：&#123;&#123;fullName()&#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">	var app=angular.module(&apos;myApp&apos;,[]);</div><div class="line">	app.controller(&apos;myCtrl&apos;,function($scope)&#123;</div><div class="line">		$scope.firstName=&quot;重庆&quot;;</div><div class="line">		$scope.lastName=&quot;黄&quot;;</div><div class="line">		$scope.fullName = function() &#123;</div><div class="line">        return $scope.firstName + &quot; &quot; + $scope.lastName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;	</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>初始化加载流程</p>
<ul>
<li><p>统一过程： </p>
<blockquote>
<p>1、浏览器载入HTML，然后把它解析成DOM。<br>2、浏览器载入angular.js脚本。<br>3、AngularJS等到DOMContentLoaded事件触发。<br>4、AngularJS寻找ng-app指令，这个指令指示了应用的边界。<br>5、使用ng-app中指定的模块来配置注入器(\$injector)。<br>6、注入器($injector)是用来创建“编译服务(\$compile service)”和“根作用域(\$rootScope)”的。<br>7、编译服务(\$compile service)是用来编译DOM并把它链接到根作用域(\$rootScope)的。</p>
</blockquote>
</li>
<li><p>具体过程：</p>
<blockquote>
<p>AngularJS 应用程序由 ng-app 定义。应用程序在 <div> 内运行。<br>ng-controller=”myCtrl” 属性是一个 AngularJS 指令。用于定义一个控制器。<br>myCtrl 函数是一个 JavaScript 函数。<br>AngularJS 使用$scope 对象来调用控制器。<br>在 AngularJS 中， $scope 是一个应用象(属于应用变量和函数)。<br>控制器的 $scope （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。<br>控制器在作用域中创建了两个属性 (firstName 和 lastName)。<br>ng-model 指令绑定输入域到控制器的属性（firstName 和 lastName）。</div></p>
</blockquote>
</li>
<li><strong>记住一点：</strong>在大型的应用程序中，通常是把控制器存储在外部文件中。<br>只需要把 <code>&lt;script&gt;</code> 标签中的代码复制到名为 <code>js文件.js</code> 的外部文件中即可，然后在script中引用js文件：</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="接下来说一下AngularJs中核心的集中特性吧！！"><a href="#接下来说一下AngularJs中核心的集中特性吧！！" class="headerlink" title="接下来说一下AngularJs中核心的集中特性吧！！"></a>接下来说一下AngularJs中核心的集中特性吧！！</h3><ul>
<li>先来个图！<br><img src="http://ojmcn9nlw.qnssl.com/blog/20170112/160712894.png" alt="mark"><blockquote>
<p>MVC<br>模块化<br>自动化双向数据绑定</p>
</blockquote>
</li>
</ul>
<h4 id="MVC（Model模型-View视图-Controller控制器）"><a href="#MVC（Model模型-View视图-Controller控制器）" class="headerlink" title="MVC（Model模型 View视图 Controller控制器）"></a>MVC（Model模型 View视图 Controller控制器）</h4><blockquote>
<p>首先要知道为什么要MVC？<br><img src="http://img.mukewang.com/58353e680001545712800720.jpg" alt="MVC"></p>
</blockquote>
<ul>
<li><p>AngularJs程序分为3部分：模板，表现层逻辑，数据（model）。</p>
<blockquote>
<p>模板：我们用html，css写的ui视图代码，其中包含AngularJs的指令，表达式，并最终会被AngularJs编译机制编译为附加在dom树上。AngularJs的指令（directive）可以由我们自由扩展。</p>
<p>表现层逻辑：包括应用程序逻辑和行为。用javascript定义作为视图控制器逻辑。在AngularJs作为MVC框架，在控制器中我们无需添加对于dom级的事件监听，这些在AngularJs中已经内置了。在ui节点dom事件发生后AngularJs会自动转到scope上的某个行为（Action）逻辑。</p>
<p>数据：视图对象（viewobject）需要被AngularJs Scope（1.0中作为service出现）引用，可以使任何类型的javascript对象，数组，基本类型，对象。并且AngularJs会自动异步更新模型，即在ui发生改变的时他会自动刷新模型（mode），反之在模型发生改变的时候也会自动刷新ui。在这里我们不需要定义形如getter，setter的一些列方法。</p>
</blockquote>
</li>
<li><p>MVC之间的关系，下面这张图看一下MVC中都包含些什么东西<br><img src="https://docs.angularjs.org/img/angular_parts.png" alt="MVC"></p>
</li>
<li>再看下面这张图-其中<strong>service是共用的的东西抽象出来的服务</strong><br><img src="http://img.mukewang.com/582042680001380a12800720.jpg" alt="此处输入图片的描述"></li>
</ul>
<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ul>
<li>AngularJs的模块（module):它是一个集合，相当于一个框子，由模型，视图，过滤器，服务等等组成</li>
<li>我们都知道JavaScript很容易就写出全局函数，所以无论是用jQuery还是纯JavaScript，我们都会使用模块化的策略避免写出来的函数污染全局。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">HTML代码:</div><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html ng-app=&quot;HelloAngular&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div ng-controller=&quot;helloNgCtrl&quot;&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;greeting.text&#125;&#125;,Angular&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    &lt;script src=&quot;js/angular-1.3.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;NgModule1.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//JS代码1:</div><div class="line">var modelName = angular.module(&apos;modelName&apos;,[]);</div><div class="line">modelName .controller(&apos;contollerName&apos;,[&apos;$scope&apos;,function($scope)&#123;</div><div class="line">   $scope.greeting = &#123;$scope.greeting=&#123;text:&apos;hello&apos;&#125;;&#125;</div><div class="line">&#125;]);</div><div class="line"></div><div class="line">//JS代码2</div><div class="line">function HelloAngular($scope)&#123;</div><div class="line">    $scope.greeting=&#123;</div><div class="line">        text:&apos;hello&apos;</div><div class="line">        &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显JS1代码函数污染了全局，而Js2代码通过一个模块进行封装，从而避免污染了全局。</p>
<blockquote>
<p>在前面我们看到ng-app指令。它的作用是自动启动一个AngularJS应用，ng-app指令一般指派在应用的根元素上，比如，body或者html标签。在每一个HTML文档中，只能有一个AngularJS应用可以被自动启动，在HTML文档中第一个被找到定义在根元素上的ng-app指令将会作为自动启动的应用。<br>那我们在js代码中定义的模块和ng-app有什么关系呢？很明显，它是告诉AngularJS应用在启动时加载指定的模块，假设这里ng-app只是放一个纯标签，而不给它赋值。那么它就不知道这里该加载什么模块，于是，它也不认识在模块中定义的textController控制器。</p>
</blockquote>
<ul>
<li>但是，赋值与否和启动一个AngularJS的应用无关：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-app&gt;</div><div class="line">        &lt;div ng-controller=&quot;helloNgCtrl&quot;&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;greeting.text&#125;&#125;,Angular&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这样也是可以启动AngularJS应用，并实现name模型的绑定。</p>
<ul>
<li><p>看一下ng官方的模块切分方式<br><img src="http://img.mukewang.com/582e9f2a0001220a11520720.jpg" alt="模块切分方式"></p>
</li>
<li><p>最后看一下模块化的完整项目结构，有利于大家对项目的整体认知<br><img src="http://img.mukewang.com/582d1de30001d20d11520720.jpg" alt="完整的项目结构"></p>
</li>
</ul>
<h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><ul>
<li>先来个官方例子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line"> 2 &lt;html ng-app&gt;</div><div class="line"> 3 </div><div class="line"> 4 &lt;head&gt;</div><div class="line"> 5 </div><div class="line"> 6 &lt;script src=&quot;http://code.angularjs.org/angular-1.0.1.min.js&quot;&gt;&lt;/script&gt;</div><div class="line"> 7 </div><div class="line"> 8 &lt;/head&gt;</div><div class="line"> 9 </div><div class="line">10 &lt;body&gt;</div><div class="line">11 </div><div class="line">12 Your name: &lt;input type=&quot;text&quot; ng-model=&quot;yourname&quot; placeholder=&quot;World&quot;&gt;//一个输入框，默认内容为World</div><div class="line">13 </div><div class="line">14 &lt;hr&gt;</div><div class="line">15 </div><div class="line">16 Hello &#123;&#123;yourname || &apos;World&apos;&#125;&#125;!</div><div class="line">18 &lt;/body&gt;</div><div class="line">20 &lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注:在输入框中输入任何字符都会立即绑定更新到页面.</p>
<blockquote>
<p>这里采用ng-model指令（directive）绑定是模型scope属性yourname。<br>并采用表达式将yourname绑定到文本信息中。<br>这里只需要任何的dom时间监听，因为AngularJs内置了。</p>
</blockquote>
</blockquote>
<p>友情链接：<br><a href="http://www.cnblogs.com/whitewolf/archive/2012/08/12/2635586.html" target="_blank" rel="external">MVC框架-破浪博客</a><br><a href="http://www.imooc.com/video/4285" target="_blank" rel="external">AngularJs实战视频</a><br><a href="http://www.ngnice.com/" target="_blank" rel="external">AngularJs中文</a><br><a href="http://blog.csdn.net/renfufei/article/details/19038123" target="_blank" rel="external">铁锚的CSDN博客</a><br><a href="http://ju.outofmemory.cn/entry/155946" target="_blank" rel="external">模块化</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://ojmcn9nlw.qnssl.com/blog/20170112/160435655.jpg&quot; alt=&quot;AngularJs图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;AngularJS是啥？（一脸懵逼）&quot;&gt;&lt;a href=&quot;#Angul
    
    </summary>
    
    
      <category term="AngularJs" scheme="http://yoursite.com/tags/AngularJs/"/>
    
  </entry>
  
  <entry>
    <title>JS-我待this如初见</title>
    <link href="http://yoursite.com/2016/08/18/JS-%E6%88%91%E5%BE%85this%E5%A6%82%E5%88%9D%E8%A7%81/"/>
    <id>http://yoursite.com/2016/08/18/JS-我待this如初见/</id>
    <published>2016-08-18T09:50:33.000Z</published>
    <updated>2017-07-28T15:03:14.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="何为this？"><a href="#何为this？" class="headerlink" title="何为this？"></a>何为this？</h1><p>this是对象，是在运行时基于<code>函数</code>的<code>执行环境</code>(和对象有关)绑定的，首先，当代码没执行前，或没执行到之前，this 是没有指向的,所以<br>切记：<code>在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了</code>。因为this的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。<br><code>this只要一出现，一定牵扯到函数和对象</code><br>一般方法：<code>首先分析this所在的函数是被当做哪个对象的方法调用的，则该对象就是this所引用的对象。</code></p>
<p>其实，this的取值，分五种情况。我们来挨个看一下。</p>
<blockquote>
<ul>
<li>全局和调用普通函数</li>
<li>构造函数</li>
<li>函数作为对象的一个属性</li>
<li>函数用call或apply或bind</li>
<li>事件监听函数中的this</li>
</ul>
</blockquote>
<h1 id="情况1：全局-amp-调用普通函数"><a href="#情况1：全局-amp-调用普通函数" class="headerlink" title="情况1：全局 &amp; 调用普通函数"></a>情况1：全局 &amp; 调用普通函数</h1><p>在全局环境下，this永远是window，这个应该没有非议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">console.log(this==window);//ture</div><div class="line">this.a=20;</div><div class="line">console.log(window.a);</div></pre></td></tr></table></figure></p>
<p>普通函数在调用时，其中的this也都是window。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var home=&quot;中国&quot;;</div><div class="line">var person=function()&#123;</div><div class="line">		var home=&quot;河南&quot;</div><div class="line">		console.log(this);  //window</div><div class="line">		console.log(this.home);  //中国</div><div class="line">  &#125;</div><div class="line">person();</div></pre></td></tr></table></figure>
<p>但是严格模式下 this是undefined(竞然)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function person1()&#123;</div><div class="line">	return this;        </div><div class="line">&#125;</div><div class="line">person1()===window;   //true</div><div class="line"></div><div class="line">function person2()&#123;</div><div class="line">	&quot;use strict&quot;  //严格模式</div><div class="line">	return this;</div><div class="line">&#125;</div><div class="line">person2()===undefined;        //true</div></pre></td></tr></table></figure></p>
<h1 id="情况2：构造函数"><a href="#情况2：构造函数" class="headerlink" title="情况2：构造函数"></a>情况2：构造函数</h1><p>所谓构造函数就是用来new对象的函数。其实严格来说，所有的函数都可以new一个对象，但是有些函数的定义是为了new一个对象，而有些函数则不是。另外注意，构造函数的函数名第一个字母大写（规则约定）。例如：Object、Array、Function等。</p>
<p><code>如果函数作为构造函数用，那么其中的this就代表它即将new出来的对象</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">function Person()&#123;</div><div class="line">	this.home=&quot;河南&quot;;</div><div class="line">	this.age=20;</div><div class="line"></div><div class="line">	console.log(this);   //Person &#123;home: &quot;河南&quot;, age: 20&#125;</div><div class="line">	console.log(this.home);//  河南</div><div class="line">&#125;</div><div class="line">var chongqing = new Person();</div><div class="line"></div><div class="line">console.log(chongqing.home);  //河南还是中国</div><div class="line">console.log(chongqing.age);  //20还是5000+</div><div class="line">console.log(age);  //5000+还是20</div></pre></td></tr></table></figure>
<p>以上代码中，如果函数作为构造函数用，那么其中的this就代表它即将new出来的对象,即上文中的chongqing。</p>
<p>上个例子中构造函数没有返回值，默认返回this，但是若有返回语句，返回一个对象的话，会将return的对象作为返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function Myclass()&#123;</div><div class="line">	this.a=20;</div><div class="line">&#125;</div><div class="line">var o=new Myclass();</div><div class="line">console.log(o.a);   //20</div><div class="line"></div><div class="line"></div><div class="line">function Person()&#123;</div><div class="line">	this.a=20;</div><div class="line">	return &#123;  a: 21&#125;;</div><div class="line">&#125;</div><div class="line">var o=new Person();</div><div class="line">console.log(o.a);   //21还是20</div></pre></td></tr></table></figure></p>
<p><code>注意，以上仅限new Person()的情况，即Person函数作为构造函数的情况。</code>如果直接调用Person函数，而不是new Person()，情况就大不一样了。相当于普通函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">function Person()&#123;</div><div class="line">	this.home=&quot;河南&quot;;</div><div class="line">	this.age=20;</div><div class="line"></div><div class="line">	console.log(this);   //window 还是Person &#123;home: &quot;河南&quot;, age: 20&#125;</div><div class="line">	console.log(this.home);//???河南还是中国</div><div class="line">	console.log(home);//???河南还是中国</div><div class="line">&#125;</div><div class="line">Person();</div></pre></td></tr></table></figure></p>
<p>这种情况下this是window，就是相当于普通函数中的this</p>
<p>构造函数还有一种情况，在构造函数的prototype中，this代表着什么？<br><code>在整个原型链中，this代表的是当前对象的值</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">function Person()&#123;</div><div class="line">	this.home=&quot;河南&quot;;</div><div class="line">	this.age=20;</div><div class="line"></div><div class="line">	console.log(this);   //Person &#123;home: &quot;河南&quot;, age: 20&#125;</div><div class="line">&#125;</div><div class="line">Person.prototype.getHome=function()&#123;</div><div class="line">	console.log(this.home);  //河南</div><div class="line">&#125;</div><div class="line"></div><div class="line">var chongqing= new Person();</div><div class="line">chongqing.getHome();//</div></pre></td></tr></table></figure></p>
<p>如上代码，在Person.prototype.getHome函数中，this指向的是chongqing对象。因此可以通过this.name获取chongqing.name的值。</p>
<p>其实，不仅仅是构造函数的prototype，即便是在整个原型链中，this代表的也都是当前对象的值。</p>
<h1 id="情况3：函数作为对象的一个方法"><a href="#情况3：函数作为对象的一个方法" class="headerlink" title="情况3：函数作为对象的一个方法"></a>情况3：函数作为对象的一个方法</h1><p>在这又分两种情况：</p>
<ol>
<li>函数作为对象的方法<code>被调用</code>,此时函数中的<code>this指向该对象</code></li>
<li>函数<code>被赋值</code>到了另一个变量中，<code>this的值是window</code></li>
</ol>
<p>###1. 如果函数作为对象的一个方法时，<code>并且作为对象的一个方法被调用</code>时，函数中的<code>this指向该对象</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">var obj=&#123;</div><div class="line">	home:&quot;河南&quot;,</div><div class="line">	person: function()&#123;</div><div class="line">		console.log(this);  //Object &#123;home: &quot;河南&quot;&#125;</div><div class="line">		console.log(this.home);  //河南</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.person();</div></pre></td></tr></table></figure></p>
<p>以上代码中，person不仅作为一个对象的一个方法，<code>而且的确是作为对象的一个方法被调用。结果this就是obj对象</code>。</p>
<p><code>注意</code>，如果<strong><code>person函数不作为obj的一个方法被调用</code></strong>，会是什么结果呢？</p>
<h3 id="2-如果person函数被赋值到了另一个变量中，并没有作为obj的一个方法被调用，那么this的值就是window"><a href="#2-如果person函数被赋值到了另一个变量中，并没有作为obj的一个方法被调用，那么this的值就是window" class="headerlink" title="2. 如果person函数被赋值到了另一个变量中，并没有作为obj的一个方法被调用，那么this的值就是window"></a>2. <code>如果person函数被赋值到了另一个变量中，并没有作为obj的一个方法被调用，那么this的值就是window</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">var obj=&#123;</div><div class="line">	home:&quot;河南&quot;,</div><div class="line">	person: function()&#123;</div><div class="line">		console.log(this);  //？？window还是object</div><div class="line">		console.log(this.home);  //？？中国还是河南</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">var person1=obj.person;</div><div class="line">person1();</div></pre></td></tr></table></figure>
<p>如上代码，如果person函数被赋值到了另一个变量中，并没有作为obj的一个属性被调用，那么this的值就是window,相当于全局了，this.home的值为中国</p>
<h3 id="3-闭包中使用this对象（对象方法函数中又有一个匿名函数）-this用处（诡异）"><a href="#3-闭包中使用this对象（对象方法函数中又有一个匿名函数）-this用处（诡异）" class="headerlink" title="3.闭包中使用this对象（对象方法函数中又有一个匿名函数）-this用处（诡异）"></a>3.闭包中使用this对象（对象方法函数中又有一个匿名函数）-this用处（诡异）</h3><p> <code>在ES3中，此时使用this比较糟糕，因为this失去了方向，引用的是window对象，而不是定义函数所在的对象,欣慰的是，this在ES5中是固定的，我们应该清楚地了解这种情况</code><br>注意： <code>在ES3中，当函数作为某个对象的方法调用时，this等于那个对象，不过在闭包中，匿名函数的执行环境具有全局性，此时通常this指向window</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;</div><div class="line">	home:&quot;河南&quot;,</div><div class="line">	person: function()&#123;</div><div class="line">		    function person1()&#123;</div><div class="line">			console.log(this);      //window</div><div class="line">			console.log(this.home);    //undefined</div><div class="line">        &#125;</div><div class="line">        person1();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">obj.person();</div></pre></td></tr></table></figure></p>
<p>总结<strong>：当this值的宿主环境被封装在另一个函数内部或在另一个函数的上下文被调用时，this将永远是对window对象的引用（再次说明，this在ES5中是固定的）</strong></p>
<p>如何改变上述情况呢？<br><code>可以在父函数中使用作用域链来保留对this的引用，以使this值不丢失</code>。如下代码演示了如何使用that变量及其作用域来有效跟踪函数上下文<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;</div><div class="line">	home:&quot;河南&quot;,</div><div class="line">	person: function()&#123;</div><div class="line">	        var that=this;  //person作用域中，保存this引用对象obj（而不是window）</div><div class="line">		    function person1()&#123;</div><div class="line">		      //输出通过作用域得到河南，因为that=this</div><div class="line">			console.log(that);      //Object &#123;home: &quot;河南&quot;&#125;</div><div class="line">			console.log(that.home);    //河南</div><div class="line">        &#125;</div><div class="line">        person1();</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">obj.person();</div></pre></td></tr></table></figure></p>
<h1 id="情况4：函数用call或者apply或bind调用"><a href="#情况4：函数用call或者apply或bind调用" class="headerlink" title="情况4：函数用call或者apply或bind调用"></a>情况4：函数用call或者apply或bind调用</h1><blockquote>
<p>先简单说一下call和apply和bind如何使用</p>
</blockquote>
<h3 id="call-apply"><a href="#call-apply" class="headerlink" title="call(),apply()"></a>call(),apply()</h3><ul>
<li>关于call和apply，首先这两个方法的用途都是在<code>特定的作用域中调用函数</code>，，都有两个参数call/apply(<code>作用域</code>，<code>传递给函数的参数</code>)</li>
<li><p>它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，<code>this指的就是这第一个参数</code>。 </p>
<ul>
<li>apply的用法和call大致相同，只有一点区别，apply只接受两个参数，第一个参数和call相同，第二个参数必须是一个数组，数组中的元素对应的就是函数的形参。<br>注意不同的是接受参数的方式不同，call()传递给函数的参数必须逐个列举出来，而apply()则是参数数组</li>
</ul>
</li>
</ul>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h3><ul>
<li>bind（）创造一个函数的实例，其this值会被绑定到传给bind（）函数的值。</li>
</ul>
<p>牢记：<strong>当一个函数被call或apply或bind调用时，this的值就取<code>传入的对象的值,即call（）或apply或bind（）括号里的对象</code>。</strong></p>
<p>call实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">window.home=&quot;中国&quot;;</div><div class="line">window.age=&quot;5000+&quot;;</div><div class="line">var obj=&#123;</div><div class="line">	home:&quot;河南&quot;</div><div class="line">&#125;;</div><div class="line">var person=function()&#123;</div><div class="line">		console.log(this);  //Object &#123;home: &quot;河南&quot;&#125;</div><div class="line">		console.log(this.home);  //河南</div><div class="line">  &#125;</div><div class="line">person.call(obj);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>还要注意：apply()的<code>参数</code>为空时，默认调用全局对象。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">　　var x = 0; </div><div class="line">　　function test()&#123; </div><div class="line">　　　　alert(this.x); </div><div class="line">　　&#125; </div><div class="line">　　var o=&#123;&#125;; </div><div class="line">　　o.x = 1; </div><div class="line">　　o.m = test; </div><div class="line">　　o.m.apply(); //0</div></pre></td></tr></table></figure>
<p>bind()实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">window.color=&quot;red&quot;;</div><div class="line">var o=&#123;color:&quot;blue&quot;&#125;;</div><div class="line"></div><div class="line">function sayColor()&#123;</div><div class="line">	alert(this.color);</div><div class="line">&#125;</div><div class="line">var objectSayColor=sayColor.bind(o);</div><div class="line">objectSayColor();    //blue还是red</div></pre></td></tr></table></figure></p>
<p>sayColor()调用bind（）并传入对象o。创建了objectSaycolor（）函数，objectSaycolor（）函数中的this的值等于o，因此，即使是在全局作用域中调用这个函数也会看到“blue”。</p>
<h1 id="情况5：事件监听函数中的this-大家应该熟悉"><a href="#情况5：事件监听函数中的this-大家应该熟悉" class="headerlink" title="情况5：事件监听函数中的this(大家应该熟悉)"></a>情况5：事件监听函数中的this(大家应该熟悉)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var one = document.getElementByIdx( &apos;one&apos; );</div><div class="line"></div><div class="line">one.onclick = function()&#123;</div><div class="line"></div><div class="line">    alert( this.innerHTML );  //this指向的是one元素，</div></pre></td></tr></table></figure>
<p>友情链接：<br>Javascript高级程序设计（第3版）-关于this对象-182页<br>JavaScript启示录-this部分<br><a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="external">博客-深入理解Js-this</a><br><a href="http://blog.csdn.net/dfyong/article/details/7313028" target="_blank" rel="external">博客-js中this</a><br><a href="http://www.imooc.com/video/6430" target="_blank" rel="external">慕课网Javascript深入浅出-this部分</a><br><a href="http://www.jb51.net/article/41656.htm" target="_blank" rel="external">博客-this关键字详解</a></p>
<h1 id="Ending（欲知后事如何，且听下回分解）"><a href="#Ending（欲知后事如何，且听下回分解）" class="headerlink" title="Ending（欲知后事如何，且听下回分解）"></a>Ending（欲知后事如何，且听下回分解）</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;何为this？&quot;&gt;&lt;a href=&quot;#何为this？&quot; class=&quot;headerlink&quot; title=&quot;何为this？&quot;&gt;&lt;/a&gt;何为this？&lt;/h1&gt;&lt;p&gt;this是对象，是在运行时基于&lt;code&gt;函数&lt;/code&gt;的&lt;code&gt;执行环境&lt;/code&gt;(和
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
